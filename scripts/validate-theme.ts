#!/usr/bin/env ts-node

import * as fs from 'fs'
import * as path from 'path'
import { TOKEN_REGISTRY, validateTokenAlpha } from '../src/core/tokenRegistry'
import { getContrastRatioAware } from '../src/core/contrast'
import type { Hex } from '../src/types/theme'

// –£—Å—Ç–∞—Ä–µ–≤—à–∏–µ —Å–≤–æ–π—Å—Ç–≤–∞ VS Code
const DEPRECATED_PROPERTIES = [
  'editorIndentGuide.background',
  'editorIndentGuide.activeBackground',
  'editorCodeLens.foreground',
  'editorOverviewRuler.currentContentForeground',
  'editorOverviewRuler.incomingContentForeground',
  'editorOverviewRuler.commonContentForeground',
  'merge.currentHeaderBackground',
  'merge.currentContentBackground',
  'merge.incomingHeaderBackground',
  'merge.incomingContentBackground',
  'merge.commonHeaderBackground',
  'merge.commonContentBackground',
]

// –°–æ–≤—Ä–µ–º–µ–Ω–Ω—ã–µ –∑–∞–º–µ–Ω—ã –¥–ª—è —É—Å—Ç–∞—Ä–µ–≤—à–∏—Ö —Å–≤–æ–π—Å—Ç–≤
const PROPERTY_REPLACEMENTS: Record<string, string> = {
  'editorIndentGuide.background': 'editorIndentGuide.background1',
  'editorIndentGuide.activeBackground': 'editorIndentGuide.activeBackground1',
}

// –ù–µ–¥–æ–ø—É—Å—Ç–∏–º—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è
const INVALID_VALUES = ['transparent', 'inherit', 'initial', 'unset']

// –í–∞–ª–∏–¥–Ω—ã–µ —Ü–≤–µ—Ç–æ–≤—ã–µ —Ñ–æ—Ä–º–∞—Ç—ã
const COLOR_REGEX = /^(#[0-9a-fA-F]{6}([0-9a-fA-F]{2})?|rgba?\([^)]+\))$/

// –ù–∞–±–æ—Ä –∏–∑–≤–µ—Å—Ç–Ω—ã—Ö –¥–æ–ø—É—Å—Ç–∏–º—ã—Ö –∫–ª—é—á–µ–π, —á—Ç–æ–±—ã –æ—Ç–ª–∞–≤–ª–∏–≤–∞—Ç—å –æ–ø–µ—á–∞—Ç–∫–∏.
// –°–ø–∏—Å–æ–∫ –Ω–µ–ø–æ–ª–Ω—ã–π, –Ω–æ –≤–∫–ª—é—á–∞–µ—Ç –ø—Ä–æ–±–ª–µ–º–Ω—ã–µ –∑–æ–Ω—ã: toolbar –∏ inlineChat.
const KNOWN_KEYS_PREFIXES: string[] = [
  // –≥–ª–æ–±–∞–ª—å–Ω–æ –¥–æ–ø—É—Å—Ç–∏–º—ã–µ –ø—Ä–µ—Ñ–∏–∫—Å—ã, –Ω–µ –±—É–¥–µ–º –ø–µ—Ä–µ—á–∏—Å–ª—è—Ç—å –≤—Å–µ –∫–ª—é—á–∏ VS Code
  'foreground',
  'descriptionForeground',
  'disabledForeground',
  'focusBorder',
  'errorForeground',
  'selection.background',
  'widget.shadow',
  'titleBar.',
  'menubar.',
  'menu.',
  'commandCenter.',
  'quickInput',
  'editor',
  'editorGroup',
  'activityBar',
  'activityBarBadge',
  'sideBar',
  'statusBar',
  'statusBarItem',
  'tab',
  'list',
  'tree.',
  'input',
  'inputOption',
  'inputValidation',
  'button',
  'dropdown',
  'badge',
  'progressBar.',
  'panel',
  'panelTitle',
  'panelSection',
  'terminal',
  'terminalCommandDecoration',
  'terminalOverviewRuler',
  'textLink',
  'textBlockQuote',
  'scrollbar',
  'scrollbarSlider',
  'notifications',
  'notificationCenter',
  'notificationCenterHeader',
  'notificationToast',
  'extensionButton',
  'extensionBadge',
  'gitDecoration',
  'scmGraph',
  'diffEditor',
  'settings.',
  'breadcrumb',
  'breadcrumbPicker',
  'widget.',
  'peekView',
  'editorWidget',
  'editorSuggestWidget',
  'editorHoverWidget',
  'debugExceptionWidget',
  'editorMarkerNavigation',
  'merge.',
  'editorOverviewRuler.',
  'minimap',
  'minimapSlider',
  'minimapGutter',
  'searchEditor',
  'problems',
  'charts',
  'checkbox',
  'toolbar', // –≤–∞–∂–Ω–æ –æ—Å—Ç–∞–≤–∏—Ç—å —Ç–æ–ª—å–∫–æ –¥–æ–ø—É—Å—Ç–∏–º—ã–µ toolbar.*
  'icon.',
  'keybindingLabel',
  'welcomePage',
  'walkThrough',
  'debugToolBar',
  'debugIcon',
  'debugConsole',
  'testing.',
  'ports.',
  // Inline Chat —Ä–∞–∑–¥–µ–ª (–≤–∞–∂–Ω—ã–µ –ø—Ä–µ—Ñ–∏–∫—Å—ã)
  'inlineChat.',
  'inlineChatInput.',
  'inlineChatDiff.',
]

interface ValidationResult {
  deprecated: Array<{ property: string; replacement?: string }>
  invalidValues: Array<{ property: string; value: string }>
  invalidColors: Array<{ property: string; value: string }>
  unknownProperties: Array<string>
  alphaPolicyViolations: Array<{ key: string; value: string; policy: string }>
  contrastWarnings: Array<{
    key: string
    value: string
    bgKey: string
    bgValue: string
    ratio: number
    hint: string
  }>
  registryCoverage: {
    missingInTheme: string[]
    notInRegistry: string[]
  }
}

function validateTheme(themePath: string): ValidationResult {
  const themeContent = fs.readFileSync(themePath, 'utf8')
  const theme = JSON.parse(themeContent)

  const result: ValidationResult = {
    deprecated: [],
    invalidValues: [],
    invalidColors: [],
    unknownProperties: [],
    alphaPolicyViolations: [],
    contrastWarnings: [],
    registryCoverage: { missingInTheme: [], notInRegistry: [] },
  }

  if (!theme.colors) {
    console.error('‚ùå –¢–µ–º–∞ –Ω–µ —Å–æ–¥–µ—Ä–∂–∏—Ç —Å–µ–∫—Ü–∏—é colors')
    return result
  }

  // KNOWN_KEYS_PREFIXES ‚Äî –≤ –º–æ–¥—É–ª—å–Ω–æ–π –æ–±–ª–∞—Å—Ç–∏

  // –ü–æ—Å—Ç—Ä–æ–∏–º –±—ã—Å—Ç—Ä—ã–π –∏–Ω–¥–µ–∫—Å —Ä–µ–µ—Å—Ç—Ä–∞
  const registryByKey = new Map(TOKEN_REGISTRY.map((m) => [m.key, m]))
  // –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –¥—É–±–ª–∏–∫–∞—Ç—ã –∫–ª—é—á–µ–π –≤ —Ä–µ–µ—Å—Ç—Ä–µ
  const uniqueCheck = new Set<string>()
  for (const m of TOKEN_REGISTRY) {
    if (uniqueCheck.has(m.key)) {
      console.warn(`‚ö†Ô∏è  –î—É–±–ª–∏–∫–∞—Ç –∫–ª—é—á–∞ –≤ TOKEN_REGISTRY: ${m.key}`)
    }
    uniqueCheck.add(m.key)
  }

  // –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–∞–∂–¥–æ–≥–æ —Å–≤–æ–π—Å—Ç–≤–∞
  for (const [property, value] of Object.entries(theme.colors)) {
    const stringValue = String(value)

    // –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–µ–∏–∑–≤–µ—Å—Ç–Ω—ã—Ö —Å–≤–æ–π—Å—Ç–≤ (–≥—Ä—É–±–∞—è —ç–≤—Ä–∏—Å—Ç–∏–∫–∞ –ø–æ –ø—Ä–µ—Ñ–∏–∫—Å–∞–º)
    const known = KNOWN_KEYS_PREFIXES.some(
      (p) => property === p || property.startsWith(p)
    )
    if (!known) {
      result.unknownProperties.push(property)
    }

    // –°–ø–µ—Ü–∏–∞–ª—å–Ω–∞—è —Å—Ç—Ä–æ–≥–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –¥–ª—è toolbar.* (—Ä–∞–∑–¥–µ–ª Action colors)
    if (property.startsWith('toolbar.')) {
      const allowed = new Set<
        'hoverBackground' | 'hoverOutline' | 'activeBackground'
      >(['hoverBackground', 'hoverOutline', 'activeBackground'])
      const key = property.split('.')[1] as any
      if (!allowed.has(key)) {
        result.unknownProperties.push(property)
      }
    }

    // –°–ø–µ—Ü–∏–∞–ª—å–Ω–∞—è —Å—Ç—Ä–æ–≥–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –¥–ª—è inlineChat.* (—Ç–æ–ª—å–∫–æ –±–∞–∑–æ–≤—ã–µ –∫–ª—é—á–∏)
    if (property.startsWith('inlineChat.')) {
      const allowed = new Set<
        'background' | 'foreground' | 'border' | 'shadow'
      >(['background', 'foreground', 'border', 'shadow'])
      const key = property.split('.')[1] as any
      if (!allowed.has(key)) {
        result.unknownProperties.push(property)
      }
    }

    // –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ —É—Å—Ç–∞—Ä–µ–≤—à–∏–µ —Å–≤–æ–π—Å—Ç–≤–∞
    if (DEPRECATED_PROPERTIES.includes(property)) {
      result.deprecated.push({
        property,
        replacement: PROPERTY_REPLACEMENTS[property],
      })
    }

    // –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –Ω–µ–¥–æ–ø—É—Å—Ç–∏–º—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è
    if (INVALID_VALUES.includes(stringValue)) {
      result.invalidValues.push({ property, value: stringValue })
    }

    // –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ—Å—Ç–∏ —Ü–≤–µ—Ç–æ–≤—ã—Ö –∑–Ω–∞—á–µ–Ω–∏–π
    if (
      !COLOR_REGEX.test(stringValue) &&
      !INVALID_VALUES.includes(stringValue)
    ) {
      result.invalidColors.push({ property, value: stringValue })
    }

    // –ü–æ–ª–∏—Ç–∏–∫–∞ –∞–ª—å—Ñ—ã –ø–æ —Ä–µ–µ—Å—Ç—Ä—É
    const meta = registryByKey.get(property)
    if (meta && meta.alpha) {
      const ok = validateTokenAlpha(property, stringValue, meta.alpha)
      if (!ok) {
        result.alphaPolicyViolations.push({
          key: property,
          value: stringValue,
          policy: meta.alpha,
        })
      }
    }
  }

  // –ö–æ–Ω—Ç—Ä–∞—Å—Ç-aware –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø–æ —Ä–µ–µ—Å—Ç—Ä—É (advisory)
  for (const meta of TOKEN_REGISTRY) {
    if (!meta.contrastHints || !meta.bgKey) continue
    const fg = theme.colors[meta.key]
    const bg = theme.colors[meta.bgKey]
    if (!fg || !bg) continue
    // –ö–æ–Ω—Ç—Ä–∞—Å—Ç —Å—á–∏—Ç–∞–µ–º —Ç–æ–ª—å–∫–æ –¥–ª—è 6-hex —Ñ–æ–Ω–∞
    if (!/^#[0-9a-fA-F]{6}$/.test(String(bg))) continue
    const ratio = getContrastRatioAware(fg, bg as Hex)
    if (!isFinite(ratio)) continue
    const { primaryMin, mutedMin, subtleMin } = meta.contrastHints
    const min = Math.max(primaryMin ?? 0, mutedMin ?? 0, subtleMin ?? 0)
    if (min > 0 && ratio < min) {
      result.contrastWarnings.push({
        key: meta.key,
        value: fg as string,
        bgKey: meta.bgKey,
        bgValue: bg as string,
        ratio,
        hint: `ratio ${ratio.toFixed(2)} < min ${min}`,
      })
    }
  }

  // –ü–æ–∫—Ä—ã—Ç–∏–µ —Ä–µ–µ—Å—Ç—Ä–æ–º
  for (const meta of TOKEN_REGISTRY) {
    if (!Object.prototype.hasOwnProperty.call(theme.colors, meta.key)) {
      result.registryCoverage.missingInTheme.push(meta.key)
    }
  }
  for (const property of Object.keys(theme.colors)) {
    if (!registryByKey.has(property)) {
      result.registryCoverage.notInRegistry.push(property)
    }
  }

  return result
}

function fixTheme(themePath: string, result: ValidationResult): void {
  const themeContent = fs.readFileSync(themePath, 'utf8')
  const theme = JSON.parse(themeContent)

  let hasChanges = false

  // –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —É—Å—Ç–∞—Ä–µ–≤—à–∏—Ö —Å–≤–æ–π—Å—Ç–≤
  for (const { property, replacement } of result.deprecated) {
    if (replacement && theme.colors[property]) {
      theme.colors[replacement] = theme.colors[property]
      delete theme.colors[property]
      hasChanges = true
      console.log(`üîÑ –ó–∞–º–µ–Ω–µ–Ω–æ: ${property} ‚Üí ${replacement}`)
    }
  }

  // –£–¥–∞–ª–µ–Ω–∏–µ –Ω–µ–¥–æ–ø—É—Å—Ç–∏–º—ã—Ö –∑–Ω–∞—á–µ–Ω–∏–π (–∑–∞–º–µ–Ω—è–µ–º –Ω–∞ null –∏–ª–∏ —É–¥–∞–ª—è–µ–º)
  for (const { property } of result.invalidValues) {
    if (theme.colors[property]) {
      delete theme.colors[property]
      hasChanges = true
      console.log(`üóëÔ∏è  –£–¥–∞–ª–µ–Ω–æ –Ω–µ–¥–æ–ø—É—Å—Ç–∏–º–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ: ${property}`)
    }
  }

  if (hasChanges) {
    fs.writeFileSync(themePath, JSON.stringify(theme, null, 2))
    console.log('‚úÖ –¢–µ–º–∞ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∞ –∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞')
  }
}

function printReport(result: ValidationResult): void {
  console.log('\nüìä –û—Ç—á–µ—Ç –≤–∞–ª–∏–¥–∞—Ü–∏–∏ —Ç–µ–º—ã\n')

  if (result.deprecated.length > 0) {
    console.log('‚ö†Ô∏è  –£—Å—Ç–∞—Ä–µ–≤—à–∏–µ —Å–≤–æ–π—Å—Ç–≤–∞:')
    const aliasMap = new Map<string, string>()
    TOKEN_REGISTRY.forEach((m) => {
      if (m.aliasOf) aliasMap.set(m.key, m.aliasOf)
    })
    result.deprecated.forEach(({ property, replacement }) => {
      const aliasOf = aliasMap.get(property)
      const repl = replacement || aliasOf
      console.log(
        `   ‚Ä¢ ${property}${repl ? ` ‚Üí ${repl}` : ' (–Ω–µ—Ç –∑–∞–º–µ–Ω—ã)'}${
          aliasOf && !replacement ? ' (–∏–∑ —Ä–µ–µ—Å—Ç—Ä–∞ aliasOf)' : ''
        }`
      )
    })
  }

  if (result.invalidValues.length > 0) {
    console.log('‚ùå –ù–µ–¥–æ–ø—É—Å—Ç–∏–º—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è:')
    result.invalidValues.forEach(({ property, value }) => {
      console.log(`   ‚Ä¢ ${property}: "${value}"`)
    })
    console.log()
  }

  if (result.invalidColors.length > 0) {
    console.log('üé® –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–µ —Ü–≤–µ—Ç–æ–≤—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è:')
    result.invalidColors.forEach(({ property, value }) => {
      console.log(`   ‚Ä¢ ${property}: "${value}"`)
    })
    console.log()
  }

  if (result.alphaPolicyViolations.length > 0) {
    console.log('ü´ß –ù–∞—Ä—É—à–µ–Ω–∏—è –ø–æ–ª–∏—Ç–∏–∫–∏ –∞–ª—å—Ñ—ã (–ø–æ TOKEN_REGISTRY):')
    result.alphaPolicyViolations.forEach(({ key, value, policy }) => {
      console.log(`   ‚Ä¢ ${key}: value=${value} policy=${policy}`)
    })
    console.log()
  }

  if (result.contrastWarnings.length > 0) {
    console.log(
      '‚öñÔ∏è  –ö–æ–Ω—Ç—Ä–∞—Å—Ç –Ω–∏–∂–µ —Ä–µ–∫–æ–º–µ–Ω–¥–æ–≤–∞–Ω–Ω–æ–≥–æ (advisory, —Å —É—á–µ—Ç–æ–º –∞–ª—å—Ñ—ã):'
    )
    result.contrastWarnings
      .sort((a, b) => a.ratio - b.ratio)
      .forEach(({ key, value, bgKey, bgValue, ratio, hint }) => {
        console.log(
          `   ‚Ä¢ ${key} vs ${bgKey}: fg=${value} bg=${bgValue} ‚Üí ${ratio.toFixed(
            2
          )} (${hint})`
        )
      })
    console.log()
  }

  if (
    result.registryCoverage.missingInTheme.length > 0 ||
    result.registryCoverage.notInRegistry.length > 0
  ) {
    console.log('üóÇÔ∏è  –ü–æ–∫—Ä—ã—Ç–∏–µ —Ä–µ–µ—Å—Ç—Ä–æ–º —Ç–æ–∫–µ–Ω–æ–≤:')
    if (result.registryCoverage.missingInTheme.length > 0) {
      console.log('   ‚Ä¢ –û—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –≤ —Ç–µ–º–µ:')
      result.registryCoverage.missingInTheme.forEach((k) =>
        console.log(`      - ${k}`)
      )
    }
    if (result.registryCoverage.notInRegistry.length > 0) {
      console.log('   ‚Ä¢ –ù–µ—Ç –≤ —Ä–µ–µ—Å—Ç—Ä–µ (–≤ —Ç–µ–º–µ –ø—Ä–∏—Å—É—Ç—Å—Ç–≤—É—é—Ç):')
      result.registryCoverage.notInRegistry.forEach((k) =>
        console.log(`      - ${k}`)
      )
    }
    console.log()
  }

  if (result.unknownProperties.length > 0) {
    console.log('‚ùì –ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–µ –∫–ª—é—á–∏ (–≤–æ–∑–º–æ–∂–Ω—ã –æ–ø–µ—á–∞—Ç–∫–∏ –∏–ª–∏ —É—Å—Ç–∞—Ä–µ–≤—à–∏–µ ID):')
    const known = new Set<string>()
    // —Å–æ–±–∏—Ä–∞–µ–º –∏–∑–≤–µ—Å—Ç–Ω—ã–µ –∫–ª—é—á–∏ –∏–∑ –ø—Ä–µ—Ñ–∏–∫—Å–æ–≤ –∏ –ø–æ–ø—É–ª—è—Ä–Ω—ã—Ö —Ç–æ–∫–µ–Ω–æ–≤
    KNOWN_KEYS_PREFIXES.forEach((p) => known.add(p))
    // –î–æ–±–∞–≤–∏–º —á–∞—Å—Ç—å —Å–ø–µ—Ü–∏—Ñ–∏—á–µ—Å–∫–∏—Ö –ø–æ–ª–Ω—ã—Ö –∫–ª—é—á–µ–π, –∫–æ—Ç–æ—Ä—ã–µ —á–∞—Å—Ç–æ –ø—É—Ç–∞—é—Ç
    ;[
      'editorIndentGuide.background1',
      'editorIndentGuide.activeBackground1',
      'textBlockQuote.background',
      'textBlockQuote.border',
    ].forEach((k) => known.add(k))
    // –î–æ–±–∞–≤–∏–º –∫–ª—é—á–∏ –∏–∑ —Ä–µ–µ—Å—Ç—Ä–∞ —Ç–æ–∫–µ–Ω–æ–≤ –∫–∞–∫ –∫–∞–Ω–¥–∏–¥–∞—Ç—ã
    TOKEN_REGISTRY.forEach((m) => known.add(m.key))

    const distance = (a: string, b: string) => {
      const dp = Array.from({ length: a.length + 1 }, () =>
        new Array<number>(b.length + 1).fill(0)
      )
      for (let i = 0; i <= a.length; i++) dp[i][0] = i
      for (let j = 0; j <= b.length; j++) dp[0][j] = j
      for (let i = 1; i <= a.length; i++) {
        for (let j = 1; j <= b.length; j++) {
          const cost = a[i - 1] === b[j - 1] ? 0 : 1
          dp[i][j] = Math.min(
            dp[i - 1][j] + 1,
            dp[i][j - 1] + 1,
            dp[i - 1][j - 1] + cost
          )
        }
      }
      return dp[a.length][b.length]
    }

    result.unknownProperties.forEach((property) => {
      // –∏—â–µ–º –±–ª–∏–∂–∞–π—à–∏–µ 3 –ø–æ–¥—Å–∫–∞–∑–∫–∏
      const suggestions = Array.from(known)
        .map((k) => ({ k, d: distance(property, k) }))
        .sort((x, y) => x.d - y.d)
        .slice(0, 3)
        .map((x) => x.k)
      const hint = suggestions.length
        ? `  ‚Üí –í–æ–∑–º–æ–∂–Ω–æ: ${suggestions.join(', ')}`
        : ''
      console.log(`   ‚Ä¢ ${property}${hint}`)
    })
    console.log()
  }

  const totalIssues =
    result.deprecated.length +
    result.invalidValues.length +
    result.invalidColors.length +
    result.unknownProperties.length +
    result.alphaPolicyViolations.length

  if (totalIssues === 0) {
    console.log('‚úÖ –ü—Ä–æ–±–ª–µ–º –Ω–µ –Ω–∞–π–¥–µ–Ω–æ! –¢–µ–º–∞ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É–µ—Ç —Å—Ç–∞–Ω–¥–∞—Ä—Ç–∞–º VS Code.')
  } else {
    console.log(`üìà –ù–∞–π–¥–µ–Ω–æ –ø—Ä–æ–±–ª–µ–º: ${totalIssues}`)
    console.log('   - –£—Å—Ç–∞—Ä–µ–≤—à–∏—Ö —Å–≤–æ–π—Å—Ç–≤:', result.deprecated.length)
    console.log('   - –ù–µ–¥–æ–ø—É—Å—Ç–∏–º—ã—Ö –∑–Ω–∞—á–µ–Ω–∏–π:', result.invalidValues.length)
    console.log('   - –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã—Ö —Ü–≤–µ—Ç–æ–≤:', result.invalidColors.length)
    console.log('   - –ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã—Ö –∫–ª—é—á–µ–π:', result.unknownProperties.length)
    console.log(
      '   - –ü–æ–ª–∏—Ç–∏–∫–∞ –∞–ª—å—Ñ—ã –Ω–∞—Ä—É—à–µ–Ω–∞:',
      result.alphaPolicyViolations.length
    )
  }
}

// –û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è
function main() {
  const themePath = path.join(
    __dirname,
    '../themes/tokyo-night-modern-color-theme.json'
  )

  if (!fs.existsSync(themePath)) {
    console.error('‚ùå –§–∞–π–ª —Ç–µ–º—ã –Ω–µ –Ω–∞–π–¥–µ–Ω:', themePath)
    process.exit(1)
  }

  console.log('üîç –í–∞–ª–∏–¥–∞—Ü–∏—è —Ç–µ–º—ã Tokyo Night Modern...\n')

  const result = validateTheme(themePath)

  // –†–µ–∂–∏–º –ø–æ–¥—Å–∫–∞–∑–æ–∫: –ø–µ—á–∞—Ç–∞–µ–º —Ç–æ–ª—å–∫–æ –Ω–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–µ –∏ –∏—Ö –±–ª–∏–∑–∫–∏–µ –≤–∞—Ä–∏–∞–Ω—Ç—ã
  if (process.argv.includes('--suggest')) {
    const onlyUnknown: ValidationResult = {
      deprecated: [],
      invalidValues: [],
      invalidColors: [],
      unknownProperties: result.unknownProperties,
      alphaPolicyViolations: [],
      contrastWarnings: [],
      registryCoverage: { missingInTheme: [], notInRegistry: [] },
    }
    printReport(onlyUnknown)
    return
  }

  printReport(result)

  // –ü—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è
  const totalIssues = result.deprecated.length + result.invalidValues.length
  if (totalIssues > 0) {
    console.log('\nüîß –ó–∞–ø—É—Å—Ç–∏—Ç–µ —Å —Ñ–ª–∞–≥–æ–º --fix –¥–ª—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è')

    if (process.argv.includes('--fix')) {
      console.log('\nüîÑ –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø—Ä–æ–±–ª–µ–º...')
      fixTheme(themePath, result)
    }
  }
}

if (require.main === module) {
  main()
}
