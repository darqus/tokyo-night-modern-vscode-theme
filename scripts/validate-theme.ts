#!/usr/bin/env ts-node

import * as fs from 'fs'
import * as path from 'path'

// –£—Å—Ç–∞—Ä–µ–≤—à–∏–µ —Å–≤–æ–π—Å—Ç–≤–∞ VS Code
const DEPRECATED_PROPERTIES = [
  'editorIndentGuide.background',
  'editorIndentGuide.activeBackground',
  'editorCodeLens.foreground',
  'editorOverviewRuler.currentContentForeground',
  'editorOverviewRuler.incomingContentForeground',
  'editorOverviewRuler.commonContentForeground',
  'merge.currentHeaderBackground',
  'merge.currentContentBackground',
  'merge.incomingHeaderBackground',
  'merge.incomingContentBackground',
  'merge.commonHeaderBackground',
  'merge.commonContentBackground',
]

// –°–æ–≤—Ä–µ–º–µ–Ω–Ω—ã–µ –∑–∞–º–µ–Ω—ã –¥–ª—è —É—Å—Ç–∞—Ä–µ–≤—à–∏—Ö —Å–≤–æ–π—Å—Ç–≤
const PROPERTY_REPLACEMENTS: Record<string, string> = {
  'editorIndentGuide.background': 'editorIndentGuide.background1',
  'editorIndentGuide.activeBackground': 'editorIndentGuide.activeBackground1',
}

// –ù–µ–¥–æ–ø—É—Å—Ç–∏–º—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è
const INVALID_VALUES = ['transparent', 'inherit', 'initial', 'unset']

// –í–∞–ª–∏–¥–Ω—ã–µ —Ü–≤–µ—Ç–æ–≤—ã–µ —Ñ–æ—Ä–º–∞—Ç—ã
const COLOR_REGEX = /^(#[0-9a-fA-F]{6}([0-9a-fA-F]{2})?|rgba?\([^)]+\))$/

interface ValidationResult {
  deprecated: Array<{ property: string; replacement?: string }>
  invalidValues: Array<{ property: string; value: string }>
  invalidColors: Array<{ property: string; value: string }>
  unknownProperties: Array<string>
}

function validateTheme(themePath: string): ValidationResult {
  const themeContent = fs.readFileSync(themePath, 'utf8')
  const theme = JSON.parse(themeContent)

  const result: ValidationResult = {
    deprecated: [],
    invalidValues: [],
    invalidColors: [],
    unknownProperties: [],
  }

  if (!theme.colors) {
    console.error('‚ùå –¢–µ–º–∞ –Ω–µ —Å–æ–¥–µ—Ä–∂–∏—Ç —Å–µ–∫—Ü–∏—é colors')
    return result
  }

  // –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–∞–∂–¥–æ–≥–æ —Å–≤–æ–π—Å—Ç–≤–∞
  for (const [property, value] of Object.entries(theme.colors)) {
    const stringValue = String(value)

    // –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ —É—Å—Ç–∞—Ä–µ–≤—à–∏–µ —Å–≤–æ–π—Å—Ç–≤–∞
    if (DEPRECATED_PROPERTIES.includes(property)) {
      result.deprecated.push({
        property,
        replacement: PROPERTY_REPLACEMENTS[property],
      })
    }

    // –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –Ω–µ–¥–æ–ø—É—Å—Ç–∏–º—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è
    if (INVALID_VALUES.includes(stringValue)) {
      result.invalidValues.push({ property, value: stringValue })
    }

    // –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ—Å—Ç–∏ —Ü–≤–µ—Ç–æ–≤—ã—Ö –∑–Ω–∞—á–µ–Ω–∏–π
    if (
      !COLOR_REGEX.test(stringValue) &&
      !INVALID_VALUES.includes(stringValue)
    ) {
      result.invalidColors.push({ property, value: stringValue })
    }
  }

  return result
}

function fixTheme(themePath: string, result: ValidationResult): void {
  const themeContent = fs.readFileSync(themePath, 'utf8')
  const theme = JSON.parse(themeContent)

  let hasChanges = false

  // –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —É—Å—Ç–∞—Ä–µ–≤—à–∏—Ö —Å–≤–æ–π—Å—Ç–≤
  for (const { property, replacement } of result.deprecated) {
    if (replacement && theme.colors[property]) {
      theme.colors[replacement] = theme.colors[property]
      delete theme.colors[property]
      hasChanges = true
      console.log(`üîÑ –ó–∞–º–µ–Ω–µ–Ω–æ: ${property} ‚Üí ${replacement}`)
    }
  }

  // –£–¥–∞–ª–µ–Ω–∏–µ –Ω–µ–¥–æ–ø—É—Å—Ç–∏–º—ã—Ö –∑–Ω–∞—á–µ–Ω–∏–π (–∑–∞–º–µ–Ω—è–µ–º –Ω–∞ null –∏–ª–∏ —É–¥–∞–ª—è–µ–º)
  for (const { property } of result.invalidValues) {
    if (theme.colors[property]) {
      delete theme.colors[property]
      hasChanges = true
      console.log(`üóëÔ∏è  –£–¥–∞–ª–µ–Ω–æ –Ω–µ–¥–æ–ø—É—Å—Ç–∏–º–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ: ${property}`)
    }
  }

  if (hasChanges) {
    fs.writeFileSync(themePath, JSON.stringify(theme, null, 2))
    console.log('‚úÖ –¢–µ–º–∞ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∞ –∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞')
  }
}

function printReport(result: ValidationResult): void {
  console.log('\nüìä –û—Ç—á–µ—Ç –≤–∞–ª–∏–¥–∞—Ü–∏–∏ —Ç–µ–º—ã\n')

  if (result.deprecated.length > 0) {
    console.log('‚ö†Ô∏è  –£—Å—Ç–∞—Ä–µ–≤—à–∏–µ —Å–≤–æ–π—Å—Ç–≤–∞:')
    result.deprecated.forEach(({ property, replacement }) => {
      console.log(
        `   ‚Ä¢ ${property}${replacement ? ` ‚Üí ${replacement}` : ' (–Ω–µ—Ç –∑–∞–º–µ–Ω—ã)'}`
      )
    })
    console.log()
  }

  if (result.invalidValues.length > 0) {
    console.log('‚ùå –ù–µ–¥–æ–ø—É—Å—Ç–∏–º—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è:')
    result.invalidValues.forEach(({ property, value }) => {
      console.log(`   ‚Ä¢ ${property}: "${value}"`)
    })
    console.log()
  }

  if (result.invalidColors.length > 0) {
    console.log('üé® –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–µ —Ü–≤–µ—Ç–æ–≤—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è:')
    result.invalidColors.forEach(({ property, value }) => {
      console.log(`   ‚Ä¢ ${property}: "${value}"`)
    })
    console.log()
  }

  const totalIssues =
    result.deprecated.length +
    result.invalidValues.length +
    result.invalidColors.length

  if (totalIssues === 0) {
    console.log('‚úÖ –ü—Ä–æ–±–ª–µ–º –Ω–µ –Ω–∞–π–¥–µ–Ω–æ! –¢–µ–º–∞ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É–µ—Ç —Å—Ç–∞–Ω–¥–∞—Ä—Ç–∞–º VS Code.')
  } else {
    console.log(`üìà –ù–∞–π–¥–µ–Ω–æ –ø—Ä–æ–±–ª–µ–º: ${totalIssues}`)
    console.log('   - –£—Å—Ç–∞—Ä–µ–≤—à–∏—Ö —Å–≤–æ–π—Å—Ç–≤:', result.deprecated.length)
    console.log('   - –ù–µ–¥–æ–ø—É—Å—Ç–∏–º—ã—Ö –∑–Ω–∞—á–µ–Ω–∏–π:', result.invalidValues.length)
    console.log('   - –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã—Ö —Ü–≤–µ—Ç–æ–≤:', result.invalidColors.length)
  }
}

// –û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è
function main() {
  const themePath = path.join(
    __dirname,
    '../themes/tokyo-night-modern-color-theme.json'
  )

  if (!fs.existsSync(themePath)) {
    console.error('‚ùå –§–∞–π–ª —Ç–µ–º—ã –Ω–µ –Ω–∞–π–¥–µ–Ω:', themePath)
    process.exit(1)
  }

  console.log('üîç –í–∞–ª–∏–¥–∞—Ü–∏—è —Ç–µ–º—ã Tokyo Night Modern...\n')

  const result = validateTheme(themePath)
  printReport(result)

  // –ü—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è
  const totalIssues = result.deprecated.length + result.invalidValues.length
  if (totalIssues > 0) {
    console.log('\nüîß –ó–∞–ø—É—Å—Ç–∏—Ç–µ —Å —Ñ–ª–∞–≥–æ–º --fix –¥–ª—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è')

    if (process.argv.includes('--fix')) {
      console.log('\nüîÑ –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø—Ä–æ–±–ª–µ–º...')
      fixTheme(themePath, result)
    }
  }
}

if (require.main === module) {
  main()
}
