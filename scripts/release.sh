#!/bin/bash

# üöÄ Tokyo Night Modern Release Script
# –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ —É–º–Ω–æ–µ –ø–æ–¥–Ω—è—Ç–∏–µ –≤–µ—Ä—Å–∏–∏ –∏ –ø—É–±–ª–∏–∫–∞—Ü–∏—è —Ä–µ–ª–∏–∑–∞

set -e  # –í—ã—Ö–æ–¥ –ø—Ä–∏ –æ—à–∏–±–∫–µ

# –¶–≤–µ—Ç–∞ –¥–ª—è –≤—ã–≤–æ–¥–∞
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
NC='\033[0m' # No Color

# –§—É–Ω–∫—Ü–∏–∏ –¥–ª—è –≤—ã–≤–æ–¥–∞
info() { echo -e "${BLUE}‚ÑπÔ∏è  $1${NC}"; }
success() { echo -e "${GREEN}‚úÖ $1${NC}"; }
warning() { echo -e "${YELLOW}‚ö†Ô∏è  $1${NC}"; }
error() { echo -e "${RED}‚ùå $1${NC}"; exit 1; }

# –ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π
check_dependencies() {
    info "–ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π..."

    command -v git >/dev/null 2>&1 || error "Git –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω"
    command -v npm >/dev/null 2>&1 || error "npm –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω"
    command -v node >/dev/null 2>&1 || error "Node.js –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω"

    # –ü—Ä–æ–≤–µ—Ä–∫–∞ VSCE (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ)
    # if ! command -v vsce >/dev/null 2>&1; then
    #     warning "VSCE –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –≥–ª–æ–±–∞–ª—å–Ω–æ. –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞—é..."
    #     npm install -g @vscode/vsce --force
    # fi

    success "–í—Å–µ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã"
}

# –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ä–∞–±–æ—á–µ–π –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏
check_working_directory() {
    info "–ü—Ä–æ–≤–µ—Ä–∫–∞ —Ä–∞–±–æ—á–µ–π –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏..."

    if [ -n "$(git status --porcelain)" ]; then
        error "–†–∞–±–æ—á–∞—è –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—è –Ω–µ —á–∏—Å—Ç–∞—è. –ó–∞–∫–æ–º–º–∏—Ç—å—Ç–µ –∏–ª–∏ —Å–ø—Ä—è—á—å—Ç–µ –∏–∑–º–µ–Ω–µ–Ω–∏—è."
    fi

    success "–†–∞–±–æ—á–∞—è –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—è —á–∏—Å—Ç–∞—è"
}

# –ü—Ä–æ–≤–µ—Ä–∫–∞ –≤–µ—Ç–∫–∏
check_branch() {
    local current_branch=$(git branch --show-current)
    info "–¢–µ–∫—É—â–∞—è –≤–µ—Ç–∫–∞: $current_branch"

    if [[ "$current_branch" != "main" && "$current_branch" != "master" ]]; then
        if [[ "$1" != "--force" ]]; then
            error "–í—ã –Ω–µ –Ω–∞ –≥–ª–∞–≤–Ω–æ–π –≤–µ—Ç–∫–µ. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ --force –¥–ª—è —Ä–µ–ª–∏–∑–∞ —Å –¥—Ä—É–≥–æ–π –≤–µ—Ç–∫–∏."
        else
            warning "–ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω—ã–π —Ä–µ–ª–∏–∑ —Å –≤–µ—Ç–∫–∏ $current_branch"
        fi
    fi
}

# –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —Ç–∏–ø–∞ —Ä–µ–ª–∏–∑–∞ –Ω–∞ –æ—Å–Ω–æ–≤–µ –∫–æ–º–º–∏—Ç–æ–≤
detect_release_type() {
    info "–ê–Ω–∞–ª–∏–∑ –∫–æ–º–º–∏—Ç–æ–≤ –¥–ª—è –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è —Ç–∏–ø–∞ —Ä–µ–ª–∏–∑–∞..."

    # –ü–æ–ª—É—á–∞–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–π —Ç–µ–≥
    local last_tag=$(git describe --tags --abbrev=0 2>/dev/null || echo "")

    if [ -z "$last_tag" ]; then
        warning "–¢–µ–≥–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã, –∏—Å–ø–æ–ª—å–∑—É–µ–º patch —Ä–µ–ª–∏–∑"
        echo "patch"
        return
    fi

    # –ü–æ–ª—É—á–∞–µ–º –∫–æ–º–º–∏—Ç—ã —Å –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ —Ç–µ–≥–∞
    local commits=$(git log ${last_tag}..HEAD --oneline)

    if [ -z "$commits" ]; then
        info "–ù–æ–≤—ã—Ö –∫–æ–º–º–∏—Ç–æ–≤ —Å –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ —Ä–µ–ª–∏–∑–∞ –Ω–µ—Ç"
        echo "patch"
        return
    fi

    info "–ö–æ–º–º–∏—Ç—ã —Å $last_tag:"
    echo "$commits"

    # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –∫–æ–º–º–∏—Ç—ã
    if echo "$commits" | grep -qE "(BREAKING CHANGE|!:|^[a-f0-9]+\s+\w+!:)"; then
        success "–û–±–Ω–∞—Ä—É–∂–µ–Ω—ã breaking changes ‚Üí MAJOR —Ä–µ–ª–∏–∑"
        echo "major"
    elif echo "$commits" | grep -qE "(feat:|feature:|add:|new:)"; then
        success "–û–±–Ω–∞—Ä—É–∂–µ–Ω—ã –Ω–æ–≤—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ ‚Üí MINOR —Ä–µ–ª–∏–∑"
        echo "minor"
    else
        success "–û–±–Ω–∞—Ä—É–∂–µ–Ω—ã –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è/—É–ª—É—á—à–µ–Ω–∏—è ‚Üí PATCH —Ä–µ–ª–∏–∑"
        echo "patch"
    fi
}

# –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–æ–≤
run_tests() {
    if [[ "$1" == "--skip-tests" ]]; then
        warning "–ü—Ä–æ–ø—É—Å–∫ —Ç–µ—Å—Ç–æ–≤"
        return
    fi

    info "–ó–∞–ø—É—Å–∫ –≤–∞–ª–∏–¥–∞—Ü–∏–∏ –∏ —Ç–µ—Å—Ç–æ–≤..."
    npm run validate:all
    success "–í—Å—è –≤–∞–ª–∏–¥–∞—Ü–∏—è –∏ —Ç–µ—Å—Ç—ã –ø—Ä–æ—à–ª–∏"
}

# –°–±–æ—Ä–∫–∞ –ø—Ä–æ–µ–∫—Ç–∞
build_project() {
    if [[ "$1" == "--skip-build" ]]; then
        warning "–ü—Ä–æ–ø—É—Å–∫ —Å–±–æ—Ä–∫–∏"
        return
    fi

    info "–°–±–æ—Ä–∫–∞ –ø—Ä–æ–µ–∫—Ç–∞..."
    npm run build
    success "–°–±–æ—Ä–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞"
}

# –ì–µ–Ω–µ—Ä–∞—Ü–∏—è .vsix –ø–∞–∫–µ—Ç–∞
generate_package() {
    info "–ì–µ–Ω–µ—Ä–∞—Ü–∏—è .vsix –ø–∞–∫–µ—Ç–∞..."
    npm run package
    success "–ü–∞–∫–µ—Ç —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω"
}

# –ü–æ–¥–Ω—è—Ç–∏–µ –≤–µ—Ä—Å–∏–∏
bump_version() {
    local release_type=$1
    local prerelease=$2

    info "–ü–æ–¥–Ω—è—Ç–∏–µ –≤–µ—Ä—Å–∏–∏ ($release_type)..."

    if [[ "$prerelease" == "--prerelease" ]]; then
        npm version $release_type --preid=beta --no-git-tag-version
    else
        npm version $release_type --no-git-tag-version
    fi

    local new_version=$(node -p "require('./package.json').version")
    success "–í–µ—Ä—Å–∏—è –ø–æ–¥–Ω—è—Ç–∞ –¥–æ $new_version"
    echo $new_version
}

# –ì–µ–Ω–µ—Ä–∞—Ü–∏—è changelog
generate_changelog() {
    info "–ì–µ–Ω–µ—Ä–∞—Ü–∏—è changelog..."

    if command -v npx >/dev/null 2>&1; then
        npx standard-version --skip.tag --skip.commit 2>/dev/null || warning "–ù–µ —É–¥–∞–ª–æ—Å—å –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å changelog"
    else
        warning "npx –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω, –ø—Ä–æ–ø—É—Å–∫ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ changelog"
    fi
}

# –ö–æ–º–º–∏—Ç –∏ —Ç–µ–≥
commit_and_tag() {
    local version=$1

    info "–°–æ–∑–¥–∞–Ω–∏–µ –∫–æ–º–º–∏—Ç–∞ –∏ —Ç–µ–≥–∞..."

    git add .
    git commit -m "chore(release): $version"
    git tag -a "v$version" -m "Release v$version"

    success "–°–æ–∑–¥–∞–Ω –∫–æ–º–º–∏—Ç –∏ —Ç–µ–≥ v$version"
}

# –ü—É—à –≤ —É–¥–∞–ª–µ–Ω–Ω—ã–π —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–π
push_to_remote() {
    info "–û—Ç–ø—Ä–∞–≤–∫–∞ –≤ —É–¥–∞–ª–µ–Ω–Ω—ã–π —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–π..."

    git push origin HEAD
    git push origin --tags

    success "–û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –≤ —É–¥–∞–ª–µ–Ω–Ω—ã–π —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–π"
}

# –ü—É–±–ª–∏–∫–∞—Ü–∏—è –≤ –º–∞—Ä–∫–µ—Ç–ø–ª–µ–π—Å
publish_to_marketplace() {
    info "–ü—Ä–æ–ø—É—Å–∫ –ø—É–±–ª–∏–∫–∞—Ü–∏–∏ –≤ VS Code Marketplace (–Ω–µ—Ç –∫–ª—é—á–∞)..."

    npm run package

    # if vsce publish; then
    #     success "–û–ø—É–±–ª–∏–∫–æ–≤–∞–Ω–æ –≤ VS Code Marketplace"
    # else
    #     error "–ù–µ —É–¥–∞–ª–æ—Å—å –æ–ø—É–±–ª–∏–∫–æ–≤–∞—Ç—å –≤ –º–∞—Ä–∫–µ—Ç–ø–ª–µ–π—Å. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ —Ç–æ–∫–µ–Ω VSCE."
    # fi

    warning "–ü—É–±–ª–∏–∫–∞—Ü–∏—è –≤ –º–∞—Ä–∫–µ—Ç–ø–ª–µ–π—Å –ø—Ä–æ–ø—É—â–µ–Ω–∞. –î–ª—è –ø—É–±–ª–∏–∫–∞—Ü–∏–∏ –Ω–∞—Å—Ç—Ä–æ–π—Ç–µ VSCE —Ç–æ–∫–µ–Ω."
}

# –°–æ–∑–¥–∞–Ω–∏–µ GitHub —Ä–µ–ª–∏–∑–∞
create_github_release() {
    local version=$1

    info "–°–æ–∑–¥–∞–Ω–∏–µ GitHub —Ä–µ–ª–∏–∑–∞..."

    if command -v gh >/dev/null 2>&1; then
        gh release create "v$version" --title "Release v$version" --generate-notes
        success "GitHub —Ä–µ–ª–∏–∑ —Å–æ–∑–¥–∞–Ω"
    else
        warning "GitHub CLI –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω"
        info "–°–æ–∑–¥–∞–π—Ç–µ —Ä–µ–ª–∏–∑ –≤—Ä—É—á–Ω—É—é: https://github.com/darqus/tokyo-night-vscode-theme-lod/releases/new?tag=v$version"
    fi
}

# –ü–æ–∫–∞–∑–∞—Ç—å —Å–ø—Ä–∞–≤–∫—É
show_help() {
    cat << EOF
üöÄ Tokyo Night Modern Release Script

–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: ./scripts/release.sh [–æ–ø—Ü–∏–∏]

–û–ø—Ü–∏–∏:
  --patch         –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω—ã–π patch —Ä–µ–ª–∏–∑ (x.x.X)
  --minor         –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω—ã–π minor —Ä–µ–ª–∏–∑ (x.X.x)
  --major         –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω—ã–π major —Ä–µ–ª–∏–∑ (X.x.x)
  --prerelease    –°–æ–∑–¥–∞—Ç—å prerelease –≤–µ—Ä—Å–∏—é
  --dry-run       –ü–æ–∫–∞–∑–∞—Ç—å —á—Ç–æ –±—É–¥–µ—Ç —Å–¥–µ–ª–∞–Ω–æ –±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π
  --skip-tests    –ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å –∑–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–æ–≤
  --skip-build    –ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å —Å–±–æ—Ä–∫—É –ø—Ä–æ–µ–∫—Ç–∞
  --force         –†–∞–∑—Ä–µ—à–∏—Ç—å —Ä–µ–ª–∏–∑ —Å –Ω–µ-–≥–ª–∞–≤–Ω–æ–π –≤–µ—Ç–∫–∏
  --help, -h      –ü–æ–∫–∞–∑–∞—Ç—å —ç—Ç—É —Å–ø—Ä–∞–≤–∫—É

–ü—Ä–∏–º–µ—Ä—ã:
  ./scripts/release.sh                    # –ê–≤—Ç–æ–æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —Ç–∏–ø–∞ —Ä–µ–ª–∏–∑–∞
  ./scripts/release.sh --minor           # –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω—ã–π minor —Ä–µ–ª–∏–∑
  ./scripts/release.sh --dry-run         # –ü—Ä–µ–¥–≤–∞—Ä–∏—Ç–µ–ª—å–Ω—ã–π –ø—Ä–æ—Å–º–æ—Ç—Ä
  ./scripts/release.sh --prerelease      # –°–æ–∑–¥–∞—Ç—å prerelease
EOF
}

# –û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è
main() {
    local start_time=$(date +%s)

    # –ü–∞—Ä—Å–∏–Ω–≥ –∞—Ä–≥—É–º–µ–Ω—Ç–æ–≤
    local release_type=""
    local dry_run=false
    local prerelease=""
    local skip_tests=""
    local skip_build=""
    local force=""

    while [[ $# -gt 0 ]]; do
        case $1 in
            --patch|--minor|--major)
                release_type="${1#--}"
                shift
                ;;
            --prerelease)
                prerelease="--prerelease"
                shift
                ;;
            --dry-run)
                dry_run=true
                shift
                ;;
            --skip-tests)
                skip_tests="--skip-tests"
                shift
                ;;
            --skip-build)
                skip_build="--skip-build"
                shift
                ;;
            --force)
                force="--force"
                shift
                ;;
            --help|-h)
                show_help
                exit 0
                ;;
            *)
                error "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ–ø—Ü–∏—è: $1"
                ;;
        esac
    done

    info "–ù–∞—á–∞–ª–æ –ø—Ä–æ—Ü–µ—Å—Å–∞ —Ä–µ–ª–∏–∑–∞..."

    # –ü—Ä–µ–¥–≤–∞—Ä–∏—Ç–µ–ª—å–Ω—ã–µ –ø—Ä–æ–≤–µ—Ä–∫–∏
    check_dependencies

    if [[ "$dry_run" != true ]]; then
        check_working_directory
        check_branch $force
    fi

    # –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —Ç–∏–ø–∞ —Ä–µ–ª–∏–∑–∞
    if [ -z "$release_type" ]; then
        release_type=$(detect_release_type)
    fi

    info "–¢–∏–ø —Ä–µ–ª–∏–∑–∞: $release_type"

    if [[ "$dry_run" == true ]]; then
        info "üîç –†–ï–ñ–ò–ú –ü–†–ï–î–í–ê–†–ò–¢–ï–õ–¨–ù–û–ì–û –ü–†–û–°–ú–û–¢–†–ê - –∏–∑–º–µ–Ω–µ–Ω–∏—è –Ω–µ –±—É–¥—É—Ç –≤–Ω–µ—Å–µ–Ω—ã"
        local current_version=$(node -p "require('./package.json').version")
        info "–¢–µ–∫—É—â–∞—è –≤–µ—Ä—Å–∏—è: $current_version"
        info "–ë—É–¥–µ—Ç —Å–æ–∑–¥–∞–Ω: $release_type —Ä–µ–ª–∏–∑"
        exit 0
    fi

    # –í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ —Ä–µ–ª–∏–∑–∞
    run_tests $skip_tests
    build_project $skip_build

    local new_version=$(bump_version $release_type $prerelease)
    generate_package

    generate_changelog
    commit_and_tag $new_version
    push_to_remote
    # publish_to_marketplace
    create_github_release $new_version

    local end_time=$(date +%s)
    local duration=$((end_time - start_time))

    success "üéâ –†–µ–ª–∏–∑ v$new_version —É—Å–ø–µ—à–Ω–æ –∑–∞–≤–µ—Ä—à–µ–Ω –∑–∞ ${duration}s!"
}

# –ó–∞–ø—É—Å–∫ —Å–∫—Ä–∏–ø—Ç–∞
main "$@"
