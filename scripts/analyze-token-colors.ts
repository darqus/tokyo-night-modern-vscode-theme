import { readFileSync } from 'node:fs'
import { join } from 'node:path'
import type { TokenColor, VSCodeTheme } from '../src/theme/types'
import { getColorDistance } from '../src/theme/utils/contrast'

const themePath = join(__dirname, '../themes/tokyo-night-color-theme.json')

const theme: VSCodeTheme = JSON.parse(readFileSync(themePath, 'utf8'))

interface TokenPair {
  token1: string
  token2: string
  color1: string
  color2: string
  distance: number
}

const colors: Array<{ name: string; color: string }> = []

// –°–æ–±–∏—Ä–∞–µ–º –≤—Å–µ —Ü–≤–µ—Ç–∞ —Ç–æ–∫–µ–Ω–æ–≤
theme.tokenColors.forEach((token: TokenColor) => {
  if (token.settings?.foreground) {
    colors.push({
      name:
        token.name ||
        (typeof token.scope === 'string' ? token.scope : token.scope[0] || ''),
      color: token.settings.foreground,
    })
  }
})

// –ù–∞—Ö–æ–¥–∏–º –ø–æ—Ö–æ–∂–∏–µ —Ü–≤–µ—Ç–∞
const similarPairs: TokenPair[] = []
const SIMILARITY_THRESHOLD = 50

for (let i = 0; i < colors.length; i++) {
  for (let j = i + 1; j < colors.length; j++) {
    const distance = getColorDistance(colors[i].color, colors[j].color)
    if (distance < SIMILARITY_THRESHOLD && distance > 0) {
      similarPairs.push({
        token1: colors[i].name,
        token2: colors[j].name,
        color1: colors[i].color,
        color2: colors[j].color,
        distance: Math.round(distance),
      })
    }
  }
}

console.log('üé® –ê–Ω–∞–ª–∏–∑ —Ü–≤–µ—Ç–æ–≤–æ–≥–æ —Ä–∞–∑–Ω–æ–æ–±—Ä–∞–∑–∏—è —Ç–æ–∫–µ–Ω–æ–≤\n')
console.log(`–í—Å–µ–≥–æ —Ç–æ–∫–µ–Ω–æ–≤ —Å —Ü–≤–µ—Ç–æ–º: ${colors.length}`)
console.log(`–£–Ω–∏–∫–∞–ª—å–Ω—ã—Ö —Ü–≤–µ—Ç–æ–≤: ${new Set(colors.map((c) => c.color)).size}\n`)

if (similarPairs.length > 0) {
  console.log(
    `‚ö†Ô∏è  –ù–∞–π–¥–µ–Ω–æ ${similarPairs.length} –ø–∞—Ä –ø–æ—Ö–æ–∂–∏—Ö —Ü–≤–µ—Ç–æ–≤ (—Ä–∞—Å—Å—Ç–æ—è–Ω–∏–µ < ${SIMILARITY_THRESHOLD}):\n`
  )

  similarPairs
    .sort((a, b) => a.distance - b.distance)
    .slice(0, 15)
    .forEach((pair) => {
      console.log(
        `  ${pair.color1} ‚Üî ${pair.color2} (—Ä–∞—Å—Å—Ç–æ—è–Ω–∏–µ: ${pair.distance})`
      )
      console.log(`    ${pair.token1}`)
      console.log(`    ${pair.token2}\n`)
    })
} else {
  console.log('‚úÖ –í—Å–µ —Ü–≤–µ—Ç–∞ –¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Ä–∞–∑–ª–∏—á–∏–º—ã')
}

// –ê–Ω–∞–ª–∏–∑ –æ—Å–Ω–æ–≤–Ω—ã—Ö –∫–∞—Ç–µ–≥–æ—Ä–∏–π
console.log('\nüìä –û—Å–Ω–æ–≤–Ω—ã–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ —Ç–æ–∫–µ–Ω–æ–≤:\n')
const categories = {
  –ü–µ—Ä–µ–º–µ–Ω–Ω—ã–µ: ['variable', 'Variable'],
  –§—É–Ω–∫—Ü–∏–∏: ['function', 'Function', 'method', 'Method'],
  '–ö–ª—é—á–µ–≤—ã–µ —Å–ª–æ–≤–∞': ['keyword', 'Keyword'],
  –°—Ç—Ä–æ–∫–∏: ['string', 'String'],
  –ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏: ['comment', 'Comment'],
  –¢–∏–ø—ã: ['type', 'Type', 'class', 'Class'],
}

Object.entries(categories).forEach(([category, keywords]) => {
  const tokens = colors.filter((c) =>
    keywords.some((k) => c.name.toLowerCase().includes(k.toLowerCase()))
  )
  const uniqueColors = new Set(tokens.map((t) => t.color))
  console.log(
    `  ${category}: ${uniqueColors.size} —Ü–≤–µ—Ç–æ–≤ –¥–ª—è ${tokens.length} —Ç–æ–∫–µ–Ω–æ–≤`
  )
})
