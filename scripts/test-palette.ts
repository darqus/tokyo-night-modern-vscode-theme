import { palette } from '../src/theme/palette'

// –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∫–ª—é—á–µ–≤—ã—Ö —Ü–≤–µ—Ç–æ–≤, –∏—Å–ø–æ–ª—å–∑—É–µ–º—ã—Ö –≤ ui.ts
const testColors = [
  'background',
  'backgroundAlt',
  'backgroundSidebar',
  'backgroundPanel',
  'borderAlt',
  'foreground',
  'foregroundAlt',
  'foregroundInactive',
  'accentBlue',
  'accentBlueAlt',
  'accentPurple',
  'accentPurpleAlt',
  'accentGreen',
  'accentYellow',
  'accentOrange',
  'accentRed',
  'accentCyan',
  'accentTeal',
  'accentPink',
  'white',
  'black',
  'gray',
  'grayLight',
  'grayDark',
  'commentDoc',
  'jsdocTag',
  'keywordAccess',
  'keywordAsync',
  'interface',
  'enum',
  'namespace',
  'typeParam',
  'builtinType',
  'comparisonOp',
  'assignOp',
  'spreadOp',
  'annotation',
  'attribute',
  'pragma',
  'mdHeading',
  'mdCode',
  'bracket',
  'delimiter',
  'deprecated',
  'variable',
  'funcParam',
  'regexp',
  'accessor',
  'selectionAlpha',
  'selectionAlphaStrong',
  'selectionAlphaLight',
  'selectionAlphaMid',
  'selectionAlphaBorder',
  'selectionAlphaBorder2',
  'selectionAlphaBorder3',
  'selectionAlphaBorder4',
  'selectionAlphaBorder5',
  'selectionAlphaBorder6',
  'selectionAlphaBorder7',
  'selectionAlphaBorder8',
  'selectionAlphaBorder9',
  'selectionAlphaBorder10',
  'selectionAlphaBorder11',
  'selectionAlphaBorder12',
  'selectionAlphaBorder13',
  'selectionAlphaBorder14',
  'selectionAlphaBorder15',
  'selectionAlphaBorder16',
  'selectionAlphaBorder17',
  'selectionAlphaBorder18',
  'selectionAlphaBorder19',
  'selectionAlphaBorder20',
  'selectionAlphaBorder21',
  'selectionAlphaBorder22',
  'selectionAlphaBorder23',
  'selectionAlphaBorder24',
  'selectionAlphaBorder25',
  'selectionAlphaBorder26',
  'selectionAlphaBorder27',
  'selectionAlphaBorder28',
  'selectionAlphaBorder29',
  'selectionAlphaBorder30',
  'selectionAlphaBorder31',
  'selectionAlphaBorder32',
  'selectionAlphaBorder33',
  'selectionAlphaBorder34',
  'selectionAlphaBorder35',
  'selectionAlphaBorder36',
  'selectionAlphaBorder37',
  'selectionAlphaBorder38',
  'selectionAlphaBorder39',
  'selectionAlphaBorder40',
  'selectionAlphaBorder41',
  'alpha1f',
  'alpha14',
  'alpha0f',
  'alpha1a',
  'alpha0d',
  'alpha33',
  'alpha66',
  'alpha99',
  'alpha80',
  'alphaB3',
  'alphaCC',
  'alpha59',
  'alpha1fFull',
  'alpha29',
  'alpha2e',
  'alpha3d',
  'alpha40',
  'alpha00',
  'alphaE6',
  'blueStrong',
  'blueHover',
  'blueSeparator',
  'blueSecondary',
  'blueBadge',
  'yellowBadge',
  'redBadge',
  'grayBadge',
  'grayMenu',
  'grayShadow',
  'grayScrollbar',
  'grayWidgetBorder',
  'grayWidgetBackground',
  'grayWidgetForeground',
  'grayWidgetTitle',
  'grayWidgetList',
  'grayWidgetFocus',
  'grayWidgetHighlight',
  'grayWidgetSelected',
  'grayWidgetIcon',
  'grayWidgetQuickInput',
  'grayWidgetQuickInputTitle',
  'grayWidgetQuickInputList',
  'grayWidgetPeekView',
  'grayWidgetPeekViewTitle',
  'grayWidgetPeekViewMatch',
  'grayWidgetPeekViewSelection',
  'grayWidgetFilterMatch',
  'grayWidgetFilterMatchBorder',
  'grayWidgetSearchMatch',
  'grayWidgetSearchMatchBorder',
  'grayWidgetFindMatch',
  'grayWidgetFindMatchBorder',
  'grayWidgetFindMatchHighlight',
  'grayWidgetFindMatchForeground',
  'grayWidgetTerminalFindMatch',
  'grayWidgetTerminalFindMatchBorder',
  'grayWidgetTerminalFindMatchHighlight',
  'grayWidgetWordHighlight',
  'grayWidgetWordHighlightStrong',
  'grayWidgetHoverHighlight',
  'grayWidgetSelectionHighlight',
  'grayWidgetSelectionHighlightBorder',
  'grayWidgetToolbarHover',
  'grayWidgetToolbarActive',
  'grayWidgetToolbarOutline',
  'grayWidgetDebugToolbar',
  'grayWidgetDebugToolbarBorder',
  'grayWidgetDebugException',
  'grayWidgetDebugExceptionBorder',
  'grayWidgetStackFrame',
  'grayWidgetStackFrameHighlight',
  'grayWidgetBreakpoint',
  'grayWidgetBreakpointDisabled',
  'grayWidgetBreakpointUnverified',
  'grayWidgetBreakpointCurrent',
  'grayWidgetBreakpointStack',
  'grayWidgetInlineChat',
  'grayWidgetInlineChatForeground',
  'grayWidgetInlineChatBorder',
  'grayWidgetInlineChatInput',
  'grayWidgetScrollbar',
  'grayWidgetScrollbarSlider',
  'grayWidgetScrollbarSliderHover',
  'grayWidgetScrollbarSliderActive',
  'grayWidgetRangeHighlight',
  'grayWidgetOverviewRulerFindMatch',
  'grayWidgetOverviewRulerSelectionHighlight',
  'grayWidgetOverviewRulerRangeHighlight',
  'editorLineNumberActive',
  'activityBarInactive',
  'terminalBrightRed',
  'terminalBrightGreen',
  'terminalBrightYellow',
  'terminalBrightMagenta',
  'grayWidgetOverviewRulerWordHighlight',
  'grayWidgetOverviewRulerWordHighlightStrong',
  'grayWidgetMinimapFindMatch',
  'grayWidgetMinimapSelectionHighlight',
  'grayWidgetEditorGroupDrop',
  'grayWidgetListDrop',
  'grayWidgetPanelSectionDrop',
  'grayWidgetTerminalDrop',
  'hoverWidgetHighlight',
]

console.log('Testing palette colors...')
let missingColors = 0

for (const colorName of testColors) {
  if (!(colorName in palette)) {
    console.log(`‚ùå Missing color: ${colorName}`)
    missingColors++
  } else if (palette[colorName] === undefined || palette[colorName] === null) {
    console.log(`‚ùå Undefined color: ${colorName}`)
    missingColors++
  } else {
    console.log(`‚úÖ ${colorName}: ${palette[colorName]}`)
  }
}

if (missingColors === 0) {
  console.log('\nüéâ All colors are present in the palette!')
} else {
  console.log(
    `\n‚ö†Ô∏è  ${missingColors} colors are missing or undefined in the palette.`
  )
}

// –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–ø–µ—Ü–∏—Ñ–∏—á–µ—Å–∫–∏—Ö –∫–æ–º–±–∏–Ω–∞—Ü–∏–π –∏–∑ ui.ts
console.log('\nTesting specific combinations from ui.ts:')
import { combineColorWithAlpha } from '../src/theme/color-utils'

const combinations = [
  {
    name: 'diffEditor.insertedTextBackground',
    value: combineColorWithAlpha(palette.accentGreen, palette.alpha1f),
  },
  {
    name: 'diffEditor.removedTextBackground',
    value: combineColorWithAlpha(palette.accentRed, palette.alpha1f),
  },
  {
    name: 'diffEditor.insertedLineBackground',
    value: combineColorWithAlpha(palette.accentGreen, palette.alpha14),
  },
  {
    name: 'diffEditor.removedLineBackground',
    value: combineColorWithAlpha(palette.accentRed, palette.alpha14),
  },
  {
    name: 'merge.currentHeaderBackground',
    value: combineColorWithAlpha(palette.accentGreen, palette.alpha1f),
  },
  {
    name: 'merge.currentContentBackground',
    value: combineColorWithAlpha(palette.accentGreen, palette.alpha0f),
  },
  {
    name: 'merge.incomingHeaderBackground',
    value: combineColorWithAlpha(palette.accentBlue, palette.alpha1f),
  },
  {
    name: 'merge.incomingContentBackground',
    value: combineColorWithAlpha(palette.accentBlue, palette.alpha0f),
  },
  {
    name: 'merge.commonHeaderBackground',
    value: combineColorWithAlpha(palette.accentYellow, palette.alpha1a),
  },
  {
    name: 'merge.commonContentBackground',
    value: combineColorWithAlpha(palette.accentYellow, palette.alpha0d),
  },
  {
    name: 'statusBarItem.activeBackground',
    value: combineColorWithAlpha(palette.accentBlue, palette.alpha33),
  },
  {
    name: 'textBlockQuote.border',
    value: combineColorWithAlpha(palette.accentBlue, palette.alpha59),
  },
  {
    name: 'tab.unfocusedActiveBackground',
    value: combineColorWithAlpha(palette.background, palette.alphaCC),
  },
  {
    name: 'tab.unfocusedActiveForeground',
    value: combineColorWithAlpha(palette.foreground, palette.alphaCC),
  },
  {
    name: 'tab.unfocusedInactiveForeground',
    value: combineColorWithAlpha(palette.foregroundAlt, palette.alpha99),
  },
  {
    name: 'terminalCommandDecoration.successBackground',
    value: combineColorWithAlpha(palette.accentGreen, palette.alpha33),
  },
  {
    name: 'terminalCommandDecoration.errorBackground',
    value: combineColorWithAlpha(palette.accentRed, palette.alpha33),
  },
]

for (const combo of combinations) {
  if (combo.value.includes('undefined') || combo.value.includes('null')) {
    console.log(`‚ùå Invalid combination: ${combo.name} = ${combo.value}`)
  } else {
    console.log(`‚úÖ ${combo.name}: ${combo.value}`)
  }
}
