#!/usr/bin/env node

/**
 * –ü—Ä–æ—Å—Ç–æ–π CLI –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Ç–µ–º–æ–π Tokyo Night Lod
 * –ë–µ–∑ –≤–Ω–µ—à–Ω–∏—Ö –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π
 */

import { ThemeConfigManager, ConfigFactory } from '../src/config/themeConfig'
import { PluginManager, PluginConfigFactory } from '../src/plugins/index'
import { ThemeValidator } from '../src/validation/themeValidator'
import { buildThemeWithConfig } from '../src/build'
import * as fs from 'node:fs'
import * as path from 'node:path'

const args = process.argv.slice(2)
const command = args[0]

function showHelp() {
  console.log(`
üé® Tokyo Night Lod CLI v0.4.0

–ö–æ–º–∞–Ω–¥—ã:
  build [config]           –°–æ–±—Ä–∞—Ç—å —Ç–µ–º—É (developer|accessibility|minimal)
  validate <file>          –í–∞–ª–∏–¥–∏—Ä–æ–≤–∞—Ç—å —Ç–µ–º—É
  plugins list            –ü–æ–∫–∞–∑–∞—Ç—å –¥–æ—Å—Ç—É–ø–Ω—ã–µ –ø–ª–∞–≥–∏–Ω—ã
  plugins enable <names>   –í–∫–ª—é—á–∏—Ç—å –ø–ª–∞–≥–∏–Ω—ã
  config create <type>     –°–æ–∑–¥–∞—Ç—å –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é
  info                    –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Ç–µ–º–µ
  help                    –ü–æ–∫–∞–∑–∞—Ç—å —ç—Ç—É —Å–ø—Ä–∞–≤–∫—É

–ü—Ä–∏–º–µ—Ä—ã:
  node scripts/cli.ts build accessibility
  node scripts/cli.ts validate ./themes/theme.json
  node scripts/cli.ts plugins list
  node scripts/cli.ts config create developer
`)
}

function buildCommand() {
  const configType = args[1] || 'developer'
  console.log(`üèóÔ∏è  –°–±–æ—Ä–∫–∞ —Ç–µ–º—ã —Å –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–µ–π: ${configType}`)

  try {
    const theme = buildThemeWithConfig(configType)
    const outputPath = path.join(
      './themes',
      `tokyo-night-${configType}-color-theme.json`
    )

    fs.writeFileSync(outputPath, JSON.stringify(theme, null, 2) + '\n', 'utf8')
    console.log(`‚úÖ –¢–µ–º–∞ —Å–æ–±—Ä–∞–Ω–∞: ${outputPath}`)
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ —Å–±–æ—Ä–∫–∏:', error)
    process.exit(1)
  }
}

function validateCommand() {
  const file = args[1]
  if (!file) {
    console.error('‚ùå –£–∫–∞–∂–∏—Ç–µ —Ñ–∞–π–ª –¥–ª—è –≤–∞–ª–∏–¥–∞—Ü–∏–∏')
    process.exit(1)
  }

  console.log(`üîç –í–∞–ª–∏–¥–∞—Ü–∏—è —Ç–µ–º—ã: ${file}`)

  try {
    const themeContent = fs.readFileSync(file, 'utf8')
    const theme = JSON.parse(themeContent)

    const validator = new ThemeValidator()
    const result = validator.validateTheme(theme)

    if (result.passed) {
      console.log('‚úÖ –¢–µ–º–∞ –ø—Ä–æ—à–ª–∞ –≤–∞–ª–∏–¥–∞—Ü–∏—é')
    } else {
      console.log('‚ùå –û–±–Ω–∞—Ä—É–∂–µ–Ω—ã –ø—Ä–æ–±–ª–µ–º—ã:')
      result.issues.forEach((issue) => {
        const icon =
          issue.severity === 'error'
            ? 'üö®'
            : issue.severity === 'warning'
            ? '‚ö†Ô∏è'
            : '‚ÑπÔ∏è'
        console.log(`${icon} [${issue.severity}] ${issue.message}`)
        if (issue.suggestion) {
          console.log(`   üí° ${issue.suggestion}`)
        }
      })

      if (result.issues.some((i) => i.severity === 'error')) {
        process.exit(1)
      }
    }
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –≤–∞–ª–∏–¥–∞—Ü–∏–∏:', error)
    process.exit(1)
  }
}

function pluginsCommand() {
  const subCommand = args[1]
  const pluginManager = new PluginManager()

  if (subCommand === 'list') {
    console.log('üì¶ –î–æ—Å—Ç—É–ø–Ω—ã–µ –ø–ª–∞–≥–∏–Ω—ã:')
    pluginManager.getAvailablePlugins().forEach((plugin) => {
      const status = pluginManager.isPluginEnabled(plugin.name) ? '‚úÖ' : '‚≠ï'
      console.log(
        `${status} ${plugin.name} v${plugin.version} - ${plugin.description}`
      )
    })
  } else if (subCommand === 'enable') {
    const plugins = args.slice(2)
    plugins.forEach((plugin) => {
      if (pluginManager.enablePlugin(plugin)) {
        console.log(`‚úÖ –ü–ª–∞–≥–∏–Ω "${plugin}" –≤–∫–ª—é—á–µ–Ω`)
      } else {
        console.error(`‚ùå –ü–ª–∞–≥–∏–Ω "${plugin}" –Ω–µ –Ω–∞–π–¥–µ–Ω`)
      }
    })
  } else {
    console.error('‚ùå –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞ –ø–ª–∞–≥–∏–Ω–æ–≤. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ: list, enable')
  }
}

function configCommand() {
  const subCommand = args[1]
  const type = args[2]

  if (subCommand === 'create' && type) {
    let config
    switch (type) {
      case 'developer':
        config = ConfigFactory.createDeveloperConfig()
        break
      case 'accessibility':
        config = ConfigFactory.createAccessibilityConfig()
        break
      case 'minimal':
        config = ConfigFactory.createMinimalConfig()
        break
      default:
        console.error(`‚ùå –ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Ç–∏–ø –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏: ${type}`)
        process.exit(1)
    }

    const outputPath = `./theme-config-${type}.json`
    fs.writeFileSync(outputPath, JSON.stringify(config, null, 2) + '\n', 'utf8')
    console.log(`‚úÖ –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è "${type}" —Å–æ–∑–¥–∞–Ω–∞: ${outputPath}`)
  } else {
    console.error('‚ùå –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: config create <type>')
  }
}

function infoCommand() {
  console.log('üé® Tokyo Night Lod - –£–ª—É—á—à–µ–Ω–Ω–∞—è –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä–∞')
  console.log('üì¶ –í–µ—Ä—Å–∏—è: 0.4.0')
  console.log('üèóÔ∏è  –ê—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä–∞: –ú–æ–¥—É–ª—å–Ω–∞—è —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π –ø–ª–∞–≥–∏–Ω–æ–≤')
  console.log('üéØ –û—Å–æ–±–µ–Ω–Ω–æ—Å—Ç–∏:')
  console.log('  - –ú–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω—ã–µ –≤–∞—Ä–∏–∞–Ω—Ç—ã —Ç–µ–º—ã')
  console.log('  - –°–∏—Å—Ç–µ–º–∞ –ø–ª–∞–≥–∏–Ω–æ–≤ –¥–ª—è —è–∑—ã–∫–æ–≤')
  console.log('  - –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è –≤–∞–ª–∏–¥–∞—Ü–∏—è')
  console.log('  - –î–∏–Ω–∞–º–∏—á–µ—Å–∫–∞—è –≥–µ–Ω–µ—Ä–∞—Ü–∏—è —Ü–≤–µ—Ç–æ–≤')
  console.log('  - –ì–∏–±–∫–∞—è –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è')
  console.log('  - WCAG 2.1 —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç—å')
}

// –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥
switch (command) {
  case 'build':
    buildCommand()
    break
  case 'validate':
    validateCommand()
    break
  case 'plugins':
    pluginsCommand()
    break
  case 'config':
    configCommand()
    break
  case 'info':
    infoCommand()
    break
  case 'help':
  case undefined:
    showHelp()
    break
  default:
    console.error(`‚ùå –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞: ${command}`)
    showHelp()
    process.exit(1)
}
