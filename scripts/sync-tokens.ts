/**
 * –°–∫—Ä–∏–ø—Ç –¥–ª—è —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏ –¥–∏–∑–∞–π–Ω-—Ç–æ–∫–µ–Ω–æ–≤ –º–µ–∂–¥—É —Ä–∞–∑–ª–∏—á–Ω—ã–º–∏ —Ñ–æ—Ä–º–∞—Ç–∞–º–∏
 *
 * –≠—Ç–æ—Ç —Å–∫—Ä–∏–ø—Ç –ø—Ä–æ–≤–µ—Ä—è–µ—Ç —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—é –º–µ–∂–¥—É –∏—Å—Ö–æ–¥–Ω—ã–º–∏ –¥–∏–∑–∞–π–Ω-—Ç–æ–∫–µ–Ω–∞–º–∏
 * –∏ –∏—Ö —ç–∫—Å–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã–º–∏ –≤–µ—Ä—Å–∏—è–º–∏ –≤ —Ä–∞–∑–ª–∏—á–Ω—ã—Ö —Ñ–æ—Ä–º–∞—Ç–∞—Ö.
 */

import { readFileSync } from 'node:fs'
import { join } from 'node:path'
import { lightThemeTokens, tokens } from '../src/theme/design-tokens'
import { tokenConverter } from '../src/theme/token-utils'
import { tokenValidation } from '../src/theme/token-validation'

interface ValidationResult {
  isValid: boolean
  errors: string[]
  warnings: string[]
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏ —Ç–æ–∫–µ–Ω–æ–≤
function checkTokenSynchronization(): ValidationResult {
  const errors: string[] = []
  const warnings: string[] = []

  // –ü–æ–ª—É—á–∞–µ–º –ø–ª–æ—Å–∫–∏–µ –≤–µ—Ä—Å–∏–∏ —Ç–æ–∫–µ–Ω–æ–≤
  const sourceDarkTokens = tokenConverter.flattenTokens(tokens)
  const sourceLightTokens = tokenConverter.flattenTokens(lightThemeTokens)

  try {
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ —ç–∫—Å–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö —Ç–æ–∫–µ–Ω–æ–≤
    const exportedDarkPath = join(__dirname, '../dist/tokens-dark.json')
    const exportedLightPath = join(__dirname, '../dist/tokens-light.json')

    const exportedDarkTokens = JSON.parse(
      readFileSync(exportedDarkPath, 'utf8')
    )
    const exportedLightTokens = JSON.parse(
      readFileSync(exportedLightPath, 'utf8')
    )

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –≤—Å–µ –∏—Å—Ö–æ–¥–Ω—ã–µ —Ç–æ–∫–µ–Ω—ã –ø—Ä–∏—Å—É—Ç—Å—Ç–≤—É—é—Ç –≤ —ç–∫—Å–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö
    for (const [path, value] of Object.entries(sourceDarkTokens)) {
      if (!(path in exportedDarkTokens)) {
        errors.push(`Dark theme token missing in exported file: ${path}`)
      } else if (exportedDarkTokens[path] !== value) {
        errors.push(
          `Dark theme token value mismatch for ${path}: source="${value}", exported="${exportedDarkTokens[path]}"`
        )
      }
    }

    for (const [path, value] of Object.entries(sourceLightTokens)) {
      if (!(path in exportedLightTokens)) {
        errors.push(`Light theme token missing in exported file: ${path}`)
      } else if (exportedLightTokens[path] !== value) {
        errors.push(
          `Light theme token value mismatch for ${path}: source="${value}", exported="${exportedLightTokens[path]}"`
        )
      }
    }

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –≤ —ç–∫—Å–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö —Ç–æ–∫–µ–Ω–∞—Ö –Ω–µ—Ç –ª–∏—à–Ω–∏—Ö —Ç–æ–∫–µ–Ω–æ–≤
    for (const path of Object.keys(exportedDarkTokens)) {
      if (!(path in sourceDarkTokens)) {
        warnings.push(`Extra token in exported dark theme: ${path}`)
      }
    }

    for (const path of Object.keys(exportedLightTokens)) {
      if (!(path in sourceLightTokens)) {
        warnings.push(`Extra token in exported light theme: ${path}`)
      }
    }
  } catch (e) {
    errors.push(`Error reading exported token files: ${(e as Error).message}`)
  }

  return {
    isValid: errors.length === 0,
    errors,
    warnings,
  }
}

// –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç—Ä—É–∫—Ç—É—Ä–Ω–æ–π —Å–æ–≥–ª–∞—Å–æ–≤–∞–Ω–Ω–æ—Å—Ç–∏ –º–µ–∂–¥—É —Ç–µ–º–∞–º–∏
function checkStructureConsistency(): ValidationResult {
  return tokenValidation.validateStructureConsistency()
}

// –û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏
function syncTokens(): ValidationResult {
  const errors: string[] = []
  const warnings: string[] = []

  // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—é
  const syncResult = checkTokenSynchronization()
  errors.push(...syncResult.errors)
  warnings.push(...syncResult.warnings)

  // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç—Ä—É–∫—Ç—É—Ä–Ω—É—é —Å–æ–≥–ª–∞—Å–æ–≤–∞–Ω–Ω–æ—Å—Ç—å
  const structureResult = checkStructureConsistency()
  errors.push(...structureResult.errors)
  warnings.push(...structureResult.warnings)

  return {
    isValid: errors.length === 0,
    errors,
    warnings,
  }
}

// –í—ã–ø–æ–ª–Ω—è–µ–º —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—é
const syncResult = syncTokens()

console.log('üîÑ Token Synchronization Check')
console.log('='.repeat(50))

if (syncResult.isValid) {
  console.log('‚úÖ All tokens are synchronized!')
} else {
  console.log('‚ùå Synchronization issues found:')
  syncResult.errors.forEach((error) => {
    console.error(`  ‚ùå ${error}`)
  })
}

if (syncResult.warnings.length > 0) {
  console.log('\n‚ö†Ô∏è Warnings:')
  syncResult.warnings.forEach((warning) => {
    console.warn(`  ‚ö†Ô∏è ${warning}`)
  })
}

console.log('='.repeat(50))

// –¢–∞–∫–∂–µ –≤—ã–ø–æ–ª–Ω–∏–º –æ–±—â—É—é –≤–∞–ª–∏–¥–∞—Ü–∏—é —Ç–æ–∫–µ–Ω–æ–≤
const validationResults = tokenValidation.runAllValidations()
if (!validationResults.isValid) {
  console.log('\nüîç Additional validation issues:')
  validationResults.errors.forEach((error) => {
    console.error(`  ‚ùå ${error}`)
  })
  validationResults.warnings.forEach((warning) => {
    console.warn(`  ‚ö†Ô∏è ${warning}`)
  })
}

// –í–æ–∑–≤—Ä–∞—â–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç –¥–ª—è –≤–æ–∑–º–æ–∂–Ω–æ–≥–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –≤ CI/CD
process.exit(syncResult.isValid && validationResults.isValid ? 0 : 1)
