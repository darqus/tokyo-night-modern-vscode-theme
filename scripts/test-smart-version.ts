#!/usr/bin/env ts-node

/**
 * –¢–µ—Å—Ç–æ–≤—ã–π —Å–∫—Ä–∏–ø—Ç –¥–ª—è –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–∏ —É–º–Ω–æ–π —Å–∏—Å—Ç–µ–º—ã –≤–µ—Ä—Å–∏–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è
 * –°–æ–∑–¥–∞–µ—Ç —Ç–µ—Å—Ç–æ–≤—ã–µ –∫–æ–º–º–∏—Ç—ã –∏ –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç –∫–∞–∫ —Ä–∞–±–æ—Ç–∞–µ—Ç –∞–Ω–∞–ª–∏–∑
 */

import { execSync } from 'child_process'
import { SmartVersionManager } from './smart-version'

interface TestScenario {
  name: string
  commits: string[]
  expectedType: 'patch' | 'minor' | 'major'
  description: string
}

const testScenarios: TestScenario[] = [
  {
    name: 'Scenario 1: Only fixes',
    commits: [
      'fix(theme): –∏—Å–ø—Ä–∞–≤–∏—Ç—å –∫–æ–Ω—Ç—Ä–∞—Å—Ç–Ω–æ—Å—Ç—å –∫–Ω–æ–ø–æ–∫',
      'fix(build): –∏—Å–ø—Ä–∞–≤–∏—Ç—å —Å–±–æ—Ä–∫—É –Ω–∞ Windows',
      'docs(readme): –æ–±–Ω–æ–≤–∏—Ç—å –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏—é –ø–æ —É—Å—Ç–∞–Ω–æ–≤–∫–µ',
    ],
    expectedType: 'patch',
    description: '–¢–æ–ª—å–∫–æ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è - –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å PATCH —Ä–µ–ª–∏–∑',
  },
  {
    name: 'Scenario 2: Features + fixes',
    commits: [
      'feat(theme): –¥–æ–±–∞–≤–∏—Ç—å –ø–æ–¥–¥–µ—Ä–∂–∫—É —Å–≤–µ—Ç–ª–æ–π —Ç–µ–º—ã',
      'feat(variants): –Ω–æ–≤—ã–π –º–∏–Ω–∏–º–∞–ª—å–Ω—ã–π –≤–∞—Ä–∏–∞–Ω—Ç',
      'fix(ui): –∏—Å–ø—Ä–∞–≤–∏—Ç—å –æ—Ç—Å—Ç—É–ø—ã –≤ –ø–∞–Ω–µ–ª–∏',
      'perf(build): —É—Å–∫–æ—Ä–∏—Ç—å —Å–±–æ—Ä–∫—É',
    ],
    expectedType: 'minor',
    description: '–ù–æ–≤—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ + –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è - –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å MINOR —Ä–µ–ª–∏–∑',
  },
  {
    name: 'Scenario 3: Breaking changes',
    commits: [
      'feat(api)!: –Ω–æ–≤—ã–π —Ñ–æ—Ä–º–∞—Ç –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏',
      'fix(theme): –∏—Å–ø—Ä–∞–≤–∏—Ç—å —Ü–≤–µ—Ç–∞',
      'refactor(build): –ø–µ—Ä–µ—Ä–∞–±–æ—Ç–∞—Ç—å —Å–∏—Å—Ç–µ–º—É',
    ],
    expectedType: 'major',
    description: 'Breaking changes - –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å MAJOR —Ä–µ–ª–∏–∑',
  },
  {
    name: 'Scenario 4: Only documentation',
    commits: [
      'docs(api): –¥–æ–±–∞–≤–∏—Ç—å –ø—Ä–∏–º–µ—Ä—ã –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è',
      'docs(readme): –æ–±–Ω–æ–≤–∏—Ç—å –æ–ø–∏—Å–∞–Ω–∏–µ',
      'style(code): —É–ª—É—á—à–∏—Ç—å —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ',
    ],
    expectedType: 'patch',
    description: '–¢–æ–ª—å–∫–æ –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏—è –∏ —Å—Ç–∏–ª–∏ - –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å PATCH —Ä–µ–ª–∏–∑',
  },
  {
    name: 'Scenario 5: Performance improvements',
    commits: [
      'perf(palette): –æ–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞—Ç—å –≥–µ–Ω–µ—Ä–∞—Ü–∏—é —Ü–≤–µ—Ç–æ–≤',
      'perf(build): —É—Å–∫–æ—Ä–∏—Ç—å –∫–æ–º–ø–∏–ª—è—Ü–∏—é TypeScript',
      'fix(memory): –∏—Å–ø—Ä–∞–≤–∏—Ç—å —É—Ç–µ—á–∫—É –ø–∞–º—è—Ç–∏',
    ],
    expectedType: 'patch',
    description: '–£–ª—É—á—à–µ–Ω–∏—è –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ - –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å PATCH —Ä–µ–ª–∏–∑',
  },
]

class SmartVersionTester {
  private smartVersion: SmartVersionManager

  constructor() {
    this.smartVersion = new SmartVersionManager()
  }

  /**
   * –ó–∞–ø—É—Å—Ç–∏—Ç—å –≤—Å–µ —Ç–µ—Å—Ç–æ–≤—ã–µ —Å—Ü–µ–Ω–∞—Ä–∏–∏
   */
  async runAllTests(): Promise<void> {
    console.log('üß™ –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–æ–≤ —É–º–Ω–æ–π —Å–∏—Å—Ç–µ–º—ã –≤–µ—Ä—Å–∏–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è\n')
    console.log('='.repeat(80))

    for (let i = 0; i < testScenarios.length; i++) {
      const scenario = testScenarios[i]
      console.log(
        `\nüìã –¢–µ—Å—Ç ${i + 1}/${testScenarios.length}: ${scenario.name}`
      )
      console.log(`üìù –û–ø–∏—Å–∞–Ω–∏–µ: ${scenario.description}`)
      console.log(`üéØ –û–∂–∏–¥–∞–µ—Ç—Å—è: ${scenario.expectedType.toUpperCase()} —Ä–µ–ª–∏–∑`)
      console.log('-'.repeat(60))

      await this.testScenario(scenario)

      if (i < testScenarios.length - 1) {
        console.log('\n' + '='.repeat(80))
      }
    }

    console.log('\n‚úÖ –í—Å–µ —Ç–µ—Å—Ç—ã –∑–∞–≤–µ—Ä—à–µ–Ω—ã!')
    this.printSummary()
  }

  /**
   * –ü—Ä–æ—Ç–µ—Å—Ç–∏—Ä–æ–≤–∞—Ç—å –æ–¥–∏–Ω —Å—Ü–µ–Ω–∞—Ä–∏–π
   */
  private async testScenario(scenario: TestScenario): Promise<void> {
    try {
      console.log('\nüìù –ö–æ–º–º–∏—Ç—ã –¥–ª—è —Ç–µ—Å—Ç–∞:')
      scenario.commits.forEach((commit, index) => {
        console.log(`   ${index + 1}. ${commit}`)
      })

      // –ò–º–∏—Ç–∏—Ä—É–µ–º –∞–Ω–∞–ª–∏–∑ –∫–æ–º–º–∏—Ç–æ–≤ —Å–æ–∑–¥–∞–≤–∞—è –≤—Ä–µ–º–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
      const mockCommits = scenario.commits
        .map((commit, index) => {
          const conventionalRegex = /^(\w+)(\(.+\))?(!)?:\s*(.+)$/
          const match = commit.match(conventionalRegex)

          if (!match) {
            return null
          }

          const [, type, scopeMatch, breakingMark, description] = match
          const scope = scopeMatch ? scopeMatch.slice(1, -1) : undefined

          return {
            hash: `abc${index.toString().padStart(4, '0')}`,
            type,
            scope,
            description,
            breaking: !!breakingMark,
          }
        })
        .filter((commit) => commit !== null)

      // –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –∫–æ–º–º–∏—Ç—ã
      const analysis = this.analyzeTestCommits(mockCommits as any[])

      console.log('\nüîç –†–µ–∑—É–ª—å—Ç–∞—Ç –∞–Ω–∞–ª–∏–∑–∞:')
      console.log(
        `   üìä –†–µ–∫–æ–º–µ–Ω–¥—É–µ–º—ã–π —Ç–∏–ø: ${analysis.recommended.toUpperCase()}`
      )
      console.log(`   üìù –í—Å–µ–≥–æ –∫–æ–º–º–∏—Ç–æ–≤: ${analysis.stats.total}`)
      console.log(`   ‚ú® Features: ${analysis.stats.features}`)
      console.log(`   üêõ Fixes: ${analysis.stats.fixes}`)
      console.log(`   üí• Breaking: ${analysis.stats.breaking}`)
      console.log(`   ‚ö° Performance: ${analysis.stats.performance}`)

      // –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ–∂–∏–¥–∞–Ω–∏—è
      const isCorrect = analysis.recommended === scenario.expectedType
      console.log(
        `\n${isCorrect ? '‚úÖ' : '‚ùå'} –¢–µ—Å—Ç ${
          isCorrect ? '–ü–†–û–®–ï–õ' : '–ù–ï –ü–†–û–®–ï–õ'
        }`
      )

      if (!isCorrect) {
        console.log(`   ‚ùå –û–∂–∏–¥–∞–ª—Å—è: ${scenario.expectedType.toUpperCase()}`)
        console.log(`   ‚ùå –ü–æ–ª—É—á–µ–Ω: ${analysis.recommended.toUpperCase()}`)
      }

      // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∫—Ä–∞—Ç–∫–æ–µ —Å–æ–¥–µ—Ä–∂–∞–Ω–∏–µ
      if (analysis.summary.length > 0) {
        console.log('\nüìã –ö—Ä–∞—Ç–∫–æ–µ —Å–æ–¥–µ—Ä–∂–∞–Ω–∏–µ:')
        analysis.summary
          .slice(0, 5)
          .forEach((item: string) => console.log(item))
      }
    } catch (error) {
      console.error(`‚ùå –û—à–∏–±–∫–∞ –≤ —Ç–µ—Å—Ç–µ: ${error}`)
    }
  }

  /**
   * –ê–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å —Ç–µ—Å—Ç–æ–≤—ã–µ –∫–æ–º–º–∏—Ç—ã (—É–ø—Ä–æ—â–µ–Ω–Ω–∞—è –≤–µ—Ä—Å–∏—è)
   */
  private analyzeTestCommits(commits: any[]): any {
    const stats = {
      total: commits.length,
      features: 0,
      fixes: 0,
      breaking: 0,
      performance: 0,
      others: 0,
    }

    const summary: string[] = []
    let hasFeatures = false
    let hasBreaking = false

    for (const commit of commits) {
      switch (commit.type) {
        case 'feat':
          stats.features++
          hasFeatures = true
          summary.push(`   ‚Ä¢ ‚ú® ${commit.description}`)
          break
        case 'fix':
          stats.fixes++
          summary.push(`   ‚Ä¢ üêõ ${commit.description}`)
          break
        case 'perf':
          stats.performance++
          summary.push(`   ‚Ä¢ ‚ö° ${commit.description}`)
          break
        case 'docs':
          stats.others++
          summary.push(`   ‚Ä¢ üìö ${commit.description}`)
          break
        default:
          stats.others++
          summary.push(`   ‚Ä¢ üìù ${commit.description}`)
      }

      if (commit.breaking) {
        stats.breaking++
        hasBreaking = true
      }
    }

    // –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ä–µ–∫–æ–º–µ–Ω–¥—É–µ–º—ã–π —Ç–∏–ø —Ä–µ–ª–∏–∑–∞
    let recommended: 'patch' | 'minor' | 'major' = 'patch'

    if (hasBreaking) {
      recommended = 'major'
    } else if (hasFeatures) {
      recommended = 'minor'
    } else if (stats.fixes > 0 || stats.performance > 0) {
      recommended = 'patch'
    }

    return {
      recommended,
      commits,
      stats,
      summary,
      hasBreaking,
    }
  }

  /**
   * –ü–æ–∫–∞–∑–∞—Ç—å –∏—Ç–æ–≥–æ–≤—É—é —Å–≤–æ–¥–∫—É
   */
  private printSummary(): void {
    console.log('\nüìä –ò—Ç–æ–≥–æ–≤–∞—è —Å–≤–æ–¥–∫–∞:')
    console.log('   üß™ –¢–µ—Å—Ç–æ–≤—ã–µ —Å—Ü–µ–Ω–∞—Ä–∏–∏ –ø–æ–∫–∞–∑—ã–≤–∞—é—Ç —Ä–∞–±–æ—Ç—É –ª–æ–≥–∏–∫–∏ –∞–Ω–∞–ª–∏–∑–∞')
    console.log('   ‚úÖ –°–∏—Å—Ç–µ–º–∞ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ –æ–ø—Ä–µ–¥–µ–ª—è–µ—Ç —Ç–∏–ø—ã —Ä–µ–ª–∏–∑–æ–≤')
    console.log('   üìà –ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç: MAJOR > MINOR > PATCH')
    console.log('   üí° Breaking changes –≤—Å–µ–≥–¥–∞ –ø—Ä–∏–≤–æ–¥—è—Ç –∫ MAJOR')
    console.log('   ‚ö° Features –±–µ–∑ breaking changes –¥–∞—é—Ç MINOR')
    console.log('   üêõ –¢–æ–ª—å–∫–æ fixes/perf –¥–∞—é—Ç PATCH')

    console.log('\nüöÄ –î–ª—è —Ä–µ–∞–ª—å–Ω–æ–≥–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è:')
    console.log('   npm run release              # –£–º–Ω—ã–π —Ä–µ–ª–∏–∑')
    console.log('   npm run version:analyze      # –¢–æ–ª—å–∫–æ –∞–Ω–∞–ª–∏–∑')
    console.log('   npm run release:dry          # –ü—Ä–µ–¥–≤–∞—Ä–∏—Ç–µ–ª—å–Ω—ã–π –ø—Ä–æ—Å–º–æ—Ç—Ä')
  }

  /**
   * –î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–æ–Ω–Ω—ã–π —Ä–µ–∂–∏–º —Å –∏–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å—é
   */
  async interactiveDemo(): Promise<void> {
    console.log('üéÆ –ò–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω–∞—è –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è —É–º–Ω–æ–π —Å–∏—Å—Ç–µ–º—ã –≤–µ—Ä—Å–∏–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è\n')

    // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ä–µ–∞–ª—å–Ω—ã–π –∞–Ω–∞–ª–∏–∑ —Ç–µ–∫—É—â–∏—Ö –∫–æ–º–º–∏—Ç–æ–≤
    console.log('üìä –ê–Ω–∞–ª–∏–∑ —Ä–µ–∞–ª—å–Ω—ã—Ö –∫–æ–º–º–∏—Ç–æ–≤ –≤ —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–∏:')
    console.log('-'.repeat(50))

    try {
      const analysis = await this.smartVersion.analyzeCommits({
        verbose: true,
        force: true, // –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º git —Å—Ç–∞—Ç—É—Å –¥–ª—è –¥–µ–º–æ
      })

      console.log('\nüéØ –≠—Ç–æ—Ç –∞–Ω–∞–ª–∏–∑ –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Ä–µ–∞–ª—å–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø—Ä–æ–µ–∫—Ç–∞')
      console.log('üìà –°–∏—Å—Ç–µ–º–∞ –≥–æ—Ç–æ–≤–∞ –∫ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—é!')
    } catch (error) {
      console.log('‚ÑπÔ∏è  –†–µ–∞–ª—å–Ω—ã–π –∞–Ω–∞–ª–∏–∑ –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω (–Ω–µ—Ç git –∏—Å—Ç–æ—Ä–∏–∏ –∏–ª–∏ —Ç–µ–≥–æ–≤)')
      console.log('üß™ –ó–∞–ø—É—Å–∫–∞–µ–º —Ç–µ—Å—Ç–æ–≤—ã–µ —Å—Ü–µ–Ω–∞—Ä–∏–∏ –≤–º–µ—Å—Ç–æ —ç—Ç–æ–≥–æ...\n')
      await this.runAllTests()
    }
  }
}

// CLI –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å
async function main() {
  const args = process.argv.slice(2)
  const tester = new SmartVersionTester()

  if (args.includes('--help') || args.includes('-h')) {
    console.log(`
üß™ –¢–µ—Å—Ç–µ—Ä —É–º–Ω–æ–π —Å–∏—Å—Ç–µ–º—ã –≤–µ—Ä—Å–∏–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è

–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ:
  npm run test:version              # –ó–∞–ø—É—Å—Ç–∏—Ç—å –≤—Å–µ —Ç–µ—Å—Ç—ã
  npm run test:version -- --demo    # –ò–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω–∞—è –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è
  npm run test:version -- --help    # –ü–æ–∫–∞–∑–∞—Ç—å —Å–ø—Ä–∞–≤–∫—É

–û–ø–∏—Å–∞–Ω–∏–µ:
  –≠—Ç–æ—Ç —Å–∫—Ä–∏–ø—Ç —Ç–µ—Å—Ç–∏—Ä—É–µ—Ç –ª–æ–≥–∏–∫—É —É–º–Ω–æ–π —Å–∏—Å—Ç–µ–º—ã –≤–µ—Ä—Å–∏–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è
  –Ω–∞ —Ä–∞–∑–ª–∏—á–Ω—ã—Ö —Å—Ü–µ–Ω–∞—Ä–∏—è—Ö –∫–æ–º–º–∏—Ç–æ–≤, –ø–æ–∫–∞–∑—ã–≤–∞—è –∫–∞–∫ –æ–ø—Ä–µ–¥–µ–ª—è–µ—Ç—Å—è
  —Ç–∏–ø —Ä–µ–ª–∏–∑–∞ (patch/minor/major) –Ω–∞ –æ—Å–Ω–æ–≤–µ conventional commits.

–ü—Ä–∏–º–µ—Ä—ã:
  test:version                      # –í—Å–µ —Ç–µ—Å—Ç–æ–≤—ã–µ —Å—Ü–µ–Ω–∞—Ä–∏–∏
  test:version -- --demo            # –î–µ–º–æ —Å —Ä–µ–∞–ª—å–Ω—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏
`)
    return
  }

  if (args.includes('--demo')) {
    await tester.interactiveDemo()
  } else {
    await tester.runAllTests()
  }
}

if (require.main === module) {
  main().catch(console.error)
}

export { SmartVersionTester }
