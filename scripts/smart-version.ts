#!/usr/bin/env ts-node

/**
 * Smart Automatic Versioning System
 * Analyzes conventional commits and determines the correct version type
 */

import { execSync } from 'child_process'
import { readFileSync } from 'fs'
import { join } from 'path'

interface CommitInfo {
  hash: string
  type: string
  scope?: string
  description: string
  body?: string
  footer?: string
  breaking: boolean
}

interface VersionAnalysis {
  recommended: 'patch' | 'minor' | 'major'
  commits: CommitInfo[]
  stats: {
    total: number
    features: number
    fixes: number
    breaking: number
    performance: number
    others: number
  }
  summary: string[]
  hasBreaking: boolean
}

interface SmartVersionOptions {
  dryRun?: boolean
  force?: boolean
  verbose?: boolean
  since?: string
  patch?: boolean
  minor?: boolean
  major?: boolean
}

class SmartVersionManager {
  private packagePath: string

  constructor() {
    this.packagePath = join(process.cwd(), 'package.json')
  }

  /**
   * –ê–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å –∫–æ–º–º–∏—Ç—ã –∏ –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å —Ç–∏–ø –≤–µ—Ä—Å–∏–∏
   */
  async analyzeCommits(
    options: SmartVersionOptions = {}
  ): Promise<VersionAnalysis> {
    console.log('üîç Analyzing commits to determine version...\n')

    const commits = this.getCommitsSinceLastRelease(options.since)
    const analysis = this.analyzeCommitTypes(commits)

    if (options.verbose) {
      this.printDetailedAnalysis(analysis)
    } else {
      this.printAnalysisSummary(analysis)
    }

    return analysis
  }

  /**
   * –í—ã–ø–æ–ª–Ω–∏—Ç—å —É–º–Ω—ã–π —Ä–µ–ª–∏–∑
   */
  async smartRelease(options: SmartVersionOptions = {}): Promise<void> {
    try {
      console.log('ü§ñ Starting smart release system...\n')

      if (!options.force) {
        this.checkGitStatus()
      }

      // Determine release type
      let releaseType: 'patch' | 'minor' | 'major'

      if (options.patch) {
        releaseType = 'patch'
      } else if (options.minor) {
        releaseType = 'minor'
      } else if (options.major) {
        releaseType = 'major'
      } else {
        // Smart analysis mode
        const analysis = await this.analyzeCommits(options)

        if (analysis.commits.length === 0) {
          console.log('‚ÑπÔ∏è  No commits for release since last version')
          return
        }

        releaseType = analysis.recommended
      }

      const currentVersion = this.getCurrentVersion()
      const nextVersion = this.calculateNextVersion(currentVersion, releaseType)

      console.log(`\nüìä Release Information:`)
      console.log(`   üè∑Ô∏è  Current version: ${currentVersion}`)
      console.log(`   üè∑Ô∏è  New version: ${nextVersion}`)
      console.log(`   üìà Release type: ${releaseType.toUpperCase()}`)

      if (options.dryRun) {
        console.log('\nüß™ Preview mode - changes not applied')
        return
      }

      // –í—ã–ø–æ–ª–Ω—è–µ–º —Ä–µ–ª–∏–∑
      await this.executeRelease(releaseType, options)

      console.log('\n‚úÖ Smart release successfully completed!')
      this.printNextSteps(nextVersion)
    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ —É–º–Ω–æ–≥–æ —Ä–µ–ª–∏–∑–∞:', error)
      process.exit(1)
    }
  }

  /**
   * –ü–æ–ª—É—á–∏—Ç—å –∫–æ–º–º–∏—Ç—ã —Å –ø–æ—Å–ª–µ–¥–Ω–µ–π –≤–µ—Ä—Å–∏–∏
   */
  private getCommitsSinceLastRelease(since?: string): CommitInfo[] {
    try {
      // –û–ø—Ä–µ–¥–µ–ª—è–µ–º –¥–∏–∞–ø–∞–∑–æ–Ω –∫–æ–º–º–∏—Ç–æ–≤
      let range = since || this.getLastReleaseTag()
      if (!range) {
        range = '--all' // –ï—Å–ª–∏ —Ç–µ–≥–æ–≤ –Ω–µ—Ç, –±–µ—Ä–µ–º –≤—Å–µ –∫–æ–º–º–∏—Ç—ã
      } else {
        range = `${range}..HEAD`
      }

      const command = `git log ${range} --pretty=format:"%H|%s|%b" --no-merges`
      const output = execSync(command, { encoding: 'utf8', stdio: 'pipe' })

      if (!output.trim()) {
        return []
      }

      return output
        .trim()
        .split('\n')
        .filter((line) => line.trim())
        .map((line) => this.parseCommit(line))
        .filter((commit) => commit !== null) as CommitInfo[]
    } catch (error) {
      console.warn(`‚ö†Ô∏è  –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –∫–æ–º–º–∏—Ç—ã: ${error}`)
      return []
    }
  }

  /**
   * –ü–æ–ª—É—á–∏—Ç—å —Ç–µ–≥ –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ —Ä–µ–ª–∏–∑–∞
   */
  private getLastReleaseTag(): string | null {
    try {
      const output = execSync('git describe --tags --abbrev=0', {
        encoding: 'utf8',
        stdio: 'pipe',
      })
      return output.trim()
    } catch (error) {
      return null // –ù–µ—Ç —Ç–µ–≥–æ–≤
    }
  }

  /**
   * –ü–∞—Ä—Å–∏—Ç—å conventional commit
   */
  private parseCommit(line: string): CommitInfo | null {
    const parts = line.split('|')
    if (parts.length < 2) {
      return null
    }

    const [hash, subject, body = ''] = parts

    if (!subject) {
      return null
    }

    // –ü–∞—Ä—Å–∏–º conventional commit —Ñ–æ—Ä–º–∞—Ç
    const conventionalRegex = /^(\w+)(\(.+\))?(!)?:\s*(.+)$/
    const match = subject.match(conventionalRegex)

    if (!match) {
      // –ï—Å–ª–∏ –Ω–µ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É–µ—Ç conventional commits, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º
      return null
    }

    const [, type, scopeMatch, breakingMark, description] = match
    const scope = scopeMatch ? scopeMatch.slice(1, -1) : undefined

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞ breaking changes
    const breaking = !!(
      breakingMark ||
      body.includes('BREAKING CHANGE:') ||
      body.includes('BREAKING-CHANGE:')
    )

    return {
      hash: hash.substring(0, 7),
      type,
      scope,
      description,
      body: body.trim() || undefined,
      breaking,
    }
  }

  /**
   * –ê–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å —Ç–∏–ø—ã –∫–æ–º–º–∏—Ç–æ–≤
   */
  private analyzeCommitTypes(commits: CommitInfo[]): VersionAnalysis {
    const stats = {
      total: commits.length,
      features: 0,
      fixes: 0,
      breaking: 0,
      performance: 0,
      others: 0,
    }

    const summary: string[] = []
    let hasFeatures = false
    let hasBreaking = false

    for (const commit of commits) {
      // –ü–æ–¥—Å—á–µ—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
      switch (commit.type) {
        case 'feat':
          stats.features++
          hasFeatures = true
          summary.push(`   ‚Ä¢ ‚ú® ${commit.description}`)
          break
        case 'fix':
          stats.fixes++
          summary.push(`   ‚Ä¢ üêõ ${commit.description}`)
          break
        case 'perf':
          stats.performance++
          summary.push(`   ‚Ä¢ ‚ö° ${commit.description}`)
          break
        case 'docs':
          stats.others++
          summary.push(`   ‚Ä¢ üìö ${commit.description}`)
          break
        case 'style':
          stats.others++
          summary.push(`   ‚Ä¢ üíÑ ${commit.description}`)
          break
        case 'refactor':
          stats.others++
          summary.push(`   ‚Ä¢ ‚ôªÔ∏è  ${commit.description}`)
          break
        case 'test':
          stats.others++
          summary.push(`   ‚Ä¢ üß™ ${commit.description}`)
          break
        case 'build':
          stats.others++
          summary.push(`   ‚Ä¢ üèóÔ∏è  ${commit.description}`)
          break
        case 'ci':
          stats.others++
          summary.push(`   ‚Ä¢ üë∑ ${commit.description}`)
          break
        case 'chore':
          stats.others++
          summary.push(`   ‚Ä¢ üîß ${commit.description}`)
          break
        default:
          stats.others++
          summary.push(`   ‚Ä¢ üìù ${commit.description}`)
      }

      if (commit.breaking) {
        stats.breaking++
        hasBreaking = true
      }
    }

    // –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ä–µ–∫–æ–º–µ–Ω–¥—É–µ–º—ã–π —Ç–∏–ø —Ä–µ–ª–∏–∑–∞
    let recommended: 'patch' | 'minor' | 'major' = 'patch'

    if (hasBreaking) {
      recommended = 'major'
    } else if (hasFeatures) {
      recommended = 'minor'
    } else if (stats.fixes > 0 || stats.performance > 0) {
      recommended = 'patch'
    }

    return {
      recommended,
      commits,
      stats,
      summary,
      hasBreaking,
    }
  }

  /**
   * –ù–∞–ø–µ—á–∞—Ç–∞—Ç—å –∫—Ä–∞—Ç–∫–∏–π –∞–Ω–∞–ª–∏–∑
   */
  private printAnalysisSummary(analysis: VersionAnalysis): void {
    console.log('üîç Commit analysis completed:')
    console.log(`   üìù Commits analyzed: ${analysis.stats.total}`)
    console.log(`   ‚ú® Features: ${analysis.stats.features > 0 ? '‚úÖ' : '‚ùå'}`)
    console.log(`   üêõ Fixes: ${analysis.stats.fixes > 0 ? '‚úÖ' : '‚ùå'}`)
    console.log(`   üí• Breaking: ${analysis.stats.breaking > 0 ? '‚úÖ' : '‚ùå'}`)
    console.log(
      `   ‚ö° Performance: ${analysis.stats.performance > 0 ? '‚úÖ' : '‚ùå'}`
    )

    console.log(
      `\nüìà Recommended release type: ${analysis.recommended.toUpperCase()}`
    )

    if (analysis.summary.length > 0) {
      console.log('\nüìã Summary of changes:')
      analysis.summary.slice(0, 10).forEach((item) => console.log(item))
      if (analysis.summary.length > 10) {
        console.log(`   ... and ${analysis.summary.length - 10} more changes`)
      }
    }

    const currentVersion = this.getCurrentVersion()
    const nextVersion = this.calculateNextVersion(
      currentVersion,
      analysis.recommended
    )
    console.log(`\nüìä Version: ${currentVersion} ‚Üí ${nextVersion}`)
  }

  /**
   * –ù–∞–ø–µ—á–∞—Ç–∞—Ç—å –¥–µ—Ç–∞–ª—å–Ω—ã–π –∞–Ω–∞–ª–∏–∑
   */
  private printDetailedAnalysis(analysis: VersionAnalysis): void {
    console.log('üìä Detailed commit statistics:')
    console.log(`   Total commits: ${analysis.stats.total}`)
    console.log(`   Features: ${analysis.stats.features}`)
    console.log(`   Bug fixes: ${analysis.stats.fixes}`)
    console.log(`   Breaking changes: ${analysis.stats.breaking}`)
    console.log(`   Others: ${analysis.stats.others}`)

    console.log('\nüìù All commits:')
    analysis.commits.forEach((commit) => {
      const breaking = commit.breaking ? ' üí•' : ''
      const scope = commit.scope ? `(${commit.scope})` : ''
      console.log(
        `   ${commit.hash} ${commit.type}${scope}: ${commit.description}${breaking}`
      )
    })

    this.printAnalysisSummary(analysis)
  }

  /**
   * –ü–æ–ª—É—á–∏—Ç—å —Ç–µ–∫—É—â—É—é –≤–µ—Ä—Å–∏—é
   */
  private getCurrentVersion(): string {
    const pkg = JSON.parse(readFileSync(this.packagePath, 'utf8'))
    return pkg.version
  }

  /**
   * –í—ã—á–∏—Å–ª–∏—Ç—å —Å–ª–µ–¥—É—é—â—É—é –≤–µ—Ä—Å–∏—é
   */
  private calculateNextVersion(
    current: string,
    type: 'patch' | 'minor' | 'major'
  ): string {
    const [major, minor, patch] = current.split('.').map(Number)

    switch (type) {
      case 'major':
        return `${major + 1}.0.0`
      case 'minor':
        return `${major}.${minor + 1}.0`
      case 'patch':
        return `${major}.${minor}.${patch + 1}`
      default:
        return current
    }
  }

  /**
   * –ü—Ä–æ–≤–µ—Ä–∏—Ç—å —Å—Ç–∞—Ç—É—Å git
   */
  private checkGitStatus(): void {
    try {
      const status = execSync('git status --porcelain', { encoding: 'utf8' })
      if (status.trim()) {
        console.warn('‚ö†Ô∏è  –ï—Å—Ç—å –Ω–µ–∑–∞–∫–æ–º–º–∏—á–µ–Ω–Ω—ã–µ –∏–∑–º–µ–Ω–µ–Ω–∏—è:')
        console.log(status)
        throw new Error('–ó–∞–∫–æ–º–º–∏—Ç—å—Ç–µ –∏–ª–∏ –æ—Ç–º–µ–Ω–∏—Ç–µ –∏–∑–º–µ–Ω–µ–Ω–∏—è –ø–µ—Ä–µ–¥ —Ä–µ–ª–∏–∑–æ–º')
      }
    } catch (error) {
      throw new Error(`–û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ git —Å—Ç–∞—Ç—É—Å–∞: ${error}`)
    }
  }

  /**
   * –í—ã–ø–æ–ª–Ω–∏—Ç—å —Ä–µ–ª–∏–∑
   */
  private async executeRelease(
    type: string,
    options: SmartVersionOptions
  ): Promise<void> {
    console.log('\nüèóÔ∏è  Executing release...')

    // –ó–∞–ø—É—Å–∫–∞–µ–º —Ç–µ—Å—Ç—ã
    console.log('üß™ Running tests...')
    try {
      execSync('npm run test', { stdio: 'inherit' })
    } catch (error) {
      throw new Error('–¢–µ—Å—Ç—ã –Ω–µ –ø—Ä–æ—à–ª–∏')
    }

    // –°–æ–±–∏—Ä–∞–µ–º –ø—Ä–æ–µ–∫—Ç
    console.log('üèóÔ∏è  Building project...')
    try {
      execSync('npm run build', { stdio: 'inherit' })
    } catch (error) {
      throw new Error('–û—à–∏–±–∫–∞ —Å–±–æ—Ä–∫–∏ –ø—Ä–æ–µ–∫—Ç–∞')
    }

    // –°–æ–∑–¥–∞–µ–º —Ä–µ–ª–∏–∑ —Å standard-version
    console.log(`üì¶ Creating ${type} release...`)
    try {
      const command = `npx standard-version --release-as ${type}`
      execSync(command, { stdio: 'inherit' })
    } catch (error) {
      throw new Error(`–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è —Ä–µ–ª–∏–∑–∞: ${error}`)
    }

    // –ü—É–±–ª–∏–∫—É–µ–º —Ç–µ–≥–∏
    console.log('üì§ Pushing tags...')
    try {
      execSync('git push --follow-tags origin main', { stdio: 'inherit' })
    } catch (error) {
      throw new Error('–û—à–∏–±–∫–∞ –ø—É–±–ª–∏–∫–∞—Ü–∏–∏ —Ç–µ–≥–æ–≤')
    }

    // –°–æ–∑–¥–∞–µ–º –ø–∞–∫–µ—Ç
    console.log('üì¶ Creating VSIX package...')
    try {
      execSync('npm run package', { stdio: 'inherit' })
    } catch (error) {
      throw new Error('–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –ø–∞–∫–µ—Ç–∞')
    }

    // –°–æ–∑–¥–∞–µ–º —Ä–µ–ª–∏–∑ –Ω–∞ GitHub
    console.log('üöÄ Creating GitHub release...')
    try {
      const latestTag = execSync('git describe --tags --abbrev=0', {
        encoding: 'utf8',
      }).trim()
      execSync(`gh release create ${latestTag} --generate-notes`, {
        stdio: 'inherit',
      })
    } catch (error) {
      throw new Error('–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è —Ä–µ–ª–∏–∑–∞ –Ω–∞ GitHub')
    }
  }

  /**
   * –ü–æ–∫–∞–∑–∞—Ç—å —Å–ª–µ–¥—É—é—â–∏–µ —à–∞–≥–∏
   */
  private printNextSteps(version: string): void {
    console.log('\nüìã Next steps:')
    console.log('1. Publish package: npm run publish')
    console.log(
      `üéâ New version ${version} is released and available on GitHub!`
    )
  }
}

// CLI –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å
async function main() {
  const args = process.argv.slice(2)
  const smartVersion = new SmartVersionManager()

  if (args.includes('--help') || args.includes('-h')) {
    console.log(`
ü§ñ Tokyo Night Lod Smart Version Manager

–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ:
  npm run version:smart              # –£–º–Ω—ã–π —Ä–µ–ª–∏–∑ (–∞–Ω–∞–ª–∏–∑ + –≤—ã–ø—É—Å–∫)
  npm run version:analyze            # –¢–æ–ª—å–∫–æ –∞–Ω–∞–ª–∏–∑ –∫–æ–º–º–∏—Ç–æ–≤
  npm run version:smart --dry-run    # –ü—Ä–µ–¥–≤–∞—Ä–∏—Ç–µ–ª—å–Ω—ã–π –ø—Ä–æ—Å–º–æ—Ç—Ä

–û–ø—Ü–∏–∏:
  --dry-run                          # –ü–æ–∫–∞–∑–∞—Ç—å —á—Ç–æ –±—É–¥–µ—Ç —Å–¥–µ–ª–∞–Ω–æ
  --force                            # –ò–≥–Ω–æ—Ä–∏—Ä–æ–≤–∞—Ç—å git –ø—Ä–æ–≤–µ—Ä–∫–∏
  --verbose                          # –î–µ—Ç–∞–ª—å–Ω—ã–π –≤—ã–≤–æ–¥ –∞–Ω–∞–ª–∏–∑–∞
  --since <tag>                      # –ê–Ω–∞–ª–∏–∑ —Å –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω–æ–≥–æ —Ç–µ–≥–∞
  --patch                            # –Ø–≤–Ω–æ —É–∫–∞–∑–∞—Ç—å patch –≤–µ—Ä—Å–∏—é
  --minor                            # –Ø–≤–Ω–æ —É–∫–∞–∑–∞—Ç—å minor –≤–µ—Ä—Å–∏—é
  --major                            # –Ø–≤–Ω–æ —É–∫–∞–∑–∞—Ç—å major –≤–µ—Ä—Å–∏—é
  --help, -h                         # –ü–æ–∫–∞–∑–∞—Ç—å —ç—Ç—É —Å–ø—Ä–∞–≤–∫—É

–ü—Ä–∏–º–µ—Ä—ã:
  npm run version:smart              # –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–π —Ä–µ–ª–∏–∑
  npm run version:analyze            # –¢–æ–ª—å–∫–æ –∞–Ω–∞–ª–∏–∑
  npm run version:smart -- --verbose # –î–µ—Ç–∞–ª—å–Ω—ã–π –∞–Ω–∞–ª–∏–∑ + —Ä–µ–ª–∏–∑
  npm run version:smart -- --since v1.0.0  # –ê–Ω–∞–ª–∏–∑ —Å –≤–µ—Ä—Å–∏–∏ 1.0.0
  npm run version:smart -- --patch   # –Ø–≤–Ω–æ —É–∫–∞–∑–∞—Ç—å patch –≤–µ—Ä—Å–∏—é
  npm run version:smart -- --minor   # –Ø–≤–Ω–æ —É–∫–∞–∑–∞—Ç—å minor –≤–µ—Ä—Å–∏—é
  npm run version:smart -- --major   # –Ø–≤–Ω–æ —É–∫–∞–∑–∞—Ç—å major –≤–µ—Ä—Å–∏—é

–õ–æ–≥–∏–∫–∞ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è –≤–µ—Ä—Å–∏–π:
  - MAJOR: –µ—Å–ª–∏ –µ—Å—Ç—å breaking changes (feat!: –∏–ª–∏ BREAKING CHANGE:)
  - MINOR: –µ—Å–ª–∏ –µ—Å—Ç—å –Ω–æ–≤—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ (feat:)
  - PATCH: –µ—Å–ª–∏ –µ—Å—Ç—å —Ç–æ–ª—å–∫–æ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è (fix:, perf:)
`)
    return
  }

  const options: SmartVersionOptions = {
    dryRun: args.includes('--dry-run'),
    force: args.includes('--force'),
    verbose: args.includes('--verbose'),
    since: args.includes('--since')
      ? args[args.indexOf('--since') + 1]
      : undefined,
    patch: args.includes('--patch'),
    minor: args.includes('--minor'),
    major: args.includes('--major'),
  }

  // –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ä–µ–∂–∏–º —Ä–∞–±–æ—Ç—ã
  const scriptName = process.env.npm_lifecycle_event

  if (scriptName === 'version:analyze' || args.includes('--analyze-only')) {
    await smartVersion.analyzeCommits(options)
  } else {
    await smartVersion.smartRelease(options)
  }
}

if (require.main === module) {
  main().catch(console.error)
}

export { SmartVersionManager }