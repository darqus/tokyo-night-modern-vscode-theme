#!/usr/bin/env ts-node

/**
 * –°–∫—Ä–∏–ø—Ç –∞–≤—Ç–æ–º–∞—Ç–∏–∑–∞—Ü–∏–∏ —Ä–µ–ª–∏–∑–æ–≤ Tokyo Night Lod
 * –û–±–µ—Å–ø–µ—á–∏–≤–∞–µ—Ç –ø—Ä–∞–≤–∏–ª—å–Ω–æ–µ —Å–µ–º–∞–Ω—Ç–∏—á–µ—Å–∫–æ–µ –≤–µ—Ä—Å–∏–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ
 */

import { execSync } from 'child_process'
import { readFileSync, writeFileSync } from 'fs'
import { join } from 'path'

interface ReleaseOptions {
  type?: 'patch' | 'minor' | 'major' | 'prerelease'
  prerelease?: string
  dryRun?: boolean
  firstRelease?: boolean
}

class ReleaseManager {
  private packagePath: string
  private changelogPath: string

  constructor() {
    this.packagePath = join(process.cwd(), 'package.json')
    this.changelogPath = join(process.cwd(), 'CHANGELOG.md')
  }

  /**
   * –í—ã–ø–æ–ª–Ω–∏—Ç—å —Ä–µ–ª–∏–∑
   */
  async release(options: ReleaseOptions = {}): Promise<void> {
    try {
      console.log('üöÄ –ù–∞—á–∏–Ω–∞–µ–º –ø—Ä–æ—Ü–µ—Å—Å —Ä–µ–ª–∏–∑–∞...')

      // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ git
      this.checkGitStatus()

      // –ó–∞–ø—É—Å–∫–∞–µ–º —Ç–µ—Å—Ç—ã
      if (!options.dryRun) {
        console.log('üß™ –ó–∞–ø—É—Å–∫–∞–µ–º —Ç–µ—Å—Ç—ã...')
        this.runTests()
      }

      // –°–æ–±–∏—Ä–∞–µ–º –ø—Ä–æ–µ–∫—Ç
      if (!options.dryRun) {
        console.log('üèóÔ∏è  –°–æ–±–∏—Ä–∞–µ–º –ø—Ä–æ–µ–∫—Ç...')
        this.buildProject()
      }

      // –°–æ–∑–¥–∞–µ–º —Ä–µ–ª–∏–∑
      console.log('üì¶ –°–æ–∑–¥–∞–µ–º —Ä–µ–ª–∏–∑...')
      this.createRelease(options)

      // –°–æ–∑–¥–∞–µ–º –ø–∞–∫–µ—Ç
      if (!options.dryRun) {
        console.log('üì¶ –°–æ–∑–¥–∞–µ–º VSIX –ø–∞–∫–µ—Ç...')
        this.createPackage()
      }

      console.log('‚úÖ –†–µ–ª–∏–∑ —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω!')
      this.printNextSteps()
    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ —Ä–µ–ª–∏–∑–∞:', error)
      process.exit(1)
    }
  }

  /**
   * –ü—Ä–æ–≤–µ—Ä–∏—Ç—å —Å—Ç–∞—Ç—É—Å git
   */
  private checkGitStatus(): void {
    try {
      const status = execSync('git status --porcelain', { encoding: 'utf8' })
      if (status.trim()) {
        console.warn('‚ö†Ô∏è  –ï—Å—Ç—å –Ω–µ–∑–∞–∫–æ–º–º–∏—á–µ–Ω–Ω—ã–µ –∏–∑–º–µ–Ω–µ–Ω–∏—è:')
        console.log(status)
        throw new Error('–ó–∞–∫–æ–º–º–∏—Ç—å—Ç–µ –∏–ª–∏ –æ—Ç–º–µ–Ω–∏—Ç–µ –∏–∑–º–µ–Ω–µ–Ω–∏—è –ø–µ—Ä–µ–¥ —Ä–µ–ª–∏–∑–æ–º')
      }
    } catch (error) {
      throw new Error(`–û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ git —Å—Ç–∞—Ç—É—Å–∞: ${error}`)
    }
  }

  /**
   * –ó–∞–ø—É—Å—Ç–∏—Ç—å —Ç–µ—Å—Ç—ã
   */
  private runTests(): void {
    try {
      execSync('npm run test', { stdio: 'inherit' })
    } catch (error) {
      throw new Error('–¢–µ—Å—Ç—ã –Ω–µ –ø—Ä–æ—à–ª–∏')
    }
  }

  /**
   * –°–æ–±—Ä–∞—Ç—å –ø—Ä–æ–µ–∫—Ç
   */
  private buildProject(): void {
    try {
      execSync('npm run build:all', { stdio: 'inherit' })
    } catch (error) {
      throw new Error('–û—à–∏–±–∫–∞ —Å–±–æ—Ä–∫–∏ –ø—Ä–æ–µ–∫—Ç–∞')
    }
  }

  /**
   * –°–æ–∑–¥–∞—Ç—å —Ä–µ–ª–∏–∑
   */
  private createRelease(options: ReleaseOptions): void {
    const args: string[] = []

    if (options.dryRun) {
      args.push('--dry-run')
    }

    if (options.firstRelease) {
      args.push('--first-release')
    } else if (options.type) {
      if (options.type === 'prerelease') {
        args.push('--prerelease', options.prerelease || 'alpha')
      } else {
        args.push('--release-as', options.type)
      }
    }

    try {
      const command = `npx standard-version ${args.join(' ')}`
      console.log(`–í—ã–ø–æ–ª–Ω—è–µ–º: ${command}`)
      execSync(command, { stdio: 'inherit' })
    } catch (error) {
      throw new Error(`–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è —Ä–µ–ª–∏–∑–∞: ${error}`)
    }
  }

  /**
   * –°–æ–∑–¥–∞—Ç—å VSIX –ø–∞–∫–µ—Ç
   */
  private createPackage(): void {
    try {
      execSync('npm run package', { stdio: 'inherit' })
    } catch (error) {
      throw new Error('–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –ø–∞–∫–µ—Ç–∞')
    }
  }

  /**
   * –ü–æ–∫–∞–∑–∞—Ç—å —Å–ª–µ–¥—É—é—â–∏–µ —à–∞–≥–∏
   */
  private printNextSteps(): void {
    const pkg = JSON.parse(readFileSync(this.packagePath, 'utf8'))
    console.log('\nüìã –°–ª–µ–¥—É—é—â–∏–µ —à–∞–≥–∏:')
    console.log(`1. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –∏–∑–º–µ–Ω–µ–Ω–∏—è –≤ CHANGELOG.md`)
    console.log(`2. –û—Ç–ø—Ä–∞–≤—å—Ç–µ –∏–∑–º–µ–Ω–µ–Ω–∏—è: git push --follow-tags origin main`)
    console.log(`3. –û–ø—É–±–ª–∏–∫—É–π—Ç–µ –ø–∞–∫–µ—Ç: npm run publish`)
    console.log(`4. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ —Ä–µ–ª–∏–∑ –Ω–∞ GitHub`)
    console.log(`\nüìä –ù–æ–≤–∞—è –≤–µ—Ä—Å–∏—è: ${pkg.version}`)
  }

  /**
   * –ü–æ–ª—É—á–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Å–ª–µ–¥—É—é—â–µ–π –≤–µ—Ä—Å–∏–∏
   */
  async getNextVersion(type?: string): Promise<string> {
    try {
      const args = ['--dry-run', '--silent']
      if (type) {
        args.push('--release-as', type)
      }

      const output = execSync(`npx standard-version ${args.join(' ')}`, {
        encoding: 'utf8',
        stdio: 'pipe',
      })

      const versionMatch = output.match(
        /bumping version in package\.json from .+ to (.+)/
      )
      return versionMatch ? versionMatch[1] : 'unknown'
    } catch (error) {
      return 'unknown'
    }
  }
}

// CLI –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å
async function main() {
  const args = process.argv.slice(2)
  const releaseManager = new ReleaseManager()

  if (args.includes('--help') || args.includes('-h')) {
    console.log(`
üöÄ Tokyo Night Lod Release Manager

–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ:
  npm run release                     # –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –≤–µ—Ä—Å–∏–∏
  npm run release:patch              # Patch —Ä–µ–ª–∏–∑ (0.0.X)
  npm run release:minor              # Minor —Ä–µ–ª–∏–∑ (0.X.0)
  npm run release:major              # Major —Ä–µ–ª–∏–∑ (X.0.0)
  npm run release:alpha              # Prerelease alpha
  npm run release:beta               # Prerelease beta
  npm run release:rc                 # Prerelease RC
  npm run release:first              # –ü–µ—Ä–≤—ã–π —Ä–µ–ª–∏–∑
  npm run release:dry                # –°—É—Ö–æ–π –ø—Ä–æ–≥–æ–Ω

–û–ø—Ü–∏–∏:
  --dry-run                          # –ü–æ–∫–∞–∑–∞—Ç—å —á—Ç–æ –±—É–¥–µ—Ç —Å–¥–µ–ª–∞–Ω–æ
  --help, -h                         # –ü–æ–∫–∞–∑–∞—Ç—å —ç—Ç—É —Å–ø—Ä–∞–≤–∫—É

–ü—Ä–∏–º–µ—Ä—ã:
  npm run release                    # ‚Üí 1.2.3 ‚Üí 1.2.4 (–∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏)
  npm run release:minor              # ‚Üí 1.2.3 ‚Üí 1.3.0
  npm run release:major              # ‚Üí 1.2.3 ‚Üí 2.0.0
  npm run release:alpha              # ‚Üí 1.2.3 ‚Üí 1.2.4-alpha.0
`)
    return
  }

  const options: ReleaseOptions = {
    dryRun: args.includes('--dry-run'),
  }

  // –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–∏–ø —Ä–µ–ª–∏–∑–∞ –∏–∑ –∏–º–µ–Ω–∏ —Å–∫—Ä–∏–ø—Ç–∞
  const scriptName = process.env.npm_lifecycle_event
  if (scriptName?.startsWith('release:')) {
    const releaseType = scriptName.split(':')[1]

    switch (releaseType) {
      case 'patch':
      case 'minor':
      case 'major':
        options.type = releaseType
        break
      case 'alpha':
      case 'beta':
      case 'rc':
        options.type = 'prerelease'
        options.prerelease = releaseType
        break
      case 'first':
        options.firstRelease = true
        break
      case 'dry':
        options.dryRun = true
        break
    }
  }

  await releaseManager.release(options)
}

if (require.main === module) {
  main().catch(console.error)
}

export { ReleaseManager }
