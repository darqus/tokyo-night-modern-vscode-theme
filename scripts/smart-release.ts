#!/usr/bin/env ts-node

/**
 * –£–º–Ω–∞—è —Å–∏—Å—Ç–µ–º–∞ –∞–≤—Ç–æ–º–∞—Ç–∏–∑–∞—Ü–∏–∏ —Ä–µ–ª–∏–∑–æ–≤ Tokyo Night Lod
 * –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –æ–ø—Ä–µ–¥–µ–ª—è–µ—Ç —Ç–∏–ø –≤–µ—Ä—Å–∏–∏ –Ω–∞ –æ—Å–Ω–æ–≤–µ conventional commits
 */

import { execSync } from 'child_process'
import { readFileSync, writeFileSync } from 'fs'
import { join } from 'path'

interface ReleaseOptions {
  type?: 'patch' | 'minor' | 'major' | 'prerelease' | 'auto'
  prerelease?: string
  dryRun?: boolean
  firstRelease?: boolean
  force?: boolean
}

interface CommitAnalysis {
  hasFeat: boolean
  hasFix: boolean
  hasBreaking: boolean
  hasPerf: boolean
  commits: string[]
  recommendedType: 'patch' | 'minor' | 'major'
  changelog: string[]
}

class SmartReleaseManager {
  private packagePath: string
  private changelogPath: string

  constructor() {
    this.packagePath = join(process.cwd(), 'package.json')
    this.changelogPath = join(process.cwd(), 'CHANGELOG.md')
  }

  /**
   * –í—ã–ø–æ–ª–Ω–∏—Ç—å —É–º–Ω—ã–π —Ä–µ–ª–∏–∑ —Å –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–º –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ–º –≤–µ—Ä—Å–∏–∏
   */
  async release(options: ReleaseOptions = {}): Promise<void> {
    try {
      console.log('ü§ñ –ó–∞–ø—É—Å–∫–∞–µ–º —É–º–Ω—É—é —Å–∏—Å—Ç–µ–º—É —Ä–µ–ª–∏–∑–æ–≤...')

      // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ git
      if (!options.force) {
        this.checkGitStatus()
      }

      // –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –∫–æ–º–º–∏—Ç—ã –¥–ª—è –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è —Ç–∏–ø–∞ —Ä–µ–ª–∏–∑–∞
      const analysis = await this.analyzeCommits()

      if (options.type === 'auto' || !options.type) {
        options.type = analysis.recommendedType
        console.log(`üîç –ê–Ω–∞–ª–∏–∑ –∫–æ–º–º–∏—Ç–æ–≤ –∑–∞–≤–µ—Ä—à–µ–Ω:`)
        console.log(`   üìù –ö–æ–º–º–∏—Ç–æ–≤ –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞: ${analysis.commits.length}`)
        console.log(`   ‚ú® Features: ${analysis.hasFeat ? '‚úÖ' : '‚ùå'}`)
        console.log(`   üêõ Fixes: ${analysis.hasFix ? '‚úÖ' : '‚ùå'}`)
        console.log(`   üí• Breaking: ${analysis.hasBreaking ? '‚ö†Ô∏è ' : '‚ùå'}`)
        console.log(`   ‚ö° Performance: ${analysis.hasPerf ? '‚úÖ' : '‚ùå'}`)
        console.log(
          `üìà –†–µ–∫–æ–º–µ–Ω–¥–æ–≤–∞–Ω–Ω—ã–π —Ç–∏–ø —Ä–µ–ª–∏–∑–∞: ${options.type.toUpperCase()}`
        )

        if (analysis.changelog.length > 0) {
          console.log('üìã –ö—Ä–∞—Ç–∫–æ–µ —Å–æ–¥–µ—Ä–∂–∞–Ω–∏–µ –∏–∑–º–µ–Ω–µ–Ω–∏–π:')
          analysis.changelog
            .slice(0, 3)
            .forEach((change) => console.log(`   ‚Ä¢ ${change}`))
          if (analysis.changelog.length > 3) {
            console.log(
              `   ... –∏ –µ—â–µ ${analysis.changelog.length - 3} –∏–∑–º–µ–Ω–µ–Ω–∏–π`
            )
          }
        }
      }

      // –ï—Å–ª–∏ –Ω–µ—Ç –∏–∑–º–µ–Ω–µ–Ω–∏–π –¥–ª—è —Ä–µ–ª–∏–∑–∞
      if (
        analysis.commits.length === 0 &&
        !options.force &&
        !options.firstRelease
      ) {
        console.log('‚ÑπÔ∏è  –ù–µ—Ç –∫–æ–º–º–∏—Ç–æ–≤ –¥–ª—è —Ä–µ–ª–∏–∑–∞')
        return
      }

      // –ó–∞–ø—É—Å–∫–∞–µ–º —Ç–µ—Å—Ç—ã
      if (!options.dryRun) {
        console.log('üß™ –ó–∞–ø—É—Å–∫–∞–µ–º —Ç–µ—Å—Ç—ã...')
        this.runTests()
      }

      // –°–æ–±–∏—Ä–∞–µ–º –ø—Ä–æ–µ–∫—Ç
      if (!options.dryRun) {
        console.log('üèóÔ∏è  –°–æ–±–∏—Ä–∞–µ–º –ø—Ä–æ–µ–∫—Ç...')
        this.buildProject()
      }

      // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø—Ä–µ–¥–≤–∞—Ä–∏—Ç–µ–ª—å–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –≤–µ—Ä—Å–∏–∏
      const currentVersion = this.getCurrentVersion()
      const nextVersion = await this.getNextVersion(
        options.type,
        options.prerelease
      )
      console.log(`üìä –í–µ—Ä—Å–∏—è: ${currentVersion} ‚Üí ${nextVersion}`)

      // –°–æ–∑–¥–∞–µ–º —Ä–µ–ª–∏–∑
      console.log(`üì¶ –°–æ–∑–¥–∞–µ–º ${options.type.toUpperCase()} —Ä–µ–ª–∏–∑...`)
      this.createRelease(options)

      // –°–æ–∑–¥–∞–µ–º –ø–∞–∫–µ—Ç
      if (!options.dryRun) {
        console.log('üì¶ –°–æ–∑–¥–∞–µ–º VSIX –ø–∞–∫–µ—Ç...')
        this.createPackage()
      }

      console.log('‚úÖ –†–µ–ª–∏–∑ —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω!')
      this.printNextSteps(analysis, nextVersion)
    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ —Ä–µ–ª–∏–∑–∞:', error)
      process.exit(1)
    }
  }

  /**
   * –ê–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å –∫–æ–º–º–∏—Ç—ã —Å –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ —Ç–µ–≥–∞ –¥–ª—è –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è —Ç–∏–ø–∞ —Ä–µ–ª–∏–∑–∞
   */
  private async analyzeCommits(): Promise<CommitAnalysis> {
    try {
      // –ü–æ–ª—É—á–∞–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–π —Ç–µ–≥
      let lastTag: string
      try {
        lastTag = execSync('git describe --tags --abbrev=0', {
          encoding: 'utf8',
        }).trim()
      } catch {
        // –ï—Å–ª–∏ —Ç–µ–≥–æ–≤ –Ω–µ—Ç, –∞–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –≤—Å–µ –∫–æ–º–º–∏—Ç—ã
        try {
          lastTag = execSync('git rev-list --max-parents=0 HEAD', {
            encoding: 'utf8',
          }).trim()
        } catch {
          lastTag = 'HEAD~10' // Fallback
        }
      }

      // –ü–æ–ª—É—á–∞–µ–º –∫–æ–º–º–∏—Ç—ã —Å –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ —Ç–µ–≥–∞
      const commits = execSync(`git log ${lastTag}..HEAD --oneline`, {
        encoding: 'utf8',
      })
        .trim()
        .split('\n')
        .filter((line) => line.length > 0)

      const analysis: CommitAnalysis = {
        hasFeat: false,
        hasFix: false,
        hasBreaking: false,
        hasPerf: false,
        commits,
        recommendedType: 'patch',
        changelog: [],
      }

      // –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –∫–∞–∂–¥—ã–π –∫–æ–º–º–∏—Ç
      for (const commit of commits) {
        const message = commit.substring(8) // –£–±–∏—Ä–∞–µ–º —Ö–µ—à –∫–æ–º–º–∏—Ç–∞

        // –ü—Ä–æ–≤–µ—Ä—è–µ–º breaking changes
        if (message.includes('BREAKING CHANGE') || message.match(/^[^:]+!/)) {
          analysis.hasBreaking = true
        }

        // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–∏–ø—ã –∫–æ–º–º–∏—Ç–æ–≤
        if (message.match(/^feat(\(.+\))?:/)) {
          analysis.hasFeat = true
          analysis.changelog.push(
            `‚ú® ${message.replace(/^feat(\(.+\))?:\s*/, '')}`
          )
        }

        if (message.match(/^fix(\(.+\))?:/)) {
          analysis.hasFix = true
          analysis.changelog.push(
            `üêõ ${message.replace(/^fix(\(.+\))?:\s*/, '')}`
          )
        }

        if (message.match(/^perf(\(.+\))?:/)) {
          analysis.hasPerf = true
          analysis.changelog.push(
            `‚ö° ${message.replace(/^perf(\(.+\))?:\s*/, '')}`
          )
        }

        if (message.match(/^docs(\(.+\))?:/)) {
          analysis.changelog.push(
            `üìö ${message.replace(/^docs(\(.+\))?:\s*/, '')}`
          )
        }

        if (message.match(/^refactor(\(.+\))?:/)) {
          analysis.changelog.push(
            `‚ôªÔ∏è ${message.replace(/^refactor(\(.+\))?:\s*/, '')}`
          )
        }
      }

      // –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ä–µ–∫–æ–º–µ–Ω–¥–æ–≤–∞–Ω–Ω—ã–π —Ç–∏–ø —Ä–µ–ª–∏–∑–∞
      if (analysis.hasBreaking) {
        analysis.recommendedType = 'major'
      } else if (analysis.hasFeat) {
        analysis.recommendedType = 'minor'
      } else if (analysis.hasFix || analysis.hasPerf) {
        analysis.recommendedType = 'patch'
      }

      return analysis
    } catch (error) {
      console.warn('‚ö†Ô∏è  –û—à–∏–±–∫–∞ –∞–Ω–∞–ª–∏–∑–∞ –∫–æ–º–º–∏—Ç–æ–≤, –∏—Å–ø–æ–ª—å–∑—É–µ–º patch:', error)
      return {
        hasFeat: false,
        hasFix: false,
        hasBreaking: false,
        hasPerf: false,
        commits: [],
        recommendedType: 'patch',
        changelog: [],
      }
    }
  }

  /**
   * –ü–æ–ª—É—á–∏—Ç—å —Ç–µ–∫—É—â—É—é –≤–µ—Ä—Å–∏—é –∏–∑ package.json
   */
  private getCurrentVersion(): string {
    const pkg = JSON.parse(readFileSync(this.packagePath, 'utf8'))
    return pkg.version
  }

  /**
   * –ü–æ–ª—É—á–∏—Ç—å —Å–ª–µ–¥—É—é—â—É—é –≤–µ—Ä—Å–∏—é
   */
  private async getNextVersion(
    type?: string,
    prerelease?: string
  ): Promise<string> {
    try {
      const args = ['--dry-run', '--silent']
      if (type && type !== 'auto') {
        if (type === 'prerelease') {
          args.push('--prerelease', prerelease || 'alpha')
        } else {
          args.push('--release-as', type)
        }
      }

      const output = execSync(`npx standard-version ${args.join(' ')}`, {
        encoding: 'utf8',
        stdio: 'pipe',
      })

      const versionMatch = output.match(
        /bumping version in package\.json from .+ to (.+)/
      )
      return versionMatch ? versionMatch[1] : 'unknown'
    } catch (error) {
      return 'unknown'
    }
  }

  /**
   * –ü—Ä–æ–≤–µ—Ä–∏—Ç—å —Å—Ç–∞—Ç—É—Å git
   */
  private checkGitStatus(): void {
    try {
      const status = execSync('git status --porcelain', { encoding: 'utf8' })
      if (status.trim()) {
        console.warn('‚ö†Ô∏è  –ï—Å—Ç—å –Ω–µ–∑–∞–∫–æ–º–º–∏—á–µ–Ω–Ω—ã–µ –∏–∑–º–µ–Ω–µ–Ω–∏—è:')
        console.log(status)
        throw new Error('–ó–∞–∫–æ–º–º–∏—Ç—å—Ç–µ –∏–ª–∏ –æ—Ç–º–µ–Ω–∏—Ç–µ –∏–∑–º–µ–Ω–µ–Ω–∏—è –ø–µ—Ä–µ–¥ —Ä–µ–ª–∏–∑–æ–º')
      }
    } catch (error) {
      throw new Error(`–û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ git —Å—Ç–∞—Ç—É—Å–∞: ${error}`)
    }
  }

  /**
   * –ó–∞–ø—É—Å—Ç–∏—Ç—å —Ç–µ—Å—Ç—ã
   */
  private runTests(): void {
    try {
      execSync('npm run test', { stdio: 'inherit' })
    } catch (error) {
      throw new Error('–¢–µ—Å—Ç—ã –Ω–µ –ø—Ä–æ—à–ª–∏')
    }
  }

  /**
   * –°–æ–±—Ä–∞—Ç—å –ø—Ä–æ–µ–∫—Ç
   */
  private buildProject(): void {
    try {
      execSync('npm run build:all', { stdio: 'inherit' })
    } catch (error) {
      throw new Error('–û—à–∏–±–∫–∞ —Å–±–æ—Ä–∫–∏ –ø—Ä–æ–µ–∫—Ç–∞')
    }
  }

  /**
   * –°–æ–∑–¥–∞—Ç—å —Ä–µ–ª–∏–∑
   */
  private createRelease(options: ReleaseOptions): void {
    const args: string[] = []

    if (options.dryRun) {
      args.push('--dry-run')
    }

    if (options.firstRelease) {
      args.push('--first-release')
    } else if (options.type && options.type !== 'auto') {
      if (options.type === 'prerelease') {
        args.push('--prerelease', options.prerelease || 'alpha')
      } else {
        args.push('--release-as', options.type)
      }
    }

    try {
      const command = `npx standard-version ${args.join(' ')}`
      console.log(`–í—ã–ø–æ–ª–Ω—è–µ–º: ${command}`)
      execSync(command, { stdio: 'inherit' })
    } catch (error) {
      throw new Error(`–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è —Ä–µ–ª–∏–∑–∞: ${error}`)
    }
  }

  /**
   * –°–æ–∑–¥–∞—Ç—å VSIX –ø–∞–∫–µ—Ç
   */
  private createPackage(): void {
    try {
      execSync('npm run package', { stdio: 'inherit' })
    } catch (error) {
      throw new Error('–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –ø–∞–∫–µ—Ç–∞')
    }
  }

  /**
   * –ü–æ–∫–∞–∑–∞—Ç—å —Å–ª–µ–¥—É—é—â–∏–µ —à–∞–≥–∏
   */
  private printNextSteps(analysis: CommitAnalysis, version: string): void {
    console.log('\nüìã –°–ª–µ–¥—É—é—â–∏–µ —à–∞–≥–∏:')
    console.log(`1. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –∏–∑–º–µ–Ω–µ–Ω–∏—è –≤ CHANGELOG.md`)
    console.log(`2. –û—Ç–ø—Ä–∞–≤—å—Ç–µ –∏–∑–º–µ–Ω–µ–Ω–∏—è: git push --follow-tags origin main`)
    console.log(`3. –û–ø—É–±–ª–∏–∫—É–π—Ç–µ –ø–∞–∫–µ—Ç: npm run publish`)
    console.log(`4. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ —Ä–µ–ª–∏–∑ –Ω–∞ GitHub`)
    console.log(`\nüìä –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Ä–µ–ª–∏–∑–µ:`)
    console.log(`   üè∑Ô∏è  –í–µ—Ä—Å–∏—è: ${version}`)
    console.log(`   üìù –ò–∑–º–µ–Ω–µ–Ω–∏–π: ${analysis.commits.length}`)
    if (analysis.hasBreaking) {
      console.log(`   üí• –í–ù–ò–ú–ê–ù–ò–ï: –ï—Å—Ç—å breaking changes!`)
    }
  }
}

// CLI –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å
async function main() {
  const args = process.argv.slice(2)
  const releaseManager = new SmartReleaseManager()

  if (args.includes('--help') || args.includes('-h')) {
    console.log(`
ü§ñ Tokyo Night Lod Smart Release Manager

–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ:
  npm run release                     # –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –≤–µ—Ä—Å–∏–∏
  npm run release:patch              # –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω—ã–π patch —Ä–µ–ª–∏–∑
  npm run release:minor              # –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω—ã–π minor —Ä–µ–ª–∏–∑
  npm run release:major              # –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω—ã–π major —Ä–µ–ª–∏–∑
  npm run release:alpha              # Prerelease alpha
  npm run release:beta               # Prerelease beta
  npm run release:rc                 # Prerelease RC
  npm run release:first              # –ü–µ—Ä–≤—ã–π —Ä–µ–ª–∏–∑
  npm run release:dry                # –°—É—Ö–æ–π –ø—Ä–æ–≥–æ–Ω

–û–ø—Ü–∏–∏:
  --dry-run                          # –ü–æ–∫–∞–∑–∞—Ç—å —á—Ç–æ –±—É–¥–µ—Ç —Å–¥–µ–ª–∞–Ω–æ
  --force                            # –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω—ã–π —Ä–µ–ª–∏–∑ (–∏–≥–Ω–æ—Ä–∏—Ä—É–µ—Ç –ø—Ä–æ–≤–µ—Ä–∫–∏ git)
  --help, -h                         # –ü–æ–∫–∞–∑–∞—Ç—å —ç—Ç—É —Å–ø—Ä–∞–≤–∫—É

–£–º–Ω–æ–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –≤–µ—Ä—Å–∏–∏:
  üêõ fix:     ‚Üí PATCH –≤–µ—Ä—Å–∏—è (0.0.X)
  ‚ú® feat:    ‚Üí MINOR –≤–µ—Ä—Å–∏—è (0.X.0)
  üí• BREAKING ‚Üí MAJOR –≤–µ—Ä—Å–∏—è (X.0.0)
  ‚ö° perf:    ‚Üí PATCH –≤–µ—Ä—Å–∏—è (0.0.X)

–ü—Ä–∏–º–µ—Ä—ã:
  npm run release                    # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ—Ç –∫–æ–º–º–∏—Ç—ã –∏ –≤—ã–±–∏—Ä–∞–µ—Ç —Ç–∏–ø –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏
  npm run release:minor              # –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ —Å–æ–∑–¥–∞–µ—Ç minor —Ä–µ–ª–∏–∑
  npm run release -- --force         # –°–æ–∑–¥–∞–µ—Ç —Ä–µ–ª–∏–∑ –∏–≥–Ω–æ—Ä–∏—Ä—É—è –ø—Ä–æ–≤–µ—Ä–∫–∏ git
`)
    return
  }

  const options: ReleaseOptions = {
    dryRun: args.includes('--dry-run'),
    force: args.includes('--force'),
    type: 'auto', // –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ
  }

  // –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–∏–ø —Ä–µ–ª–∏–∑–∞ –∏–∑ –∏–º–µ–Ω–∏ —Å–∫—Ä–∏–ø—Ç–∞
  const scriptName = process.env.npm_lifecycle_event
  if (scriptName?.startsWith('release:')) {
    const releaseType = scriptName.split(':')[1]

    switch (releaseType) {
      case 'patch':
      case 'minor':
      case 'major':
        options.type = releaseType
        break
      case 'alpha':
      case 'beta':
      case 'rc':
        options.type = 'prerelease'
        options.prerelease = releaseType
        break
      case 'first':
        options.firstRelease = true
        break
      case 'dry':
        options.dryRun = true
        break
    }
  }

  await releaseManager.release(options)
}

if (require.main === module) {
  main().catch(console.error)
}

export { SmartReleaseManager }
