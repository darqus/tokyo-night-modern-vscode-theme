/// <reference types="node" />
import { tokenColors } from './tokenColors'
import { semanticTokenColors } from './semanticTokenColors'
import * as fs from 'node:fs'
import * as path from 'node:path'
import { getBaseColors } from './theme/base'
import { getButtonColors } from './theme/buttons'
import { getInputColors } from './theme/inputs'
import { getActivityBarColors } from './theme/activityBar'
import { getSideBarColors } from './theme/sideBar'
import { getListColors } from './theme/lists'
import { getEditorColors } from './theme/editor'
import { getTabColors } from './theme/tabs'
import { getStatusBarColors } from './theme/statusBar'
import { getTerminalColors } from './theme/terminal'
import { getGitColors } from './theme/git'
import { getNotificationColors } from './theme/notifications'
import { getMenuColors } from './theme/menus'
import { getPeekViewColors } from './theme/peekView'
import { getDiffEditorColors } from './theme/diffEditor'
import { getMergeColors } from './theme/merge'
import { getChartColors } from './theme/charts'
import { getDebugColors } from './theme/debug'
import { getQuickInputColors } from './theme/quickInput'
import { getMiscColors } from './theme/misc'

// –ù–æ–≤—ã–µ –º–æ–¥—É–ª–∏ —É–ª—É—á—à–µ–Ω–Ω–æ–π –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä—ã
import { ThemeConfigManager, ConfigFactory } from './config/themeConfig'
import { PluginManager, PluginConfigFactory } from './plugins/index'
import { ThemeValidator } from './validation/themeValidator'

/**
 * –£–ª—É—á—à–µ–Ω–Ω—ã–π –≥–µ–Ω–µ—Ä–∞—Ç–æ—Ä —Ç–µ–º—ã —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π –Ω–æ–≤–æ–π –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä—ã
 */

const root = path.resolve(__dirname, '..')
const themePath = path.join(root, 'themes', 'tokyo-night-dark-color-theme.json')

export const buildColors = (): Record<string, string> => ({
  ...getBaseColors(),
  ...getButtonColors(),
  ...getInputColors(),
  ...getActivityBarColors(),
  ...getSideBarColors(),
  ...getListColors(),
  ...getEditorColors(),
  ...getTabColors(),
  ...getStatusBarColors(),
  ...getTerminalColors(),
  ...getGitColors(),
  ...getNotificationColors(),
  ...getMenuColors(),
  ...getPeekViewColors(),
  ...getDiffEditorColors(),
  ...getMergeColors(),
  ...getChartColors(),
  ...getDebugColors(),
  ...getQuickInputColors(),
  ...getMiscColors(),
})

/**
 * –£–ª—É—á—à–µ–Ω–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è —Å–±–æ—Ä–∫–∏ —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ –∏ –ø–ª–∞–≥–∏–Ω–æ–≤
 */
export const buildThemeWithConfig = (configName?: string) => {
  // –°–æ–∑–¥–∞–µ–º –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é
  let config = ConfigFactory.createDeveloperConfig()

  if (configName === 'accessibility') {
    config = ConfigFactory.createAccessibilityConfig()
  } else if (configName === 'minimal') {
    config = ConfigFactory.createMinimalConfig()
  }

  // –°–æ–∑–¥–∞–µ–º –º–µ–Ω–µ–¥–∂–µ—Ä –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
  const configManager = new ThemeConfigManager(config)

  // –°–æ–∑–¥–∞–µ–º –º–µ–Ω–µ–¥–∂–µ—Ä –ø–ª–∞–≥–∏–Ω–æ–≤
  const pluginManager = new PluginManager()

  // –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –≤–∫–ª—é—á–∞–µ–º –ø–ª–∞–≥–∏–Ω—ã –¥–ª—è –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã—Ö —è–∑—ã–∫–æ–≤
  pluginManager.autoEnableForLanguages(config.syntax.customLanguageSupport)

  // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —Ç–µ–º—É
  let theme = configManager.generateTheme()

  // –ü—Ä–∏–º–µ–Ω—è–µ–º –ø–ª–∞–≥–∏–Ω—ã
  theme = pluginManager.applyPlugins(theme, '0.4.0')

  // –í–∞–ª–∏–¥–∏—Ä—É–µ–º —Ç–µ–º—É
  const validator = new ThemeValidator()
  const validationResult = validator.validateTheme(theme)

  if (!validationResult.passed) {
    console.warn('–û–±–Ω–∞—Ä—É–∂–µ–Ω—ã –ø—Ä–æ–±–ª–µ–º—ã —Å —Ç–µ–º–æ–π:')
    validationResult.issues.forEach((issue) => {
      console.warn(`[${issue.severity}] ${issue.message}`)
      if (issue.suggestion) {
        console.warn(`  –°–æ–≤–µ—Ç: ${issue.suggestion}`)
      }
    })
  }

  return theme
}

/**
 * –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –¥–∏–Ω–∞–º–∏—á–µ—Å–∫–∏—Ö —Ü–≤–µ—Ç–æ–≤
 */
const main = () => {
  console.log('üèóÔ∏è  –°–±–æ—Ä–∫–∞ —Ç–µ–º—ã Tokyo Night Lod...')

  // –°–æ–∑–¥–∞–µ–º –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é themes –µ—Å–ª–∏ –æ–Ω–∞ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
  const themesDir = path.dirname(themePath)
  if (!fs.existsSync(themesDir)) {
    fs.mkdirSync(themesDir, { recursive: true })
  }

  // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —Ç–µ–º—É —Å –Ω—É–ª—è
  const theme = {
    name: 'Tokyo Night Lod',
    displayName: 'Tokyo Night Lod',
    author: 'lod',
    maintainers: ['lod'],
    type: 'dark',
    semanticClass: 'tokyo-night',
    semanticTokenColors: semanticTokenColors,
    colors: buildColors(),
    tokenColors: tokenColors,
  }

  // –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ—Å–Ω–æ–≤–Ω—É—é —Ç–µ–º—É
  const out = JSON.stringify(theme, null, 2) + '\n'
  fs.writeFileSync(themePath, out, 'utf8')

  console.log('‚úÖ –¢–µ–º–∞ —É—Å–ø–µ—à–Ω–æ —Å–æ–±—Ä–∞–Ω–∞!')
  console.log(`üìÅ –§–∞–π–ª: ${themePath}`)

  // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –≤–∞—Ä–∏–∞–Ω—Ç—ã
  console.log('\nüé® –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤ —Ç–µ–º—ã...')

  // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –≤—ã—Å–æ–∫–æ–∫–æ–Ω—Ç—Ä–∞—Å—Ç–Ω—ã–π –≤–∞—Ä–∏–∞–Ω—Ç
  const accessibilityTheme = buildThemeWithConfig('accessibility')
  const accessibilityPath = path.join(
    root,
    'themes',
    'tokyo-night-dark-high-contrast-color-theme.json'
  )
  fs.writeFileSync(
    accessibilityPath,
    JSON.stringify(accessibilityTheme, null, 2) + '\n',
    'utf8'
  )
  console.log(`‚úÖ –í—ã—Å–æ–∫–æ–∫–æ–Ω—Ç—Ä–∞—Å—Ç–Ω—ã–π –≤–∞—Ä–∏–∞–Ω—Ç: ${accessibilityPath}`)

  // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –º–∏–Ω–∏–º–∞–ª–∏—Å—Ç–∏—á–Ω—ã–π –≤–∞—Ä–∏–∞–Ω—Ç
  const minimalTheme = buildThemeWithConfig('minimal')
  const minimalPath = path.join(
    root,
    'themes',
    'tokyo-night-dark-minimal-color-theme.json'
  )
  fs.writeFileSync(
    minimalPath,
    JSON.stringify(minimalTheme, null, 2) + '\n',
    'utf8'
  )
  console.log(`‚úÖ –ú–∏–Ω–∏–º–∞–ª–∏—Å—Ç–∏—á–Ω—ã–π –≤–∞—Ä–∏–∞–Ω—Ç: ${minimalPath}`)
}

if (require.main === module) {
  main()
}
