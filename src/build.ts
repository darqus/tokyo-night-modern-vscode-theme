/**
 * –£–ø—Ä–æ—â–µ–Ω–Ω–∞—è —Å–±–æ—Ä–∫–∞ Tokyo Night —Ç–µ–º—ã
 */
import * as fs from 'node:fs'
import * as path from 'node:path'
import { ThemeGenerator, ConfigManager } from './core/simplified'

const root = path.resolve(__dirname, '..')
const themePath = path.join(root, 'themes', 'tokyo-night-modern-color-theme.json')

export const buildTheme = () => {
  try {
    const config = ConfigManager.getDefault()
    
    console.log('üèóÔ∏è  –°–±–æ—Ä–∫–∞ —Ç–µ–º—ã...')
    console.log(`üìù –ù–∞–∑–≤–∞–Ω–∏–µ: ${config.theme.displayName}`)
    console.log(`üé® –¢–∏–ø: ${config.theme.type}`)
    
    const theme = ThemeGenerator.generate({
      name: config.theme.name,
      displayName: config.theme.displayName,
      type: config.theme.type,
      overrides: config.overrides
    })

    const themesDir = path.dirname(themePath)
    if (!fs.existsSync(themesDir)) {
      fs.mkdirSync(themesDir, { recursive: true })
    }

    const themeJson = JSON.stringify(theme, null, 2) + '\n'
    fs.writeFileSync(themePath, themeJson, 'utf8')

    console.log(`‚úÖ –¢–µ–º–∞ —Å–æ–∑–¥–∞–Ω–∞: ${themePath}`)
    console.log(`üìä –¶–≤–µ—Ç–æ–≤: ${Object.keys(theme.colors).length}, –¢–æ–∫–µ–Ω–æ–≤: ${theme.tokenColors.length}`)
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ —Å–±–æ—Ä–∫–∏ —Ç–µ–º—ã:', error instanceof Error ? error.message : String(error))
    process.exit(1)
  }
}

if (require.main === module) {
  buildTheme()
}
