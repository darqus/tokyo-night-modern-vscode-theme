/**
 * –°–±–æ—Ä–∫–∞ Tokyo Night —Ç–µ–º—ã
 */
import * as fs from 'node:fs'
import * as path from 'node:path'
import { generateTheme, loadEnvVars } from './generators/theme'
import { PluginManager, type PluginContext } from './core/pluginSystem'
import { ColorSchemeRegistry } from './core/colorSchemeFactory'
import { PaletteManager } from './core/paletteManager'
import { CacheManager } from './core/cacheManager'
import { TokenRegistry } from './core/TokenRegistryImpl'
import { loadConfig, generatePalettesFromConfig } from './config'

const root = path.resolve(__dirname, '..')
const env = loadEnvVars()
const themePath = path.join(root, 'themes', `${env.THEME_FILENAME}.json`)

export const buildTheme = () => {
  try {
    const quiet = process.env.QUIET === '1'
    const log = (...args: any[]) => {
      if (!quiet) console.log(...args)
    }

    log('üèóÔ∏è  –°–±–æ—Ä–∫–∞ —Ç–µ–º—ã...')
    log(`üìù –ù–∞–∑–≤–∞–Ω–∏–µ: ${env.THEME_DISPLAY_NAME}`)
    log(`üé® –¢–∏–ø: ${env.THEME_TYPE}`)
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –ª–∏ –¥–µ–∫–ª–∞—Ä–∞—Ç–∏–≤–Ω–∞—è –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è
    const useConfig = process.env.USE_CONFIG === '1'
    
    let palettes
    
    if (useConfig) {
      // –ò—Å–ø–æ–ª—å–∑—É–µ–º –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–æ–Ω–Ω—ã–π –ø–æ–¥—Ö–æ–¥
      const configName = process.env.THEME_CONFIG || 'tokyo-night'
      log(`‚öôÔ∏è  –ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è: ${configName}`)
      
      const config = loadConfig(configName)
      if (!config) {
        throw new Error(`–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è: ${configName}`)
      }
      
      palettes = generatePalettesFromConfig(config)
      log(`üé® –¢–∏–ø —Ç–µ–º—ã –∏–∑ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏: ${config.type}`)
    } else {
      // –ò—Å–ø–æ–ª—å–∑—É–µ–º —Ñ–∞–±—Ä–∏—á–Ω—ã–π –ø–æ–¥—Ö–æ–¥
      const schemeRegistry = new ColorSchemeRegistry()
      
      // –ü–æ–ª—É—á–∞–µ–º –∏–º—è —Å—Ö–µ–º—ã –∏–∑ –ø–µ—Ä–µ–º–µ–Ω–Ω–æ–π –æ–∫—Ä—É–∂–µ–Ω–∏—è –∏–ª–∏ –∏—Å–ø–æ–ª—å–∑—É–µ–º –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
      const schemeName = process.env.THEME_SCHEME || 'tokyo-night'
      log(`üé® –¶–≤–µ—Ç–æ–≤–∞—è —Å—Ö–µ–º–∞: ${schemeName}`)
      
      // –°–æ–∑–¥–∞–µ–º –ø–∞–ª–∏—Ç—Ä—ã –¥–ª—è –≤—ã–±—Ä–∞–Ω–Ω–æ–π —Å—Ö–µ–º—ã
      palettes = schemeRegistry.createPalettesForScheme(schemeName)
      if (!palettes) {
        throw new Error(`–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è —Ü–≤–µ—Ç–æ–≤–∞—è —Å—Ö–µ–º–∞: ${schemeName}`)
      }
    }
    
    // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –º–µ–Ω–µ–¥–∂–µ—Ä –∫—ç—à–∞
    const cacheManager = new CacheManager(1024) // —É–≤–µ–ª–∏—á–µ–Ω–Ω—ã–π —Ä–∞–∑–º–µ—Ä –∫—ç—à–∞
    
    // –°–æ–∑–¥–∞–µ–º –º–µ–Ω–µ–¥–∂–µ—Ä –ø–∞–ª–∏—Ç—Ä —Å –Ω–æ–≤—ã–º–∏ –ø–∞–ª–∏—Ç—Ä–∞–º–∏
    const paletteManager = new PaletteManager(cacheManager)
    
    // –û–±–Ω–æ–≤–ª—è–µ–º –ø–∞–ª–∏—Ç—Ä—ã —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–º–∏ –∑–Ω–∞—á–µ–Ω–∏—è–º–∏
    paletteManager.updateInterfacePalette(palettes.interface)
    paletteManager.updateSyntaxPalette(palettes.syntax)
    paletteManager.updateRichSyntaxPalette(palettes.richSyntax)
    
    // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –º–µ–Ω–µ–¥–∂–µ—Ä –ø–ª–∞–≥–∏–Ω–æ–≤
    const pluginManager = new PluginManager()
    
    // –°–æ–∑–¥–∞–µ–º —Ç–æ–∫–µ–Ω —Ä–µ–µ—Å—Ç—Ä
    const tokenRegistry = new TokenRegistry()
    
    // –°–æ–∑–¥–∞–µ–º –∫–æ–Ω—Ç–µ–∫—Å—Ç –¥–ª—è –ø–ª–∞–≥–∏–Ω–æ–≤
    const pluginContext: PluginContext = {
      paletteManager,
      tokenRegistry,
    }
    
    // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –ø–ª–∞–≥–∏–Ω—ã
    pluginManager.initialize(pluginContext)
    
    const themesDir = path.dirname(themePath)
    if (!fs.existsSync(themesDir)) {
      fs.mkdirSync(themesDir, { recursive: true })
    }

    // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —Ç–µ–º—É —Å —É—á–µ—Ç–æ–º —Ç–µ–∫—É—â–µ–π –ø–∞–ª–∏—Ç—Ä—ã
    const theme = generateTheme(env, paletteManager)
    
    // –ü—Ä–∏–º–µ–Ω—è–µ–º –º–æ–¥–∏—Ñ–∏–∫–∞—Ü–∏–∏ –æ—Ç –ø–ª–∞–≥–∏–Ω–æ–≤
    const finalTheme = pluginManager.applyToTheme(theme)
    
    const themeJson = JSON.stringify(finalTheme, null, 2) + '\n'
    fs.writeFileSync(themePath, themeJson, 'utf8')

    log(`‚úÖ –¢–µ–º–∞ —Å–æ–∑–¥–∞–Ω–∞: ${themePath}`)
    log(
      `üìä –¶–≤–µ—Ç–æ–≤: ${Object.keys(finalTheme.colors).length}, –¢–æ–∫–µ–Ω–æ–≤: ${
        finalTheme.tokenColors.length
      }`
    )
    
    log(`üíæ –ö—ç—à: ${JSON.stringify(cacheManager.getStats())}`)
  } catch (error) {
    console.error(
      '‚ùå –û—à–∏–±–∫–∞ —Å–±–æ—Ä–∫–∏ —Ç–µ–º—ã:',
      error instanceof Error ? error.message : String(error)
    )
    process.exit(1)
  }
}

/* istanbul ignore next */
if (require.main === module) {
  buildTheme()
}
