import { writeFileSync, mkdirSync } from 'fs'
import { join } from 'path'
import {
  AdaptiveThemeGenerator,
  PaletteUtils,
} from './adaptive-theme-generator'
import type { ThemeData, ThemeObject } from '../types/theme'
import type { PaletteModification } from '../palette/adapters'

/**
 * –ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏–æ–Ω–Ω—ã–π –º–æ–¥—É–ª—å –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∏ —ç–∫—Å–ø–æ—Ä—Ç–∞ —Ç–µ–º
 */
export class ThemeGenerator {
  private outputDir: string

  constructor(outputDir: string = './themes') {
    this.outputDir = outputDir
    this.ensureOutputDir()
  }

  private ensureOutputDir(): void {
    try {
      mkdirSync(this.outputDir, { recursive: true })
    } catch (error) {
      // Directory might already exist
    }
  }

  /**
   * –ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –≤—Å–µ –ø—Ä–µ–¥—É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω—ã–µ –≤–∞—Ä–∏–∞–Ω—Ç—ã —Ç–µ–º
   */
  generateAllVariants(): void {
    const variants = AdaptiveThemeGenerator.generateThemeVariants()

    variants.forEach((theme) => {
      this.saveTheme(theme)
    })

    console.log(
      `‚úÖ –°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–æ ${variants.length} –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤ —Ç–µ–º –≤ ${this.outputDir}`
    )
  }

  /**
   * –ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –∫–∞—Å—Ç–æ–º–Ω—É—é —Ç–µ–º—É
   */
  generateCustomTheme(
    name: string,
    displayName: string,
    modification: PaletteModification,
    type: 'dark' | 'light' = 'dark'
  ): ThemeObject {
    const theme = AdaptiveThemeGenerator.createCustomTheme(
      name,
      displayName,
      modification,
      type
    )

    this.saveTheme(theme)
    console.log(`‚úÖ –°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–∞ –∫–∞—Å—Ç–æ–º–Ω–∞—è —Ç–µ–º–∞: ${displayName}`)

    return theme
  }

  /**
   * –ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç —Å–µ–∑–æ–Ω–Ω—ã–µ –≤–∞—Ä–∏–∞–Ω—Ç—ã —Ç–µ–º
   */
  generateSeasonalThemes(): void {
    const seasonalThemes = [
      {
        name: 'tokyo-night-spring',
        displayName: 'Tokyo Night Spring',
        modification: {
          hueShift: 15,
          saturationMultiplier: 1.1,
          lightnessOffset: 2,
        },
      },
      {
        name: 'tokyo-night-summer',
        displayName: 'Tokyo Night Summer',
        modification: {
          hueShift: 30,
          saturationMultiplier: 1.2,
          lightnessOffset: 5,
        },
      },
      {
        name: 'tokyo-night-autumn',
        displayName: 'Tokyo Night Autumn',
        modification: {
          hueShift: -20,
          saturationMultiplier: 0.9,
          lightnessOffset: -2,
        },
      },
      {
        name: 'tokyo-night-winter',
        displayName: 'Tokyo Night Winter',
        modification: {
          hueShift: -40,
          saturationMultiplier: 0.8,
          lightnessOffset: -5,
        },
      },
    ]

    seasonalThemes.forEach((config) => {
      this.generateCustomTheme(
        config.name,
        config.displayName,
        config.modification
      )
    })

    console.log(`‚úÖ –°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω—ã —Å–µ–∑–æ–Ω–Ω—ã–µ —Ç–µ–º—ã`)
  }

  /**
   * –ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç —Ç–µ–º—ã –¥–ª—è –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏
   */
  generateAccessibilityThemes(): void {
    const accessibilityThemes = [
      {
        name: 'tokyo-night-high-contrast',
        displayName: 'Tokyo Night High Contrast',
        modification: {
          contrastBoost: 2.0,
          saturationMultiplier: 1.5,
          lightnessOffset: 10,
        },
      },
      {
        name: 'tokyo-night-low-contrast',
        displayName: 'Tokyo Night Low Contrast',
        modification: {
          contrastBoost: 0.5,
          saturationMultiplier: 0.6,
          lightnessOffset: -5,
        },
      },
      {
        name: 'tokyo-night-protanopia-friendly',
        displayName: 'Tokyo Night Protanopia Friendly',
        modification: {
          hueShift: 45,
          saturationMultiplier: 1.3,
        },
      },
      {
        name: 'tokyo-night-deuteranopia-friendly',
        displayName: 'Tokyo Night Deuteranopia Friendly',
        modification: {
          hueShift: -45,
          saturationMultiplier: 1.3,
        },
      },
    ]

    accessibilityThemes.forEach((config) => {
      this.generateCustomTheme(
        config.name,
        config.displayName,
        config.modification
      )
    })

    console.log(`‚úÖ –°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω—ã —Ç–µ–º—ã –¥–ª—è –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏`)
  }

  /**
   * –°–æ—Ö—Ä–∞–Ω—è–µ—Ç —Ç–µ–º—É –≤ —Ñ–∞–π–ª
   */
  private saveTheme(theme: ThemeObject): void {
    const filename = `${theme.name
      .replace(/\s+/g, '-')
      .toLowerCase()}-color-theme.json`
    const filepath = join(this.outputDir, filename)

    writeFileSync(filepath, JSON.stringify(theme, null, 2))
  }

  /**
   * –≠–∫—Å–ø–æ—Ä—Ç–∏—Ä—É–µ—Ç –ø–∞–ª–∏—Ç—Ä—É –≤ —Ä–∞–∑–ª–∏—á–Ω—ã–µ —Ñ–æ—Ä–º–∞—Ç—ã
   */
  exportPalettes(): void {
    const palette = require('../palette/extended').extendedPalette
    const formats = ['css', 'scss', 'figma'] as const

    formats.forEach((format) => {
      const content = PaletteUtils.exportPalette(palette, format)
      const filename = `tokyo-night-palette.${
        format === 'figma' ? 'json' : format
      }`
      const filepath = join(this.outputDir, 'palettes', filename)

      mkdirSync(join(this.outputDir, 'palettes'), { recursive: true })
      writeFileSync(filepath, content)
    })

    console.log(`‚úÖ –≠–∫—Å–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω—ã –ø–∞–ª–∏—Ç—Ä—ã –≤ —Ñ–æ—Ä–º–∞—Ç—ã: ${formats.join(', ')}`)
  }

  /**
   * –ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–æ–Ω–Ω—ã–µ —Ç–µ–º—ã
   */
  generateDemoThemes(): void {
    // –ì—Ä–∞–¥–∏–µ–Ω—Ç –æ—Ç —Ç—ë–º–Ω–æ–π –∫ —Å–≤–µ—Ç–ª–æ–π —Ç–µ–º–µ
    const gradientThemes = PaletteUtils.createGradient(
      'tokyo-night-gradient',
      'tokyo-night',
      'tokyo-light',
      3
    )

    gradientThemes.forEach((theme) => {
      this.saveTheme(theme)
      console.log(`‚úÖ –°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–∞ –∫–∞—Å—Ç–æ–º–Ω–∞—è —Ç–µ–º–∞: ${theme.displayName}`)
    })

    // –≠–∫—Å–ø–µ—Ä–∏–º–µ–Ω—Ç–∞–ª—å–Ω—ã–µ —Ü–≤–µ—Ç–æ–≤—ã–µ —Å—Ö–µ–º—ã
    const experimentalThemes = [
      {
        name: 'tokyo-night-pastel',
        displayName: 'Tokyo Night Pastel',
        modification: {
          saturationMultiplier: 0.3,
          lightnessOffset: 20,
          contrastBoost: 0.8,
        },
      },
      {
        name: 'tokyo-night-retro',
        displayName: 'Tokyo Night Retro',
        modification: {
          hueShift: -60,
          saturationMultiplier: 0.7,
          lightnessOffset: -10,
        },
      },
    ]

    experimentalThemes.forEach((config) => {
      this.generateCustomTheme(
        config.name,
        config.displayName,
        config.modification
      )
    })

    console.log(`‚úÖ –°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω—ã –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–æ–Ω–Ω—ã–µ —Ç–µ–º—ã`)
  }

  /**
   * –ó–∞–ø—É—Å–∫–∞–µ—Ç –ø–æ–ª–Ω—É—é –≥–µ–Ω–µ—Ä–∞—Ü–∏—é –≤—Å–µ—Ö —Ç–µ–º
   */
  generateAll(): void {
    console.log('üöÄ –ù–∞—á–∏–Ω–∞–µ–º –≥–µ–Ω–µ—Ä–∞—Ü–∏—é –≤—Å–µ—Ö —Ç–µ–º...')

    this.generateAllVariants()
    this.generateSeasonalThemes()
    this.generateAccessibilityThemes()
    this.generateDemoThemes()
    this.exportPalettes()

    console.log('üéâ –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞!')
  }
}

/**
 * CLI –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ç–æ—Ä–∞
 */
export function runThemeGenerator(): void {
  const args = process.argv.slice(2)
  const outputDir =
    args.find((arg) => arg.startsWith('--output='))?.split('=')[1] || './themes'

  const generator = new ThemeGenerator(outputDir)

  if (args.includes('--all')) {
    generator.generateAll()
  } else if (args.includes('--variants')) {
    generator.generateAllVariants()
  } else if (args.includes('--seasonal')) {
    generator.generateSeasonalThemes()
  } else if (args.includes('--accessibility')) {
    generator.generateAccessibilityThemes()
  } else if (args.includes('--demo')) {
    generator.generateDemoThemes()
  } else if (args.includes('--palettes')) {
    generator.exportPalettes()
  } else {
    console.log(`
Tokyo Night Theme Generator

–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ:
  npm run generate:themes [–æ–ø—Ü–∏–∏]

–û–ø—Ü–∏–∏:
  --all              –ì–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –≤—Å–µ —Ç–µ–º—ã –∏ —ç–∫—Å–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞—Ç—å –ø–∞–ª–∏—Ç—Ä—ã
  --variants         –ì–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –æ—Å–Ω–æ–≤–Ω—ã–µ –≤–∞—Ä–∏–∞–Ω—Ç—ã —Ç–µ–º
  --seasonal         –ì–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å —Å–µ–∑–æ–Ω–Ω—ã–µ —Ç–µ–º—ã
  --accessibility    –ì–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å —Ç–µ–º—ã –¥–ª—è –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏
  --demo             –ì–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–æ–Ω–Ω—ã–µ —Ç–µ–º—ã
  --palettes         –≠–∫—Å–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞—Ç—å –ø–∞–ª–∏—Ç—Ä—ã –≤ —Ä–∞–∑–ª–∏—á–Ω—ã–µ —Ñ–æ—Ä–º–∞—Ç—ã
  --output=<dir>     –î–∏—Ä–µ–∫—Ç–æ—Ä–∏—è –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é: ./themes)

–ü—Ä–∏–º–µ—Ä—ã:
  npm run generate:themes -- --all
  npm run generate:themes -- --variants --output=./dist/themes
  npm run generate:themes -- --seasonal --accessibility
    `)
  }
}

// –ï—Å–ª–∏ –º–æ–¥—É–ª—å –∑–∞–ø—É—â–µ–Ω –Ω–∞–ø—Ä—è–º—É—é
if (require.main === module) {
  runThemeGenerator()
}
