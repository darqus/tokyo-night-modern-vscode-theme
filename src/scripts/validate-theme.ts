#!/usr/bin/env node

import * as fs from 'fs'
import * as path from 'path'
import { PropertyValidator } from '../validation/propertyValidator'
import { ThemeValidator } from '../validation/themeValidator'

/**
 * CLI —É—Ç–∏–ª–∏—Ç–∞ –¥–ª—è –≤–∞–ª–∏–¥–∞—Ü–∏–∏ —Ç–µ–º VS Code
 */

// –¶–≤–µ—Ç–∞ –¥–ª—è –∫–æ–Ω—Å–æ–ª—å–Ω–æ–≥–æ –≤—ã–≤–æ–¥–∞
const colors = {
  reset: '\x1b[0m',
  red: '\x1b[31m',
  yellow: '\x1b[33m',
  green: '\x1b[32m',
  blue: '\x1b[34m',
  cyan: '\x1b[36m',
  bold: '\x1b[1m',
}

function colorize(text: string, color: keyof typeof colors): string {
  return `${colors[color]}${text}${colors.reset}`
}

function printHelp(): void {
  console.log(`
${colorize('–í–∞–ª–∏–¥–∞—Ç–æ—Ä —Ç–µ–º VS Code Tokyo Night', 'bold')}

${colorize('–ò–°–ü–û–õ–¨–ó–û–í–ê–ù–ò–ï:', 'cyan')}
  npm run validate [—Ñ–∞–π–ª-—Ç–µ–º—ã.json]
  node dist/scripts/validate-theme.js [—Ñ–∞–π–ª-—Ç–µ–º—ã.json]

${colorize('–û–ü–¶–ò–ò:', 'cyan')}
  -h, --help              –ü–æ–∫–∞–∑–∞—Ç—å —ç—Ç—É —Å–ø—Ä–∞–≤–∫—É
  -v, --verbose           –ü–æ–¥—Ä–æ–±–Ω—ã–π –≤—ã–≤–æ–¥
  -f, --fix               –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –∏—Å–ø—Ä–∞–≤–∏—Ç—å –Ω–µ–¥–æ–ø—É—Å—Ç–∏–º—ã–µ —Å–≤–æ–π—Å—Ç–≤–∞
  -o, --output <—Ñ–∞–π–ª>     –°–æ—Ö—Ä–∞–Ω–∏—Ç—å –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω—É—é —Ç–µ–º—É –≤ —Ñ–∞–π–ª
  -a, --all               –í–∞–ª–∏–¥–∏—Ä–æ–≤–∞—Ç—å –≤—Å–µ —Ç–µ–º—ã –≤ –ø–∞–ø–∫–µ themes/
  -s, --summary           –ü–æ–∫–∞–∑–∞—Ç—å —Ç–æ–ª—å–∫–æ —Å–≤–æ–¥–∫—É –±–µ–∑ –¥–µ—Ç–∞–ª–µ–π

${colorize('–ü–†–ò–ú–ï–†–´:', 'cyan')}
  npm run validate themes/tokyo-night-dark-color-theme.json
  npm run validate --all
  npm run validate --fix --output fixed-theme.json theme.json

${colorize('–ö–û–î–´ –í–´–•–û–î–ê:', 'cyan')}
  0  - –í–∞–ª–∏–¥–∞—Ü–∏—è –ø—Ä–æ—à–ª–∞ —É—Å–ø–µ—à–Ω–æ
  1  - –ù–∞–π–¥–µ–Ω—ã –æ—à–∏–±–∫–∏
  2  - –ù–µ–≤–µ—Ä–Ω—ã–µ –∞—Ä–≥—É–º–µ–Ω—Ç—ã –∏–ª–∏ –æ—à–∏–±–∫–∞ —Ñ–∞–π–ª–∞
`)
}

interface ValidateOptions {
  verbose: boolean
  fix: boolean
  output?: string
  all: boolean
  summary: boolean
}

async function validateThemeFile(
  filePath: string,
  options: ValidateOptions
): Promise<boolean> {
  if (!fs.existsSync(filePath)) {
    console.error(colorize(`‚ùå –§–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω: ${filePath}`, 'red'))
    return false
  }

  try {
    const content = fs.readFileSync(filePath, 'utf8')
    const theme = JSON.parse(content)

    console.log(colorize(`\nüîç –í–∞–ª–∏–¥–∞—Ü–∏—è: ${path.basename(filePath)}`, 'bold'))

    // –í–∞–ª–∏–¥–∞—Ü–∏—è —Å–≤–æ–π—Å—Ç–≤
    const propertyValidator = new PropertyValidator()
    const propertyResult = propertyValidator.validateThemeProperties(theme)

    // –í–∞–ª–∏–¥–∞—Ü–∏—è –∫–∞—á–µ—Å—Ç–≤–∞
    const qualityValidator = new ThemeValidator()
    const qualityResult = qualityValidator.validateTheme(theme)

    const allPassed = propertyResult.passed && qualityResult.passed
    const totalIssues =
      propertyResult.issues.length + qualityResult.issues.length

    // –°–≤–æ–¥–∫–∞
    if (options.summary) {
      const status = allPassed
        ? colorize('‚úÖ –ü–†–û–ô–î–ï–ù–û', 'green')
        : colorize('‚ùå –ù–ï –ü–†–û–ô–î–ï–ù–û', 'red')
      const issues =
        totalIssues > 0 ? colorize(`(${totalIssues} –ø—Ä–æ–±–ª–µ–º)`, 'yellow') : ''
      console.log(`  ${status} ${issues}`)
      return allPassed
    }

    // –û—Ç—á–µ—Ç—ã –ø–æ —Å–≤–æ–π—Å—Ç–≤–∞–º
    if (propertyResult.issues.length > 0) {
      console.log(colorize('\nüìã –°–í–û–ô–°–¢–í–ê –¢–ï–ú–´:', 'cyan'))
      console.log(propertyValidator.generateReport(propertyResult))
    } else {
      console.log(colorize('‚úÖ –í—Å–µ —Å–≤–æ–π—Å—Ç–≤–∞ —Ç–µ–º—ã –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã', 'green'))
    }

    // –û—Ç—á–µ—Ç—ã –ø–æ –∫–∞—á–µ—Å—Ç–≤—É
    if (qualityResult.issues.length > 0) {
      console.log(colorize('\nüé® –ö–ê–ß–ï–°–¢–í–û –¢–ï–ú–´:', 'cyan'))
      qualityResult.issues.forEach((issue) => {
        const severity =
          issue.severity === 'error'
            ? colorize('üî¥ –û–®–ò–ë–ö–ê', 'red')
            : issue.severity === 'warning'
            ? colorize('üü° –ü–†–ï–î–£–ü–†–ï–ñ–î–ï–ù–ò–ï', 'yellow')
            : colorize('üîµ –ò–ù–§–û–†–ú–ê–¶–ò–Ø', 'blue')
        console.log(`  ${severity}: ${issue.message}`)
        if (issue.suggestion && options.verbose) {
          console.log(`    üí° ${issue.suggestion}`)
        }
      })
    } else {
      console.log(
        colorize('‚úÖ –ö–∞—á–µ—Å—Ç–≤–æ —Ç–µ–º—ã —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É–µ—Ç —Å—Ç–∞–Ω–¥–∞—Ä—Ç–∞–º', 'green')
      )
    }

    // –ê–≤—Ç–æ–∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ
    if (options.fix && !propertyResult.passed) {
      const { fixedTheme, fixes } =
        propertyValidator.fixInvalidProperties(theme)

      if (fixes.length > 0) {
        console.log(
          colorize(
            `\nüîß –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–æ ${fixes.length} –ø—Ä–æ–±–ª–µ–º:`,
            'cyan'
          )
        )
        fixes.forEach((fix) => {
          console.log(`  ‚Ä¢ ${fix.property}: ${fix.action}`)
        })

        const outputPath =
          options.output || filePath.replace('.json', '.fixed.json')
        fs.writeFileSync(
          outputPath,
          JSON.stringify(fixedTheme, null, 2) + '\n',
          'utf8'
        )
        console.log(
          colorize(`üíæ –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω–∞—è —Ç–µ–º–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞: ${outputPath}`, 'green')
        )
      }
    }

    return allPassed
  } catch (error) {
    console.error(
      colorize(
        `‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Ñ–∞–π–ª–∞: ${
          error instanceof Error ? error.message : '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞'
        }`,
        'red'
      )
    )
    return false
  }
}

async function validateAllThemes(options: ValidateOptions): Promise<boolean> {
  const themesDir = path.join(process.cwd(), 'themes')

  if (!fs.existsSync(themesDir)) {
    console.error(colorize('‚ùå –ü–∞–ø–∫–∞ themes/ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞', 'red'))
    return false
  }

  const themeFiles = fs
    .readdirSync(themesDir)
    .filter((file) => file.endsWith('.json'))

  if (themeFiles.length === 0) {
    console.error(colorize('‚ùå –í –ø–∞–ø–∫–µ themes/ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ JSON —Ñ–∞–π–ª–æ–≤', 'red'))
    return false
  }

  console.log(
    colorize(`üîç –ù–∞–π–¥–µ–Ω–æ ${themeFiles.length} —Ç–µ–º –¥–ª—è –≤–∞–ª–∏–¥–∞—Ü–∏–∏:`, 'bold')
  )

  let allPassed = true
  let totalIssues = 0

  for (const file of themeFiles) {
    const filePath = path.join(themesDir, file)
    const result = await validateThemeFile(filePath, options)
    if (!result) allPassed = false
  }

  // –û–±—â–∞—è —Å–≤–æ–¥–∫–∞
  console.log(colorize('\nüìä –û–ë–©–ê–Ø –°–í–û–î–ö–ê:', 'bold'))
  if (allPassed) {
    console.log(colorize('üéâ –í—Å–µ —Ç–µ–º—ã –ø—Ä–æ—à–ª–∏ –≤–∞–ª–∏–¥–∞—Ü–∏—é —É—Å–ø–µ—à–Ω–æ!', 'green'))
  } else {
    console.log(colorize('‚ö†Ô∏è  –ù–µ–∫–æ—Ç–æ—Ä—ã–µ —Ç–µ–º—ã —Å–æ–¥–µ—Ä–∂–∞—Ç –ø—Ä–æ–±–ª–µ–º—ã', 'yellow'))
  }

  return allPassed
}

async function main(): Promise<void> {
  const args = process.argv.slice(2)

  const options: ValidateOptions = {
    verbose: false,
    fix: false,
    all: false,
    summary: false,
  }

  let filePath: string | undefined

  // –ü–∞—Ä—Å–∏–Ω–≥ –∞—Ä–≥—É–º–µ–Ω—Ç–æ–≤
  for (let i = 0; i < args.length; i++) {
    const arg = args[i]

    switch (arg) {
      case '-h':
      case '--help':
        printHelp()
        process.exit(0)

      case '-v':
      case '--verbose':
        options.verbose = true
        break

      case '-f':
      case '--fix':
        options.fix = true
        break

      case '-o':
      case '--output':
        options.output = args[++i]
        break

      case '-a':
      case '--all':
        options.all = true
        break

      case '-s':
      case '--summary':
        options.summary = true
        break

      default:
        if (!arg.startsWith('-')) {
          filePath = arg
        } else {
          console.error(colorize(`‚ùå –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ–ø—Ü–∏—è: ${arg}`, 'red'))
          console.error('–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ --help –¥–ª—è —Å–ø—Ä–∞–≤–∫–∏')
          process.exit(2)
        }
    }
  }

  // –í–∞–ª–∏–¥–∞—Ü–∏—è
  let success = false

  if (options.all) {
    success = await validateAllThemes(options)
  } else if (filePath) {
    success = await validateThemeFile(filePath, options)
  } else {
    console.error(colorize('‚ùå –ù–µ —É–∫–∞–∑–∞–Ω —Ñ–∞–π–ª —Ç–µ–º—ã –¥–ª—è –≤–∞–ª–∏–¥–∞—Ü–∏–∏', 'red'))
    console.error('–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ --help –¥–ª—è —Å–ø—Ä–∞–≤–∫–∏')
    process.exit(2)
  }

  process.exit(success ? 0 : 1)
}

// –ó–∞–ø—É—Å–∫ —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ —Ñ–∞–π–ª –≤—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è –Ω–∞–ø—Ä—è–º—É—é
if (require.main === module) {
  main().catch((error) => {
    console.error(
      colorize(
        `‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: ${
          error instanceof Error ? error.message : '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞'
        }`,
        'red'
      )
    )
    process.exit(2)
  })
}

export { validateThemeFile, validateAllThemes }
