#!/usr/bin/env node

import { ThemeGenerator } from '../generators/theme-generator'
import { AdaptiveThemeGenerator } from '../generators/adaptive-theme-generator'
import type { PaletteModification } from '../palette/adapters'

/**
 * CLI —É—Ç–∏–ª–∏—Ç–∞ –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ Tokyo Night —Ç–µ–º
 */
class ThemeCLI {
  private generator: ThemeGenerator

  constructor() {
    this.generator = new ThemeGenerator()
  }

  /**
   * –ü–∞—Ä—Å–∏—Ç –∞—Ä–≥—É–º–µ–Ω—Ç—ã –∫–æ–º–∞–Ω–¥–Ω–æ–π —Å—Ç—Ä–æ–∫–∏
   */
  private parseArgs(): { [key: string]: string | boolean } {
    const args: { [key: string]: string | boolean } = {}

    process.argv.slice(2).forEach((arg) => {
      if (arg.startsWith('--')) {
        if (arg.includes('=')) {
          const [key, value] = arg.substring(2).split('=')
          args[key] = value
        } else {
          args[arg.substring(2)] = true
        }
      }
    })

    return args
  }

  /**
   * –í—ã–≤–æ–¥–∏—Ç —Å–ø—Ä–∞–≤–∫—É –ø–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—é
   */
  private showHelp(): void {
    console.log(`
üåÉ Tokyo Night Theme Generator CLI

–ò–°–ü–û–õ–¨–ó–û–í–ê–ù–ò–ï:
  npx theme-cli [–∫–æ–º–∞–Ω–¥–∞] [–æ–ø—Ü–∏–∏]

–ö–û–ú–ê–ù–î–´:
  generate         –ì–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å —Ç–µ–º—ã
  custom           –°–æ–∑–¥–∞—Ç—å –∫–∞—Å—Ç–æ–º–Ω—É—é —Ç–µ–º—É
  analyze          –ê–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å –ø–∞–ª–∏—Ç—Ä—É
  export           –≠–∫—Å–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞—Ç—å –ø–∞–ª–∏—Ç—Ä—ã

–û–ü–¶–ò–ò –ì–ï–ù–ï–†–ê–¶–ò–ò:
  --all            –ì–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –≤—Å–µ —Ç–µ–º—ã
  --variants       –û—Å–Ω–æ–≤–Ω—ã–µ –≤–∞—Ä–∏–∞–Ω—Ç—ã (dark, light, storm, moon)
  --seasonal       –°–µ–∑–æ–Ω–Ω—ã–µ —Ç–µ–º—ã (spring, summer, autumn, winter)
  --accessibility  –¢–µ–º—ã –¥–ª—è –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏
  --demo           –î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–æ–Ω–Ω—ã–µ —Ç–µ–º—ã
  --output=<dir>   –î–∏—Ä–µ–∫—Ç–æ—Ä–∏—è –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è

–û–ü–¶–ò–ò –ö–ê–°–¢–û–ú–ù–û–ô –¢–ï–ú–´:
  --name=<name>           –ù–∞–∑–≤–∞–Ω–∏–µ —Ç–µ–º—ã
  --display=<display>     –û—Ç–æ–±—Ä–∞–∂–∞–µ–º–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ
  --type=<dark|light>     –¢–∏–ø —Ç–µ–º—ã
  --hue=<number>          –°–¥–≤–∏–≥ –æ—Ç—Ç–µ–Ω–∫–∞ (-180 –¥–æ 180)
  --saturation=<number>   –ú–Ω–æ–∂–∏—Ç–µ–ª—å –Ω–∞—Å—ã—â–µ–Ω–Ω–æ—Å—Ç–∏ (0.1 –¥–æ 3.0)
  --lightness=<number>    –°–º–µ—â–µ–Ω–∏–µ —è—Ä–∫–æ—Å—Ç–∏ (-50 –¥–æ 50)
  --contrast=<number>     –£—Å–∏–ª–µ–Ω–∏–µ –∫–æ–Ω—Ç—Ä–∞—Å—Ç–∞ (0.1 –¥–æ 3.0)

–û–ü–¶–ò–ò –≠–ö–°–ü–û–†–¢–ê:
  --format=<format>       –§–æ—Ä–º–∞—Ç (css, scss, figma, json)
  --prefix=<prefix>       –ü—Ä–µ—Ñ–∏–∫—Å –¥–ª—è CSS –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö

–ü–†–ò–ú–ï–†–´:
  # –ì–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –≤—Å–µ —Ç–µ–º—ã
  npx theme-cli generate --all

  # –°–æ–∑–¥–∞—Ç—å –∫–∞—Å—Ç–æ–º–Ω—É—é —Ç–µ–º—É
  npx theme-cli custom --name=my-theme --display="My Theme" --hue=30 --saturation=1.2

  # –≠–∫—Å–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞—Ç—å –ø–∞–ª–∏—Ç—Ä—É –≤ CSS
  npx theme-cli export --format=css --prefix=--my-theme

  # –ì–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å —Ç–æ–ª—å–∫–æ —Å–µ–∑–æ–Ω–Ω—ã–µ —Ç–µ–º—ã
  npx theme-cli generate --seasonal --output=./themes

  # –ê–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å —Ç–µ–∫—É—â—É—é –ø–∞–ª–∏—Ç—Ä—É
  npx theme-cli analyze
    `)
  }

  /**
   * –ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç —Ç–µ–º—ã
   */
  private generateThemes(args: { [key: string]: string | boolean }): void {
    console.log('üöÄ –ù–∞—á–∏–Ω–∞–µ–º –≥–µ–Ω–µ—Ä–∞—Ü–∏—é —Ç–µ–º...')

    if (args.output) {
      this.generator = new ThemeGenerator(args.output as string)
    }

    if (args.all) {
      this.generator.generateAll()
    } else {
      if (args.variants) {
        this.generator.generateAllVariants()
      }
      if (args.seasonal) {
        this.generator.generateSeasonalThemes()
      }
      if (args.accessibility) {
        this.generator.generateAccessibilityThemes()
      }
      if (args.demo) {
        this.generator.generateDemoThemes()
      }
    }

    console.log('‚úÖ –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞!')
  }

  /**
   * –°–æ–∑–¥–∞—ë—Ç –∫–∞—Å—Ç–æ–º–Ω—É—é —Ç–µ–º—É
   */
  private createCustomTheme(args: { [key: string]: string | boolean }): void {
    const name = args.name as string
    const displayName = (args.display as string) || name
    const type = (args.type as 'dark' | 'light') || 'dark'

    if (!name) {
      console.error('‚ùå –û—à–∏–±–∫–∞: —Ç—Ä–µ–±—É–µ—Ç—Å—è –ø–∞—Ä–∞–º–µ—Ç—Ä --name')
      return
    }

    const modification: PaletteModification = {}

    if (args.hue) {
      const hue = parseFloat(args.hue as string)
      if (hue >= -180 && hue <= 180) {
        modification.hueShift = hue
      }
    }

    if (args.saturation) {
      const saturation = parseFloat(args.saturation as string)
      if (saturation >= 0.1 && saturation <= 3.0) {
        modification.saturationMultiplier = saturation
      }
    }

    if (args.lightness) {
      const lightness = parseFloat(args.lightness as string)
      if (lightness >= -50 && lightness <= 50) {
        modification.lightnessOffset = lightness
      }
    }

    if (args.contrast) {
      const contrast = parseFloat(args.contrast as string)
      if (contrast >= 0.1 && contrast <= 3.0) {
        modification.contrastBoost = contrast
      }
    }

    console.log(`üé® –°–æ–∑–¥–∞—ë–º –∫–∞—Å—Ç–æ–º–Ω—É—é —Ç–µ–º—É: ${displayName}`)
    console.log(`   –ú–æ–¥–∏—Ñ–∏–∫–∞—Ü–∏–∏:`, modification)

    this.generator.generateCustomTheme(name, displayName, modification, type)
  }

  /**
   * –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ—Ç –ø–∞–ª–∏—Ç—Ä—É
   */
  private analyzePalette(): void {
    console.log('üîç –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –ø–∞–ª–∏—Ç—Ä—É...')

    const { PaletteUtils } = require('../generators/adaptive-theme-generator')
    const { extendedPalette } = require('../palette/extended')

    const analysis = PaletteUtils.analyzePalette(extendedPalette)

    console.log(`
üìä –ê–ù–ê–õ–ò–ó –ü–ê–õ–ò–¢–†–´:
   –î–æ–º–∏–Ω–∏—Ä—É—é—â–∏–π –æ—Ç—Ç–µ–Ω–æ–∫: ${analysis.dominantHue}
   –£—Ä–æ–≤–µ–Ω—å –Ω–∞—Å—ã—â–µ–Ω–Ω–æ—Å—Ç–∏: ${analysis.saturationLevel}
   –ö–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç –∫–æ–Ω—Ç—Ä–∞—Å—Ç–∞: ${analysis.contrastRatio}
   –î–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å: ${analysis.accessibility}
   –¶–≤–µ—Ç–æ–≤–∞—è –≥–∞—Ä–º–æ–Ω–∏—è: ${analysis.colorHarmony}
    `)
  }

  /**
   * –≠–∫—Å–ø–æ—Ä—Ç–∏—Ä—É–µ—Ç –ø–∞–ª–∏—Ç—Ä—ã
   */
  private exportPalettes(args: { [key: string]: string | boolean }): void {
    const format = (args.format as string) || 'json'
    const prefix = (args.prefix as string) || '--tokyo'

    console.log(`üì§ –≠–∫—Å–ø–æ—Ä—Ç–∏—Ä—É–µ–º –ø–∞–ª–∏—Ç—Ä—É –≤ —Ñ–æ—Ä–º–∞—Ç: ${format}`)

    if (format === 'all') {
      this.generator.exportPalettes()
    } else {
      const { PaletteUtils } = require('../generators/adaptive-theme-generator')
      const { extendedPalette } = require('../palette/extended')

      const exported = PaletteUtils.exportPalette(extendedPalette, format)

      if (format === 'css' && prefix !== '--tokyo') {
        // –ó–∞–º–µ–Ω—è–µ–º –ø—Ä–µ—Ñ–∏–∫—Å –≤ CSS
        const customCSS = exported.replace(/--tokyo/g, prefix)
        console.log(customCSS)
      } else {
        console.log(exported)
      }
    }
  }

  /**
   * –ó–∞–ø—É—Å–∫–∞–µ—Ç CLI
   */
  run(): void {
    const args = this.parseArgs()
    const command = process.argv[2]

    if (!command || args.help) {
      this.showHelp()
      return
    }

    try {
      switch (command) {
        case 'generate':
          this.generateThemes(args)
          break
        case 'custom':
          this.createCustomTheme(args)
          break
        case 'analyze':
          this.analyzePalette()
          break
        case 'export':
          this.exportPalettes(args)
          break
        default:
          console.error(`‚ùå –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞: ${command}`)
          this.showHelp()
      }
    } catch (error) {
      console.error(
        `‚ùå –û—à–∏–±–∫–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è: ${
          error instanceof Error ? error.message : String(error)
        }`
      )
      process.exit(1)
    }
  }
}

// –ï—Å–ª–∏ –º–æ–¥—É–ª—å –∑–∞–ø—É—â–µ–Ω –Ω–∞–ø—Ä—è–º—É—é
if (require.main === module) {
  const cli = new ThemeCLI()
  cli.run()
}

export { ThemeCLI }
