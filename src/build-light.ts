import { getAdaptedPalette } from './palette/adapters'
import { buildColorsWithContext } from './theme/colors'
import { getTokenColors } from './tokenColors'
import { semanticTokenColors } from './semanticTokenColors'
import { writeFileSync } from 'fs'
import { join } from 'path'

/**
 * –ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç —Å–≤–µ—Ç–ª—É—é —Ç–µ–º—É —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º –∞–¥–∞–ø—Ç–∏—Ä–æ–≤–∞–Ω–Ω–æ–π –ø–∞–ª–∏—Ç—Ä—ã
 */
function buildLightTheme() {
  console.log('üåû Building Tokyo Night Light Theme...')

  // –ü–æ–ª—É—á–∞–µ–º –∞–¥–∞–ø—Ç–∏—Ä–æ–≤–∞–Ω–Ω—É—é –ø–∞–ª–∏—Ç—Ä—É –¥–ª—è —Å–≤–µ—Ç–ª–æ–π —Ç–µ–º—ã
  const lightPalette = getAdaptedPalette('tokyo-light')

  // –°–æ–∑–¥–∞–µ–º –∫–æ–Ω—Ç–µ–∫—Å—Ç –¥–ª—è —Å–≤–µ—Ç–ª–æ–π —Ç–µ–º—ã
  const context = {
    type: 'light' as const,
    adaptedPalette: lightPalette,
    variant: 'tokyo-light' as const,
    displayName: 'Tokyo Night Light',
  }

  // –°—Ç—Ä–æ–∏–º —Ü–≤–µ—Ç–∞ —Ç–µ–º—ã
  const colors = buildColorsWithContext(context)

  // –ü–æ–ª—É—á–∞–µ–º —Ü–≤–µ—Ç–∞ —Ç–æ–∫–µ–Ω–æ–≤
  const tokenColors = getTokenColors()

  // –°–æ–∑–¥–∞–µ–º –æ–±—ä–µ–∫—Ç —Ç–µ–º—ã
  const lightTheme = {
    name: 'Tokyo Night Light',
    type: 'light' as const,
    colors,
    tokenColors,
    semanticTokenColors,
    semanticHighlighting: true,
  }

  // –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ç–µ–º—É
  const outputPath = join(
    __dirname,
    '..',
    'themes',
    'tokyo-night-light-color-theme.json'
  )
  writeFileSync(outputPath, JSON.stringify(lightTheme, null, 2))

  console.log('‚úÖ Tokyo Night Light Theme built successfully!')
  console.log(`üìÅ Saved to: ${outputPath}`)

  return lightTheme
}

// –ó–∞–ø—É—Å–∫–∞–µ–º –µ—Å–ª–∏ —Ñ–∞–π–ª –≤—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è –Ω–∞–ø—Ä—è–º—É—é
if (require.main === module) {
  buildLightTheme()
}

export { buildLightTheme }
