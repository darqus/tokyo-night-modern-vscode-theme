/**
 * –ê–Ω–∞–ª–∏–∑ —Ü–≤–µ—Ç–æ–≤–æ–π —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä—ã –≤ –ø–∞–ª–∏—Ç—Ä–µ Tokyo Night
 * –ü–æ–∏—Å–∫ —Ç–µ–ø–ª—ã—Ö —Ü–≤–µ—Ç–æ–≤, –∫–æ—Ç–æ—Ä—ã–µ –º–æ–≥—É—Ç –Ω–µ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–æ–≤–∞—Ç—å —Ö–æ–ª–æ–¥–Ω–æ–π —Ü–≤–µ—Ç–æ–≤–æ–π —Å—Ö–µ–º–µ
 */

import { palette } from '../src/palette'
import { RGB, HSL, ColorTemperature, ColorAnalysisResult } from './types'

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏–∏ hex –≤ RGB (–ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç –∞–ª—å—Ñ–∞-–∫–∞–Ω–∞–ª)
function hexToRgb(hex: string): RGB {
  // –£–±–∏—Ä–∞–µ–º # –µ—Å–ª–∏ –µ—Å—Ç—å
  hex = hex.replace('#', '')

  // –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Ü–≤–µ—Ç–∞ —Å –∞–ª—å—Ñ–∞-–∫–∞–Ω–∞–ª–æ–º (8 —Å–∏–º–≤–æ–ª–æ–≤) - –±–µ—Ä–µ–º —Ç–æ–ª—å–∫–æ RGB —á–∞—Å—Ç—å
  if (hex.length === 8) {
    hex = hex.substring(0, 6)
  }

  const result = /^([a-f\d]{2})([a-f\d]{2})([a-f\d]{2})$/i.exec(hex)
  if (!result) throw new Error(`–ù–µ–≤–µ—Ä–Ω—ã–π hex —Ü–≤–µ—Ç: ${hex}`)

  return {
    r: parseInt(result[1], 16),
    g: parseInt(result[2], 16),
    b: parseInt(result[3], 16),
  }
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏–∏ RGB –≤ HSL
function rgbToHsl(r: number, g: number, b: number): HSL {
  r /= 255
  g /= 255
  b /= 255

  const max = Math.max(r, g, b)
  const min = Math.min(r, g, b)
  let h = 0
  let s = 0
  const l = (max + min) / 2

  if (max === min) {
    h = s = 0 // –∞—Ö—Ä–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–π
  } else {
    const d = max - min
    s = l > 0.5 ? d / (2 - max - min) : d / (max + min)

    switch (max) {
      case r:
        h = (g - b) / d + (g < b ? 6 : 0)
        break
      case g:
        h = (b - r) / d + 2
        break
      case b:
        h = (r - g) / d + 4
        break
    }
    h /= 6
  }

  return {
    h: Math.round(h * 360),
    s: Math.round(s * 100),
    l: Math.round(l * 100),
  }
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è —Ü–≤–µ—Ç–æ–≤–æ–π —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä—ã
function getColorTemperature(hex: string): ColorTemperature {
  const rgb = hexToRgb(hex)
  const hsl = rgbToHsl(rgb.r, rgb.g, rgb.b)

  // –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ü–≤–µ—Ç–æ–≤—É—é —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä—É –ø–æ –æ—Ç—Ç–µ–Ω–∫—É (H –≤ HSL)
  // –¢–µ–ø–ª—ã–µ —Ü–≤–µ—Ç–∞: 0-60¬∞ (–∫—Ä–∞—Å–Ω—ã–π, –æ—Ä–∞–Ω–∂–µ–≤—ã–π, –∂–µ–ª—Ç—ã–π) –∏ 300-360¬∞ (–ø—É—Ä–ø—É—Ä–Ω–æ-–∫—Ä–∞—Å–Ω—ã–π)
  // –•–æ–ª–æ–¥–Ω—ã–µ —Ü–≤–µ—Ç–∞: 180-300¬∞ (–≥–æ–ª—É–±–æ–π, —Å–∏–Ω–∏–π, —Ñ–∏–æ–ª–µ—Ç–æ–≤—ã–π)
  // –ù–µ–π—Ç—Ä–∞–ª—å–Ω—ã–µ: 60-180¬∞ (–∂–µ–ª—Ç–æ-–∑–µ–ª–µ–Ω—ã–π, –∑–µ–ª–µ–Ω—ã–π, –∑–µ–ª–µ–Ω–æ-–≥–æ–ª—É–±–æ–π)

  if ((hsl.h >= 0 && hsl.h <= 60) || (hsl.h >= 300 && hsl.h <= 360)) {
    return '—Ç–µ–ø–ª—ã–π'
  } else if (hsl.h >= 180 && hsl.h <= 300) {
    return '—Ö–æ–ª–æ–¥–Ω—ã–π'
  } else {
    return '–Ω–µ–π—Ç—Ä–∞–ª—å–Ω—ã–π'
  }
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ –≤—Å–µ–π –ø–∞–ª–∏—Ç—Ä—ã
function analyzePalette() {
  const results: ColorAnalysisResult[] = []

  // –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ–±—Ö–æ–¥–∞ –æ–±—ä–µ–∫—Ç–∞ –ø–∞–ª–∏—Ç—Ä—ã
  function traverseObject(obj: Record<string, unknown>, path: string = '') {
    for (const [key, value] of Object.entries(obj)) {
      const currentPath = path ? `${path}.${key}` : key

      if (typeof value === 'string' && value.startsWith('#')) {
        const rgb = hexToRgb(value)
        const hsl = rgbToHsl(rgb.r, rgb.g, rgb.b)
        const temperature = getColorTemperature(value)

        let concern = ''
        if (temperature === '—Ç–µ–ø–ª—ã–π') {
          concern = '‚ö†Ô∏è –¢–ï–ü–õ–´–ô –¶–í–ï–¢ - –º–æ–∂–µ—Ç –Ω–∞—Ä—É—à–∞—Ç—å —Ö–æ–ª–æ–¥–Ω—É—é —Ü–≤–µ—Ç–æ–≤—É—é —Å—Ö–µ–º—É'
        } else if (
          temperature === '–Ω–µ–π—Ç—Ä–∞–ª—å–Ω—ã–π' &&
          hsl.h >= 60 &&
          hsl.h <= 120
        ) {
          concern = '‚ö° –ù–ï–ô–¢–†–ê–õ–¨–ù–´–ô (–∑–µ–ª–µ–Ω–æ–≤–∞—Ç—ã–π) - –ø—Ä–æ–≤–µ—Ä–∏—Ç—å —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–µ'
        }

        results.push({
          category: path || 'root',
          name: currentPath,
          hex: value,
          temperature,
          hsl,
          concern,
        })
      } else if (typeof value === 'object' && value !== null) {
        traverseObject(value as Record<string, unknown>, currentPath)
      }
    }
  }

  traverseObject(palette as unknown as Record<string, unknown>)
  return results
}

// –ü—Ä–æ–≤–æ–¥–∏–º –∞–Ω–∞–ª–∏–∑
const analysis = analyzePalette()

// –§–∏–ª—å—Ç—Ä—É–µ–º –ø—Ä–æ–±–ª–µ–º–Ω—ã–µ —Ü–≤–µ—Ç–∞
const warmColors = analysis.filter((color) => color.temperature === '—Ç–µ–ø–ª—ã–π')
const neutralConcerns = analysis.filter((color) =>
  color.concern.includes('–ù–ï–ô–¢–†–ê–õ–¨–ù–´–ô')
)
const allConcerns = analysis.filter((color) => color.concern !== '')

console.log('=== –ê–ù–ê–õ–ò–ó –¶–í–ï–¢–û–í–û–ô –¢–ï–ú–ü–ï–†–ê–¢–£–†–´ TOKYO NIGHT THEME ===\n')

console.log(`–í—Å–µ–≥–æ —Ü–≤–µ—Ç–æ–≤ –ø—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–æ: ${analysis.length}`)
console.log(
  `–•–æ–ª–æ–¥–Ω—ã—Ö —Ü–≤–µ—Ç–æ–≤: ${
    analysis.filter((c) => c.temperature === '—Ö–æ–ª–æ–¥–Ω—ã–π').length
  }`
)
console.log(
  `–ù–µ–π—Ç—Ä–∞–ª—å–Ω—ã—Ö —Ü–≤–µ—Ç–æ–≤: ${
    analysis.filter((c) => c.temperature === '–Ω–µ–π—Ç—Ä–∞–ª—å–Ω—ã–π').length
  }`
)
console.log(`–¢–µ–ø–ª—ã—Ö —Ü–≤–µ—Ç–æ–≤: ${warmColors.length}`)
console.log(`–í—Å–µ–≥–æ –ø—Ä–æ–±–ª–µ–º–Ω—ã—Ö: ${allConcerns.length}\n`)

if (warmColors.length > 0) {
  console.log('üî• –¢–ï–ü–õ–´–ï –¶–í–ï–¢–ê (–ø–æ—Ç–µ–Ω—Ü–∏–∞–ª—å–Ω—ã–µ –ø—Ä–æ–±–ª–µ–º—ã):')
  console.log('='.repeat(60))
  warmColors.forEach((color) => {
    console.log(`${color.name}`)
    console.log(`  –¶–≤–µ—Ç: ${color.hex}`)
    console.log(`  HSL: H=${color.hsl.h}¬∞ S=${color.hsl.s}% L=${color.hsl.l}%`)
    console.log(`  ${color.concern}`)
    console.log('')
  })
}

if (neutralConcerns.length > 0) {
  console.log('‚ö° –ù–ï–ô–¢–†–ê–õ–¨–ù–´–ï –¶–í–ï–¢–ê (—Ç—Ä–µ–±—É—é—Ç –ø—Ä–æ–≤–µ—Ä–∫–∏):')
  console.log('='.repeat(60))
  neutralConcerns.forEach((color) => {
    console.log(`${color.name}`)
    console.log(`  –¶–≤–µ—Ç: ${color.hex}`)
    console.log(`  HSL: H=${color.hsl.h}¬∞ S=${color.hsl.s}% L=${color.hsl.l}%`)
    console.log(`  ${color.concern}`)
    console.log('')
  })
}

// –ì—Ä—É–ø–ø–∏—Ä–æ–≤–∫–∞ –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º –¥–ª—è –ª—É—á—à–µ–≥–æ –ø–æ–Ω–∏–º–∞–Ω–∏—è
console.log('üìä –°–¢–ê–¢–ò–°–¢–ò–ö–ê –ü–û –ö–ê–¢–ï–ì–û–†–ò–Ø–ú:')
console.log('='.repeat(40))
const categories = [...new Set(analysis.map((c) => c.category))]
categories.forEach((category) => {
  const categoryColors = analysis.filter((c) => c.category === category)
  const warm = categoryColors.filter((c) => c.temperature === '—Ç–µ–ø–ª—ã–π').length
  const cold = categoryColors.filter((c) => c.temperature === '—Ö–æ–ª–æ–¥–Ω—ã–π').length
  const neutral = categoryColors.filter(
    (c) => c.temperature === '–Ω–µ–π—Ç—Ä–∞–ª—å–Ω—ã–π'
  ).length

  console.log(
    `${category}: ${categoryColors.length} —Ü–≤–µ—Ç–æ–≤ (üî•${warm} ‚ùÑÔ∏è${cold} ‚ö°${neutral})`
  )
})

// –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏
console.log('\nüí° –†–ï–ö–û–ú–ï–ù–î–ê–¶–ò–ò:')
console.log('='.repeat(50))

if (warmColors.length > 0) {
  console.log('1. –ö–†–ò–¢–ò–ß–ï–°–ö–ò–ï –¢–ï–ü–õ–´–ï –¶–í–ï–¢–ê:')
  warmColors.forEach((color) => {
    if (color.hsl.h >= 0 && color.hsl.h <= 30) {
      console.log(
        `   - ${color.name} (${color.hex}) - –∫—Ä–∞—Å–Ω–æ–≤–∞—Ç—ã–π, —Ä–∞—Å—Å–º–æ—Ç—Ä–µ—Ç—å –∑–∞–º–µ–Ω—É –Ω–∞ —Ö–æ–ª–æ–¥–Ω—ã–π –∫—Ä–∞—Å–Ω—ã–π`
      )
    } else if (color.hsl.h >= 30 && color.hsl.h <= 60) {
      console.log(
        `   - ${color.name} (${color.hex}) - –æ—Ä–∞–Ω–∂–µ–≤–æ/–∂–µ–ª—Ç—ã–π, —Ä–∞—Å—Å–º–æ—Ç—Ä–µ—Ç—å –∑–∞–º–µ–Ω—É –Ω–∞ —Ö–æ–ª–æ–¥–Ω—ã–π –∞–Ω–∞–ª–æ–≥`
      )
    } else if (color.hsl.h >= 300) {
      console.log(
        `   - ${color.name} (${color.hex}) - –ø—É—Ä–ø—É—Ä–Ω–æ-–∫—Ä–∞—Å–Ω—ã–π, –≤–æ–∑–º–æ–∂–Ω–æ –ø—Ä–∏–µ–º–ª–µ–º –≤ –∫–æ–Ω—Ç–µ–∫—Å—Ç–µ`
      )
    }
  })
}

if (neutralConcerns.length > 0) {
  console.log('\n2. –ù–ï–ô–¢–†–ê–õ–¨–ù–´–ï –¶–í–ï–¢–ê –ö –ü–†–û–í–ï–†–ö–ï:')
  neutralConcerns.forEach((color) => {
    console.log(
      `   - ${color.name} (${color.hex}) - –º–æ–∂–µ—Ç –±—ã—Ç—å —Å–ª–∏—à–∫–æ–º –∑–µ–ª–µ–Ω—ã–º –¥–ª—è —Ç–µ–º—ã`
    )
  })
}

console.log('\n3. –û–ë–©–ò–ï –†–ï–ö–û–ú–ï–ù–î–ê–¶–ò–ò:')
console.log(
  '   - Tokyo Night –¥–æ–ª–∂–Ω–∞ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –ø—Ä–µ–∏–º—É—â–µ—Å—Ç–≤–µ–Ω–Ω–æ —Ö–æ–ª–æ–¥–Ω—ã–µ —Ü–≤–µ—Ç–∞ (—Å–∏–Ω–∏–µ, —Ñ–∏–æ–ª–µ—Ç–æ–≤—ã–µ, –≥–æ–ª—É–±—ã–µ)'
)
console.log(
  '   - –¢–µ–ø–ª—ã–µ –∞–∫—Ü–µ–Ω—Ç—ã –¥–æ–ø—É—Å—Ç–∏–º—ã —Ç–æ–ª—å–∫–æ –¥–ª—è –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏ –≤–∞–∂–Ω—ã—Ö —ç–ª–µ–º–µ–Ω—Ç–æ–≤ (–æ—à–∏–±–∫–∏, –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏—è)'
)
console.log(
  '   - –†–∞—Å—Å–º–æ—Ç—Ä–∏—Ç–µ –∑–∞–º–µ–Ω—É —Ç–µ–ø–ª—ã—Ö —Ü–≤–µ—Ç–æ–≤ –Ω–∞ –∏—Ö —Ö–æ–ª–æ–¥–Ω—ã–µ –∞–Ω–∞–ª–æ–≥–∏ —Å —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ–º –∫–æ–Ω—Ç—Ä–∞—Å—Ç–Ω–æ—Å—Ç–∏'
)

export { analyzePalette, getColorTemperature, hexToRgb, rgbToHsl }
