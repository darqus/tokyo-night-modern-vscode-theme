/**
 * –ê–Ω–∞–ª–∏–∑ –∫–æ–Ω—Ç—Ä–∞—Å—Ç–Ω–æ—Å—Ç–∏ —Å–≤–µ—Ç–ª–æ–π —Ç–µ–º—ã Tokyo Night Light
 * –í—ã—è–≤–ª—è–µ—Ç –ø—Ä–æ–±–ª–µ–º—ã —Å —á–∏—Ç–∞–µ–º–æ—Å—Ç—å—é –∏ –ø—Ä–µ–¥–ª–∞–≥–∞–µ—Ç —Ä–µ—à–µ–Ω–∏—è
 */

import { readFileSync } from 'fs'
import { join } from 'path'

// –¢–∏–ø—ã –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞
interface ColorPair {
  property: string
  foreground: string
  background: string
  contrast?: number
  issues?: string[]
}

interface ContrastAnalysis {
  critical: ColorPair[] // –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∏–µ –ø—Ä–æ–±–ª–µ–º—ã (–±–µ–ª—ã–π –Ω–∞ –±–µ–ª–æ–º)
  poor: ColorPair[] // –ü–ª–æ—Ö–∞—è –∫–æ–Ω—Ç—Ä–∞—Å—Ç–Ω–æ—Å—Ç—å
  acceptable: ColorPair[] // –ü—Ä–∏–µ–º–ª–µ–º–∞—è –∫–æ–Ω—Ç—Ä–∞—Å—Ç–Ω–æ—Å—Ç—å
  good: ColorPair[] // –•–æ—Ä–æ—à–∞—è –∫–æ–Ω—Ç—Ä–∞—Å—Ç–Ω–æ—Å—Ç—å
}

/**
 * –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ—Ç hex –≤ RGB
 */
function hexToRgb(hex: string): [number, number, number] {
  const cleanHex = hex.replace('#', '').substring(0, 6)
  const r = parseInt(cleanHex.substring(0, 2), 16)
  const g = parseInt(cleanHex.substring(2, 4), 16)
  const b = parseInt(cleanHex.substring(4, 6), 16)
  return [r, g, b]
}

/**
 * –í—ã—á–∏—Å–ª—è–µ—Ç –æ—Ç–Ω–æ—Å–∏—Ç–µ–ª—å–Ω—É—é —è—Ä–∫–æ—Å—Ç—å
 */
function getLuminance(hex: string): number {
  const [r, g, b] = hexToRgb(hex)

  const rsRGB = r / 255
  const gsRGB = g / 255
  const bsRGB = b / 255

  const rLinear =
    rsRGB <= 0.03928 ? rsRGB / 12.92 : Math.pow((rsRGB + 0.055) / 1.055, 2.4)
  const gLinear =
    gsRGB <= 0.03928 ? gsRGB / 12.92 : Math.pow((gsRGB + 0.055) / 1.055, 2.4)
  const bLinear =
    bsRGB <= 0.03928 ? bsRGB / 12.92 : Math.pow((bsRGB + 0.055) / 1.055, 2.4)

  return 0.2126 * rLinear + 0.7152 * gLinear + 0.0722 * bLinear
}

/**
 * –í—ã—á–∏—Å–ª—è–µ—Ç –∫–æ–Ω—Ç—Ä–∞—Å—Ç–Ω–æ–µ —Å–æ–æ—Ç–Ω–æ—à–µ–Ω–∏–µ WCAG
 */
function getContrastRatio(foreground: string, background: string): number {
  const l1 = getLuminance(foreground)
  const l2 = getLuminance(background)
  const lighter = Math.max(l1, l2)
  const darker = Math.min(l1, l2)
  return (lighter + 0.05) / (darker + 0.05)
}

/**
 * –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ—Ç —Ç–µ–º—É –Ω–∞ –∫–æ–Ω—Ç—Ä–∞—Å—Ç–Ω–æ—Å—Ç—å
 */
function analyzeThemeContrast(): ContrastAnalysis {
  const themePath = join(
    process.cwd(),
    'themes',
    'tokyo-night-light-color-theme.json'
  )
  const themeData = JSON.parse(readFileSync(themePath, 'utf8'))
  const colors = themeData.colors

  const analysis: ContrastAnalysis = {
    critical: [],
    poor: [],
    acceptable: [],
    good: [],
  }

  // –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∏–µ –∫–æ–º–±–∏–Ω–∞—Ü–∏–∏ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏
  const criticalChecks: Array<{ name: string; fg: string; bg: string }> = [
    // –û—Å–Ω–æ–≤–Ω—ã–µ —ç–ª–µ–º–µ–Ω—Ç—ã –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞
    {
      name: 'Main Foreground',
      fg: colors.foreground,
      bg: colors['editor.background'],
    },
    {
      name: 'Title Bar Text',
      fg: colors['titleBar.activeForeground'],
      bg: colors['titleBar.activeBackground'],
    },
    {
      name: 'Command Center Text',
      fg: colors['commandCenter.foreground'],
      bg: colors['commandCenter.background'],
    },
    {
      name: 'Banner Text',
      fg: colors['banner.foreground'],
      bg: colors['banner.background'],
    },
    {
      name: 'Text Link',
      fg: colors['textLink.foreground'],
      bg: colors['editor.background'],
    },
    {
      name: 'Settings Header',
      fg: colors['settings.headerForeground'],
      bg: colors['editor.background'],
    },

    // –ö–Ω–æ–ø–∫–∏ –∏ —ç–ª–µ–º–µ–Ω—Ç—ã —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è
    {
      name: 'Button Text',
      fg: colors['button.foreground'],
      bg: colors['button.background'],
    },
    {
      name: 'Extension Button Text',
      fg: colors['extensionButton.prominentForeground'],
      bg: colors['extensionButton.prominentBackground'],
    },

    // –ü–∞–Ω–µ–ª–∏
    {
      name: 'Side Bar Text',
      fg: colors['sideBar.foreground'],
      bg: colors['sideBar.background'],
    },
    {
      name: 'Activity Bar Text',
      fg: colors['activityBar.foreground'],
      bg: colors['activityBar.background'],
    },
    {
      name: 'Status Bar Text',
      fg: colors['statusBar.foreground'],
      bg: colors['statusBar.background'],
    },

    // –í–∫–ª–∞–¥–∫–∏
    {
      name: 'Active Tab Text',
      fg: colors['tab.activeForeground'],
      bg: colors['tab.activeBackground'],
    },
    {
      name: 'Inactive Tab Text',
      fg: colors['tab.inactiveForeground'],
      bg: colors['tab.inactiveBackground'],
    },
  ]

  for (const check of criticalChecks) {
    if (!check.fg || !check.bg) continue

    const issues: string[] = []

    // –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –æ–¥–∏–Ω–∞–∫–æ–≤—ã–µ —Ü–≤–µ—Ç–∞
    if (check.fg === check.bg) {
      issues.push('Identical colors - invisible text!')
    }

    // –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –±–µ–ª—ã–π —Ç–µ–∫—Å—Ç –Ω–∞ –±–µ–ª–æ–º —Ñ–æ–Ω–µ
    if (check.fg === '#ffffff' && check.bg === '#ffffff') {
      issues.push('White on white - completely invisible!')
    }

    const contrast = getContrastRatio(check.fg, check.bg)

    const pair: ColorPair = {
      property: check.name,
      foreground: check.fg,
      background: check.bg,
      contrast,
      issues,
    }

    if (issues.length > 0 || contrast < 2) {
      analysis.critical.push(pair)
    } else if (contrast < 3) {
      analysis.poor.push(pair)
    } else if (contrast < 4.5) {
      analysis.acceptable.push(pair)
    } else {
      analysis.good.push(pair)
    }
  }

  return analysis
}

/**
 * –ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –¥–ª—è —É–ª—É—á—à–µ–Ω–∏—è
 */
function generateRecommendations(analysis: ContrastAnalysis): string[] {
  const recommendations: string[] = []

  if (analysis.critical.length > 0) {
    recommendations.push('üö® –ö–†–ò–¢–ò–ß–ï–°–ö–ò–ï –ü–†–û–ë–õ–ï–ú–´:')
    analysis.critical.forEach((pair) => {
      recommendations.push(
        `  - ${pair.property}: ${pair.foreground} –Ω–∞ ${pair.background}`
      )
      if (pair.issues) {
        pair.issues.forEach((issue) => recommendations.push(`    ‚ö†Ô∏è ${issue}`))
      }
      if (pair.contrast) {
        recommendations.push(`    üìä –ö–æ–Ω—Ç—Ä–∞—Å—Ç: ${pair.contrast.toFixed(2)}:1`)
      }
    })
    recommendations.push('')
  }

  if (analysis.poor.length > 0) {
    recommendations.push('üî¥ –ü–õ–û–•–ê–Ø –ö–û–ù–¢–†–ê–°–¢–ù–û–°–¢–¨ (< 3:1):')
    analysis.poor.forEach((pair) => {
      recommendations.push(
        `  - ${pair.property}: ${pair.contrast?.toFixed(2)}:1`
      )
    })
    recommendations.push('')
  }

  if (analysis.acceptable.length > 0) {
    recommendations.push('üü° –¢–†–ï–ë–£–ï–¢ –£–õ–£–ß–®–ï–ù–ò–Ø (< 4.5:1):')
    analysis.acceptable.forEach((pair) => {
      recommendations.push(
        `  - ${pair.property}: ${pair.contrast?.toFixed(2)}:1`
      )
    })
    recommendations.push('')
  }

  // –ö–æ–Ω–∫—Ä–µ—Ç–Ω—ã–µ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏
  recommendations.push('üí° –†–ï–ö–û–ú–ï–ù–î–ê–¶–ò–ò –ü–û –ò–°–ü–†–ê–í–õ–ï–ù–ò–Æ:')
  recommendations.push('1. –°–æ–∑–¥–∞—Ç—å —Å–ø–µ—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—É—é –ø–∞–ª–∏—Ç—Ä—É –¥–ª—è —Å–≤–µ—Ç–ª–æ–π —Ç–µ–º—ã')
  recommendations.push('2. –ò—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —Ç–µ–º–Ω—ã–µ —Ü–≤–µ—Ç–∞ —Ç–µ–∫—Å—Ç–∞ –Ω–∞ —Å–≤–µ—Ç–ª—ã—Ö —Ñ–æ–Ω–∞—Ö')
  recommendations.push('3. –ê–¥–∞–ø—Ç–∏—Ä–æ–≤–∞—Ç—å —Å–∏—Å—Ç–µ–º—É text.* —Ü–≤–µ—Ç–æ–≤ –¥–ª—è —Å–≤–µ—Ç–ª–æ–π —Ç–µ–º—ã')
  recommendations.push('4. –î–æ–±–∞–≤–∏—Ç—å —É—Å–ª–æ–≤–Ω—É—é –ª–æ–≥–∏–∫—É –≤ –∞–¥–∞–ø—Ç–µ—Ä—ã –ø–∞–ª–∏—Ç—Ä')
  recommendations.push(
    '5. –°–æ–∑–¥–∞—Ç—å –æ—Ç–¥–µ–ª—å–Ω—ã–µ —Ü–≤–µ—Ç–æ–≤—ã–µ —Å—Ö–µ–º—ã –¥–ª—è light/dark —Ä–µ–∂–∏–º–æ–≤'
  )

  return recommendations
}

// –ó–∞–ø—É—Å–∫ –∞–Ω–∞–ª–∏–∑–∞
const analysis = analyzeThemeContrast()
const recommendations = generateRecommendations(analysis)

console.log('üîç –ê–ù–ê–õ–ò–ó –ö–û–ù–¢–†–ê–°–¢–ù–û–°–¢–ò –°–í–ï–¢–õ–û–ô –¢–ï–ú–´')
console.log('='.repeat(50))
console.log('')

recommendations.forEach((rec) => console.log(rec))

console.log('')
console.log('üìä –°–¢–ê–¢–ò–°–¢–ò–ö–ê:')
console.log(`–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∏–µ –ø—Ä–æ–±–ª–µ–º—ã: ${analysis.critical.length}`)
console.log(`–ü–ª–æ—Ö–∞—è –∫–æ–Ω—Ç—Ä–∞—Å—Ç–Ω–æ—Å—Ç—å: ${analysis.poor.length}`)
console.log(`–¢—Ä–µ–±—É–µ—Ç —É–ª—É—á—à–µ–Ω–∏—è: ${analysis.acceptable.length}`)
console.log(`–•–æ—Ä–æ—à–∞—è –∫–æ–Ω—Ç—Ä–∞—Å—Ç–Ω–æ—Å—Ç—å: ${analysis.good.length}`)

export { analyzeThemeContrast, generateRecommendations }
