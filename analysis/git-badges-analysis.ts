import fs from 'fs'
import path from 'path'

/**
 * –ê–Ω–∞–ª–∏  // –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –∫–ª—é—á–µ–≤—ã–µ —Ç–µ–º—ã
  const themeFiles = [
    'tokyo-night-dark-color-theme.json',
    'tokyo-night-light-color-theme.json',
    'tokyo-night-storm-color-theme.json',
    'tokyo-night-high-contrast-color-theme.json',
    'tokyo-night-pastel-color-theme.json'
  ]—Ç–Ω–æ—Å—Ç–∏ –Ω–æ–≤—ã—Ö –∞–¥–∞–ø—Ç–∏–≤–Ω—ã—Ö Git-–±–µ–π–¥–∂–µ–π
 * –ü—Ä–æ–≤–µ—Ä—è–µ—Ç, —á—Ç–æ –∫–∞–∂–¥—ã–π —Ç–∏–ø —Ç–µ–º—ã –∏–º–µ–µ—Ç —Å–≤–æ–∏ —Å–ø–µ—Ü–∏—Ñ–∏—á–µ—Å–∫–∏–µ —Ü–≤–µ—Ç–∞
 */

interface ThemeAnalysis {
  themeName: string
  badgeBackground: string
  badgeForeground: string
  gitModified: string
  gitDeleted: string
  gitAdded: string
  scmGraphForeground1: string
  contrast?: number
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –≤—ã—á–∏—Å–ª–µ–Ω–∏—è –æ—Ç–Ω–æ—Å–∏—Ç–µ–ª—å–Ω–æ–π —è—Ä–∫–æ—Å—Ç–∏ —Ü–≤–µ—Ç–∞
function getLuminance(hex: string): number {
  const r = parseInt(hex.slice(1, 3), 16) / 255
  const g = parseInt(hex.slice(3, 5), 16) / 255
  const b = parseInt(hex.slice(5, 7), 16) / 255

  const getRGB = (color: number) => {
    return color <= 0.03928
      ? color / 12.92
      : Math.pow((color + 0.055) / 1.055, 2.4)
  }

  return 0.2126 * getRGB(r) + 0.7152 * getRGB(g) + 0.0722 * getRGB(b)
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –≤—ã—á–∏—Å–ª–µ–Ω–∏—è –∫–æ–Ω—Ç—Ä–∞—Å—Ç–Ω–æ—Å—Ç–∏
function getContrastRatio(color1: string, color2: string): number {
  // –£–±–∏—Ä–∞–µ–º –∞–ª—å—Ñ–∞-–∫–∞–Ω–∞–ª –∏ –ø—Ä–æ–≤–µ—Ä—è–µ–º –¥–ª–∏–Ω—É
  const cleanColor1 = color1.replace(/[^#0-9a-f]/gi, '')
  const cleanColor2 = color2.replace(/[^#0-9a-f]/gi, '')

  if (cleanColor1.length < 7 || cleanColor2.length < 7) {
    return 0 // –ù–µ–≤–æ–∑–º–æ–∂–Ω–æ –≤—ã—á–∏—Å–ª–∏—Ç—å –¥–ª—è –∫–æ—Ä–æ—Ç–∫–∏—Ö —Ü–≤–µ—Ç–æ–≤
  }

  const lum1 = getLuminance(cleanColor1.slice(0, 7))
  const lum2 = getLuminance(cleanColor2.slice(0, 7))

  const brightest = Math.max(lum1, lum2)
  const darkest = Math.min(lum1, lum2)

  return (brightest + 0.05) / (darkest + 0.05)
}

function analyzeThemes(): void {
  const themesDir = path.join(process.cwd(), 'themes')
  const results: ThemeAnalysis[] = []

  // –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –∫–ª—é—á–µ–≤—ã–µ —Ç–µ–º—ã
  const themeFiles = [
    'tokyo-night-dark-color-theme.json',
    'tokyo-night-light-color-theme.json',
    'tokyo-night-storm-color-theme.json',
    'tokyo-night-high-contrast-color-theme.json',
    'tokyo-night-neon-color-theme.json',
    'tokyo-night-pastel-color-theme.json',
  ]

  for (const fileName of themeFiles) {
    const filePath = path.join(themesDir, fileName)

    if (!fs.existsSync(filePath)) {
      console.log(`‚ö†Ô∏è  –§–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω: ${fileName}`)
      continue
    }

    try {
      const themeData = JSON.parse(fs.readFileSync(filePath, 'utf8'))
      const colors = themeData.colors || {}

      const analysis: ThemeAnalysis = {
        themeName: fileName.replace('-color-theme.json', ''),
        badgeBackground: colors['badge.background'] || 'N/A',
        badgeForeground: colors['badge.foreground'] || 'N/A',
        gitModified:
          colors['gitDecoration.modifiedResourceForeground'] || 'N/A',
        gitDeleted: colors['gitDecoration.deletedResourceForeground'] || 'N/A',
        gitAdded: colors['gitDecoration.addedResourceForeground'] || 'N/A',
        scmGraphForeground1: colors['scmGraph.foreground1'] || 'N/A',
      }

      // –í—ã—á–∏—Å–ª—è–µ–º –∫–æ–Ω—Ç—Ä–∞—Å—Ç–Ω–æ—Å—Ç—å –±–µ–π–¥–∂–∞
      if (
        analysis.badgeBackground !== 'N/A' &&
        analysis.badgeForeground !== 'N/A'
      ) {
        analysis.contrast = getContrastRatio(
          analysis.badgeBackground,
          analysis.badgeForeground
        )
      }

      results.push(analysis)
    } catch (error) {
      console.log(`‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∞–Ω–∞–ª–∏–∑–µ ${fileName}:`, error)
    }
  }

  // –í—ã–≤–æ–¥–∏–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
  console.log('üé® –ê–ù–ê–õ–ò–ó –ê–î–ê–ü–¢–ò–í–ù–´–• GIT-–ë–ï–ô–î–ñ–ï–ô\n')
  console.log('='.repeat(60))

  for (const result of results) {
    console.log(`\nüìÅ ${result.themeName.toUpperCase()}`)
    console.log(
      `   –ë–µ–π–¥–∂: ${result.badgeBackground} –Ω–∞ ${result.badgeForeground}`
    )
    if (result.contrast) {
      console.log(
        `   –ö–æ–Ω—Ç—Ä–∞—Å—Ç: ${result.contrast.toFixed(2)}:1 ${
          result.contrast >= 4.5 ? '‚úÖ' : '‚ö†Ô∏è'
        }`
      )
    }
    console.log(`   Git Modified: ${result.gitModified}`)
    console.log(`   Git Deleted:  ${result.gitDeleted}`)
    console.log(`   Git Added:    ${result.gitAdded}`)
    console.log(`   SCM Graph:    ${result.scmGraphForeground1}`)
  }

  // –ü—Ä–æ–≤–µ—Ä—è–µ–º —É–Ω–∏–∫–∞–ª—å–Ω–æ—Å—Ç—å —Ü–≤–µ—Ç–æ–≤
  console.log('\nüîç –ü–†–û–í–ï–†–ö–ê –£–ù–ò–ö–ê–õ–¨–ù–û–°–¢–ò –¶–í–ï–¢–û–í')
  console.log('='.repeat(40))

  const uniqueBadgeBackgrounds = new Set(results.map((r) => r.badgeBackground))
  const uniqueGitModified = new Set(results.map((r) => r.gitModified))

  console.log(
    `‚úÖ –£–Ω–∏–∫–∞–ª—å–Ω—ã—Ö —Ü–≤–µ—Ç–æ–≤ —Ñ–æ–Ω–∞ –±–µ–π–¥–∂–µ–π: ${uniqueBadgeBackgrounds.size}/${results.length}`
  )
  console.log(
    `‚úÖ –£–Ω–∏–∫–∞–ª—å–Ω—ã—Ö —Ü–≤–µ—Ç–æ–≤ Git Modified: ${uniqueGitModified.size}/${results.length}`
  )

  if (uniqueBadgeBackgrounds.size === results.length) {
    console.log('üéâ –í—Å–µ —Ç–µ–º—ã –∏–º–µ—é—Ç —É–Ω–∏–∫–∞–ª—å–Ω—ã–µ —Ü–≤–µ—Ç–∞ –±–µ–π–¥–∂–µ–π!')
  }

  if (uniqueGitModified.size === results.length) {
    console.log('üéâ –í—Å–µ —Ç–µ–º—ã –∏–º–µ—é—Ç —É–Ω–∏–∫–∞–ª—å–Ω—ã–µ Git-—Ü–≤–µ—Ç–∞!')
  }

  // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ–Ω—Ç—Ä–∞—Å—Ç–Ω–æ—Å—Ç—å
  console.log('\nüìä –ö–û–ù–¢–†–ê–°–¢–ù–û–°–¢–¨ –ë–ï–ô–î–ñ–ï–ô')
  console.log('='.repeat(30))

  const goodContrast = results.filter((r) => r.contrast && r.contrast >= 4.5)
  const poorContrast = results.filter((r) => r.contrast && r.contrast < 4.5)

  console.log(`‚úÖ –•–æ—Ä–æ—à–∞—è –∫–æ–Ω—Ç—Ä–∞—Å—Ç–Ω–æ—Å—Ç—å (‚â•4.5): ${goodContrast.length}`)
  console.log(`‚ö†Ô∏è  –ù–∏–∑–∫–∞—è –∫–æ–Ω—Ç—Ä–∞—Å—Ç–Ω–æ—Å—Ç—å (<4.5): ${poorContrast.length}`)

  if (poorContrast.length > 0) {
    console.log('\n‚ö†Ô∏è  –¢–µ–º—ã —Å –Ω–∏–∑–∫–æ–π –∫–æ–Ω—Ç—Ä–∞—Å—Ç–Ω–æ—Å—Ç—å—é:')
    for (const theme of poorContrast) {
      console.log(`   - ${theme.themeName}: ${theme.contrast?.toFixed(2)}:1`)
    }
  }
}

// –ó–∞–ø—É—Å–∫ –∞–Ω–∞–ª–∏–∑–∞
analyzeThemes()
